├── .github
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── FUNDING.yml
    ├── ISSUE_TEMPLATE.md
    ├── ISSUE_TEMPLATE
    │   ├── 1--error-report.md
    │   ├── 2--question.md
    │   ├── 3--feature-request.md
    │   ├── 4--bug-report.md
    │   └── 5--documentation.md
    ├── config.yml
    ├── stale.yml
    └── workflows
    │   └── nightly.yml
├── .gitignore
├── LICENSE
├── README.md
├── Reset_Sketch
    ├── README.md
    ├── Reset_Sketch.ino
    ├── blank_1MB.bin
    ├── reset_16mb.bin
    ├── reset_1mb.bin
    ├── reset_4mb.bin
    └── reset_512kb.bin
├── arduino-cli.yaml
├── esp8266_deauther
    ├── A_config.h
    ├── Accesspoints.cpp
    ├── Accesspoints.h
    ├── Attack.cpp
    ├── Attack.h
    ├── CLI.cpp
    ├── CLI.h
    ├── DisplayUI.cpp
    ├── DisplayUI.h
    ├── EEPROMHelper.h
    ├── Names.cpp
    ├── Names.h
    ├── SSIDs.cpp
    ├── SSIDs.h
    ├── Scan.cpp
    ├── Scan.h
    ├── SimpleList.h
    ├── Stations.cpp
    ├── Stations.h
    ├── data
    │   └── web
    │   │   ├── LICENSE.gz
    │   │   ├── attack.html.gz
    │   │   ├── index.html.gz
    │   │   ├── info.html.gz
    │   │   ├── js
    │   │       ├── attack.js.gz
    │   │       ├── scan.js.gz
    │   │       ├── settings.js.gz
    │   │       ├── site.js.gz
    │   │       └── ssids.js.gz
    │   │   ├── lang
    │   │       ├── cn.lang.gz
    │   │       ├── cs.lang.gz
    │   │       ├── da.lang.gz
    │   │       ├── de.lang.gz
    │   │       ├── en.lang.gz
    │   │       ├── es.lang.gz
    │   │       ├── fi.lang.gz
    │   │       ├── fr.lang.gz
    │   │       ├── hu.lang.gz
    │   │       ├── in.lang.gz
    │   │       ├── it.lang.gz
    │   │       ├── ja.lang.gz
    │   │       ├── ko.lang.gz
    │   │       ├── nl.lang.gz
    │   │       ├── pl.lang.gz
    │   │       ├── pt-br.lang.gz
    │   │       ├── ptbr.lang.gz
    │   │       ├── ro.lang.gz
    │   │       ├── ru.lang.gz
    │   │       ├── th.lang.gz
    │   │       ├── tlh.lang.gz
    │   │       └── uk.lang.gz
    │   │   ├── scan.html.gz
    │   │   ├── settings.html.gz
    │   │   ├── ssids.html.gz
    │   │   └── style.css.gz
    ├── debug.h
    ├── esp8266_deauther.ino
    ├── functions.h
    ├── language.h
    ├── led.cpp
    ├── led.h
    ├── oui.h
    ├── settings.cpp
    ├── settings.h
    ├── src
    │   ├── Adafruit_DotStar-1.1.4
    │   │   ├── Adafruit_DotStar.cpp
    │   │   ├── Adafruit_DotStar.h
    │   │   └── license.txt
    │   ├── Adafruit_NeoPixel-1.7.0
    │   │   ├── Adafruit_NeoPixel.cpp
    │   │   ├── Adafruit_NeoPixel.h
    │   │   ├── COPYING
    │   │   └── esp8266.c
    │   ├── ArduinoJson-v5.13.5
    │   │   └── ArduinoJson.h
    │   ├── DS3231-1.0.3
    │   │   ├── DS3231.cpp
    │   │   ├── DS3231.h
    │   │   └── LICENSE
    │   ├── SimpleButton
    │   │   ├── Buttons
    │   │   │   ├── AnalogStick.cpp
    │   │   │   ├── AnalogStick.h
    │   │   │   ├── Button.cpp
    │   │   │   ├── Button.h
    │   │   │   ├── ButtonAnalog.cpp
    │   │   │   ├── ButtonAnalog.h
    │   │   │   ├── ButtonGPIOExpander.cpp
    │   │   │   ├── ButtonGPIOExpander.h
    │   │   │   ├── ButtonPullup.cpp
    │   │   │   ├── ButtonPullup.h
    │   │   │   ├── ButtonPullupGPIOExpander.cpp
    │   │   │   ├── ButtonPullupGPIOExpander.h
    │   │   │   ├── PS2Gamepad.cpp
    │   │   │   ├── PS2Gamepad.h
    │   │   │   ├── RotaryEncoder.cpp
    │   │   │   ├── RotaryEncoder.h
    │   │   │   ├── RotaryEncoderI2C.cpp
    │   │   │   ├── RotaryEncoderI2C.h
    │   │   │   ├── Switch.cpp
    │   │   │   └── Switch.h
    │   │   ├── Events
    │   │   │   ├── ClickEvent.cpp
    │   │   │   ├── ClickEvent.h
    │   │   │   ├── DoubleclickEvent.cpp
    │   │   │   ├── DoubleclickEvent.h
    │   │   │   ├── Event.cpp
    │   │   │   ├── Event.h
    │   │   │   ├── HoldEvent.cpp
    │   │   │   ├── HoldEvent.h
    │   │   │   ├── PushEvent.cpp
    │   │   │   ├── PushEvent.h
    │   │   │   ├── ReleaseEvent.cpp
    │   │   │   └── ReleaseEvent.h
    │   │   ├── LICENSE
    │   │   ├── SimpleButton.h
    │   │   └── libs
    │   │   │   ├── GPIOExpander.cpp
    │   │   │   ├── GPIOExpander.h
    │   │   │   ├── MCP23017.cpp
    │   │   │   ├── MCP23017.h
    │   │   │   ├── PCF8574.cpp
    │   │   │   ├── PCF8574.h
    │   │   │   ├── PCF8575.cpp
    │   │   │   └── PCF8575.h
    │   ├── esp8266-oled-ssd1306-4.1.0
    │   │   ├── OLEDDisplay.cpp
    │   │   ├── OLEDDisplay.h
    │   │   ├── OLEDDisplayFonts.h
    │   │   ├── OLEDDisplayUi.cpp
    │   │   ├── OLEDDisplayUi.h
    │   │   ├── README.md
    │   │   ├── SH1106.h
    │   │   ├── SH1106Brzo.h
    │   │   ├── SH1106Spi.h
    │   │   ├── SH1106Wire.h
    │   │   ├── SSD1306.h
    │   │   ├── SSD1306Brzo.h
    │   │   ├── SSD1306I2C.h
    │   │   ├── SSD1306Spi.h
    │   │   ├── SSD1306Wire.h
    │   │   └── license
    │   └── my92xx-3.0.3
    │   │   ├── LICENSE
    │   │   ├── my92xx.cpp
    │   │   └── my92xx.h
    ├── webfiles.h
    ├── wifi.cpp
    └── wifi.h
├── serialcommands.md
├── settings.md
├── utils
    ├── arduino-cli-compile.py
    ├── old_web_converter
    │   ├── convert_all.sh
    │   ├── converter.html
    │   ├── jquery-3.2.1.min.js
    │   ├── readme.md
    │   └── style.css
    ├── vendor_list_updater
    │   ├── README.md
    │   └── update_manuf.py
    └── web_converter
    │   ├── css_html_js_minify
    │       ├── __init__.py
    │       ├── css_minifier.py
    │       ├── html_minifier.py
    │       ├── js_minifier.py
    │       ├── minify.py
    │       └── variables.py
    │   ├── readme.md
    │   └── webConverter.py
└── web_interface
    ├── attack.html
    ├── attack.json
    ├── index.html
    ├── info.html
    ├── js
        ├── attack.js
        ├── scan.js
        ├── settings.js
        ├── site.js
        └── ssids.js
    ├── lang
        ├── cn.lang
        ├── cs.lang
        ├── da.lang
        ├── de.lang
        ├── en.lang
        ├── es.lang
        ├── fi.lang
        ├── fr.lang
        ├── hu.lang
        ├── in.lang
        ├── it.lang
        ├── ja.lang
        ├── ko.lang
        ├── nl.lang
        ├── pl.lang
        ├── ptbr.lang
        ├── ro.lang
        ├── ru.lang
        ├── th.lang
        ├── tlh.lang
        └── uk.lang
    ├── names.json
    ├── run
    ├── scan.html
    ├── scan.json
    ├── settings.html
    ├── settings.json
    ├── ssids.html
    ├── ssids.json
    └── style.css


/.github/CODE_OF_CONDUCT.md:
--------------------------------------------------------------------------------
 1 | # Code of Conduct
 2 | 
 3 | ## Our Pledge
 4 | 
 5 | In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, OS choice, favourite programming language (especially if it's JavaScript), nationality, personal appearance, race, religion, or sexual identity and orientation.
 6 | 
 7 | ## Our Standards
 8 | 
 9 | Examples of behavior that contributes to creating a positive environment include:
10 | 
11 | * Using welcoming and inclusive language
12 | * Being respectful of differing viewpoints and experiences
13 | * Gracefully accepting constructive criticism
14 | * Focusing on what is best for the community
15 | * Showing empathy towards other community members
16 | 
17 | Examples of unacceptable behavior by participants include:
18 | 
19 | * Calling this project a "Jammer"
20 | * The use of sexualized language or imagery and unwelcome sexual attention or advances
21 | * Trolling, insulting/derogatory comments, and personal or political attacks
22 | * Public or private harassment
23 | * Publishing others' private information, such as a physical or electronic address, without explicit permission
24 | * Other conduct which could reasonably be considered inappropriate in a professional setting such as promoting chicken foodism
25 | 
26 | ## Our Responsibilities
27 | 
28 | Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.
29 | 
30 | Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.
31 | 
32 | ## Scope
33 | 
34 | This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.
35 | 
36 | ## Enforcement
37 | 
38 | Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mail@spacehuhn.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.
39 | 
40 | Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.
41 | 
42 | ## Attribution
43 | 
44 | This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]
45 | 
46 | [homepage]: http://contributor-covenant.org
47 | [version]: http://contributor-covenant.org/version/1/4/
48 | 


--------------------------------------------------------------------------------
/.github/CONTRIBUTING.md:
--------------------------------------------------------------------------------
 1 | # Request for contributions
 2 | 
 3 | Please contribute to this repository if any of the following is true:
 4 | - You have expertise in Arduino/ESP8266 development, WiFi, or C/C++
 5 | - You want to help lower the burden to first time contributors
 6 | - You want this open source community to be more collaborative and inclusive
 7 | 
 8 | # How to contribute
 9 | 
10 | Prerequisites:
11 | 
12 | - Familiarity with [pull requests](https://help.github.com/articles/using-pull-requests) and [issues](https://guides.github.com/features/issues/).
13 | - Knowledge of [Markdown](https://help.github.com/articles/markdown-basics/) for editing `.md` documents.
14 | - Knowledge of [WiFi Deauth](https://en.wikipedia.org/wiki/Wi-Fi_deauthentication_attack) for understanding the project.
15 | 
16 | In particular, this community seeks the following types of contributions:
17 | 
18 | - **Ideas**: participate in an issue thread or start your own to have your voice
19 | heard.
20 | - **Resources**: submit a pull request to add to RESOURCES.md with links to related content.
21 | - **Outline sections**: help us ensure that this repository is comprehensive. if
22 | there is a topic that is overlooked, please add it, even if it is just a stub
23 | in the form of a header and single sentence. Initially, most things fall into
24 | this category.
25 | - **Writing**: contribute your expertise in an area by helping us expand the included
26 | content.
27 | - **Copy editing**: fix typos, clarify language, and generally improve the quality
28 | of the content.
29 | - **Formatting**: help keep content easy to read with consistent formatting.
30 | 
31 | <a name="bugs"></a>
32 | ## Bug reports
33 | 
34 | A bug is a _demonstrable problem_ that is caused by the code in the repository.
35 | Good bug reports are extremely helpful - thank you!
36 | 
37 | Guidelines for bug reports:
38 | 
39 | 1. **Use the GitHub issue search** &mdash; check if the issue has already been
40 |    reported.
41 | 
42 | 2. **Check if the issue has been fixed** &mdash; try to reproduce it using the
43 |    latest `master` or development branch in the repository.
44 | 
45 | 3. **Isolate the problem**.
46 | 
47 | A good bug report shouldn't leave others needing to chase you up for more
48 | information. Please try to be as detailed as possible in your report. What is
49 | your environment? What steps will reproduce the issue? What browser(s) and OS
50 | experience the problem? What would you expect to be the outcome? All these
51 | details will help people to fix any potential bugs.
52 | 
53 | Example:
54 | 
55 | > Short and descriptive example bug report title
56 | >
57 | > A summary of the issue and the browser/OS environment in which it occurs. If
58 | > suitable, include the steps required to reproduce the bug.
59 | >
60 | > 1. This is the first step
61 | > 2. This is the second step
62 | > 3. Further steps, etc.
63 | >
64 | > `<url>` - a link to the serial output on pastebin
65 | > `<pic>` - a photo of your build with apparent wiring
66 | >
67 | > Any other information you want to share that is relevant to the issue being
68 | > reported. This might include the lines of code that you have identified as
69 | > causing the bug, and potential solutions (and your opinions on their
70 | > merits).
71 | 
72 | 
73 | <a name="features"></a>
74 | ## Feature requests
75 | 
76 | Feature requests are welcome. But take a moment to find out whether your idea
77 | fits with the scope and aims of the project. It's up to *you* to make a strong
78 | case to convince the project's developers of the merits of this feature. Please
79 | provide as much detail and context as possible.
80 | 
81 | 
82 | <a name="pull-requests"></a>
83 | ## Pull requests
84 | 
85 | Good pull requests - patches, improvements, new features - are a fantastic
86 | help. They should remain focused in scope and avoid containing unrelated
87 | commits.
88 | 
89 | **Please ask first** before embarking on any significant pull request (e.g.
90 | implementing features, refactoring code, porting to a different language),
91 | otherwise you risk spending a lot of time working on something that the
92 | project's developers might not want to merge into the project.
93 | 
94 | Please adhere to the coding conventions used throughout a project (indentation,
95 | accurate comments, etc.) and any other requirements (such as test coverage).
96 | 


--------------------------------------------------------------------------------
/.github/FUNDING.yml:
--------------------------------------------------------------------------------
 1 | # These are supported funding model platforms
 2 | 
 3 | github: spacehuhntech
 4 | patreon: # Replace with a single Patreon username
 5 | open_collective: # Replace with a single Open Collective username
 6 | ko_fi: spacehuhn
 7 | tidelift: # Replace with a single Tidelift platform-name/package-name e.g., npm/babel
 8 | community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
 9 | liberapay: # Replace with a single Liberapay username
10 | issuehunt: # Replace with a single IssueHunt username
11 | otechie: # Replace with a single Otechie username
12 | custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']
13 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE.md:
--------------------------------------------------------------------------------
1 | > Please search for existing (open and closed) issues first to avoid duplicates.  
2 | Also have a look at the [Wiki](https://github.com/spacehuhntech/esp8266_deauther/wiki).  
3 | 
4 | ```
5 | PASTE YOUR ERROR/COMPILE LOGS HERE
6 | ```


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/1--error-report.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 1. Problem or error report
 3 | about: I encountered a problem and need help to solve it
 4 | title: ""
 5 | labels: help wanted
 6 | assignees: ''
 7 | ---
 8 | 
 9 | > Have you searched for existing (open and closed) issues describing the same problem?
10 | 
11 | Yes/No
12 | 
13 | **Describe the error**
14 | A clear and concise description of what the problem is.
15 | What do you think causes it?
16 | 
17 | ```
18 | Error/Compile/Output Log
19 | ```
20 | 
21 | **To Reproduce**
22 | Steps to reproduce the behavior:
23 | 1. Go to '...'
24 | 2. Click on '....'
25 | 3. Scroll down to '....'
26 | 4. See error
27 | 
28 | **Expected behavior**
29 | A clear and concise description of what you expected to happen.
30 | 
31 | **Screenshots**
32 | If applicable, add screenshots to help explain your problem.
33 | 
34 | **Environment (please complete the following information):**
35 |  - OS: [e.g. iOS]
36 |  - Browser [e.g. chrome, safari]
37 |  - Version [e.g. 1.0]
38 |  - Hardware [e.g. DSTIKE, DIY]
39 | 
40 | **Attempts**
41 | What have you already tried and didn't work out.
42 | 
43 | **Additional context**
44 | Provide as much information as possible, better too much than too little!
45 | If you don't use this template, your issue might be closed and tagged invalid!
46 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/2--question.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 2. Question
 3 | about: I have a question about this project
 4 | title: ""
 5 | labels: question
 6 | assignees: ''
 7 | 
 8 | ---
 9 | 
10 | > Please search for existing (open and closed) issues first to avoid duplicates.  
11 | Also have a look at the [Wiki](https://github.com/spacehuhntech/esp8266_deauther/wiki).  
12 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/3--feature-request.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 3. Feature request
 3 | about: I have an idea to improve this project
 4 | title: ""
 5 | labels: feature request
 6 | assignees: ''
 7 | 
 8 | ---
 9 | 
10 | **Do similar feature requests issues already exist (open and closed)?**
11 | If yes, please link them here:
12 | 
13 | **Is your feature request related to a problem? Please describe.**
14 | A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
15 | 
16 | **Describe the solution you'd like**
17 | A clear and concise description of what you want to happen.
18 | 
19 | **Describe alternatives you've considered**
20 | A clear and concise description of any alternative solutions or features you've considered.
21 | 
22 | **Additional context**
23 | Add any other context or screenshots about the feature request here.
24 | If you don't use this template, your issue might be closed and tagged invalid!
25 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/4--bug-report.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 4. Bug report
 3 | about: I found a reproducible bug in the code
 4 | title: ""
 5 | labels: bug
 6 | assignees: ''
 7 | 
 8 | ---
 9 | 
10 | **Describe the bug**
11 | A clear and concise description of what the bug is.
12 | 
13 | **To Reproduce**
14 | Steps to reproduce the behavior:
15 | 1. Go to '...'
16 | 2. Click on '....'
17 | 3. Scroll down to '....'
18 | 4. See error
19 | 
20 | **Expected behavior**
21 | A clear and concise description of what you expected to happen.
22 | 
23 | **Screenshots**
24 | If applicable, add screenshots to help explain your problem.
25 | 
26 | **Environment (please complete the following information):**
27 |  - OS: [e.g. iOS]
28 |  - Browser [e.g. chrome, safari]
29 |  - Version [e.g. 1.0]
30 |  - Hardware [e.g. DSTIKE, DIY]
31 | 
32 | **Additional context**
33 | Add any other context about the problem here.
34 | If you don't use this template, your issue might be closed and tagged invalid!
35 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/5--documentation.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 5. Documentation
 3 | about: I have something to improve or add to the docs
 4 | title: ''
 5 | labels: documentation
 6 | assignees: ''
 7 | 
 8 | ---
 9 | 
10 | **Describe your changes**
11 | A clear and concise description of what you like to add or change.
12 | 
13 | **Location**
14 | Where should these changes be made or the information published?
15 | Wiki, README, ...
16 | 
17 | **Additional context**
18 | Add any other context about your proposal.
19 | 


--------------------------------------------------------------------------------
/.github/config.yml:
--------------------------------------------------------------------------------
 1 | # Configuration for welcome - https://github.com/behaviorbot/welcome
 2 | newIssueWelcomeComment: >
 3 |   Congrats on opening your first issue on this repository! 🎉<br>
 4 |   This is a automated message to help you avoid common pitfalls when asking for help online.<br>
 5 |   👉 Be sure to:<br>
 6 |   * 🇬🇧 Communicate in English so everybody can understand you<br>
 7 |   * 📖 Have a look at the [Wiki](https://github.com/spacehuhntech/esp8266_deauther/wiki) and [README](https://github.com/SpacehuhnTech/esp8266_deauther/blob/v2/README.md) for information<br>
 8 |   * 🔍 Search for similar [issues (open and closed)](https://github.com/SpacehuhnTech/esp8266_deauther/issues?q=is%3Aissue+)<br>
 9 |   * ✍️ Provide enough information to understand, recreate and help out with your problem<br>
10 |   * ℹ️ Let us know if you find a solution and please share it with us<br>
11 |   * 📕 Close the issue when your problem has been solved
12 | 
13 | newPRWelcomeComment: 
14 | 
15 | firstPRMergeComment: 
16 | 


--------------------------------------------------------------------------------
/.github/stale.yml:
--------------------------------------------------------------------------------
 1 | # Number of days of inactivity before an issue becomes stale
 2 | daysUntilStale: 180
 3 | # Number of days of inactivity before a stale issue is closed
 4 | daysUntilClose: 7
 5 | # Issues with these labels will never be considered stale
 6 | exemptLabels:
 7 |   - pinned
 8 |   - bug
 9 |   - translation
10 |   - feature request
11 | # Label to use when marking an issue as stale
12 | staleLabel: stale
13 | # Comment to post when marking an issue as stale. Set to `false` to disable
14 | markComment: >
15 |   This issue has been automatically marked as stale because it has not had
16 |   recent activity. It will be closed if no further activity occurs. Thank you
17 |   for your contributions.
18 | # Comment to post when closing a stale issue. Set to `false` to disable
19 | closeComment: false
20 | 


--------------------------------------------------------------------------------
/.github/workflows/nightly.yml:
--------------------------------------------------------------------------------
 1 | name: Trigger nightly build
 2 | 
 3 | on:
 4 |   push:
 5 | 
 6 | jobs:
 7 | 
 8 |   notify-nightly:
 9 |     name: "Trigger new build on nightly-deauther"
10 |     runs-on: ubuntu-latest
11 |     steps:
12 |       - name: Build message title
13 |         id: notif
14 |         run: echo ::set-output name=TITLE::Deauther V2 $(echo ${{ github.sha }} | cut -c -7)
15 |           
16 |       - name: Send message
17 |         run: |
18 |           curl -X POST https://api.github.com/repos/spacehuhntech/nightly-deauther/dispatches \
19 |           -H 'Accept: application/vnd.github.everest-preview+json' \
20 |           -u ${{ secrets.ACCESS_TOKEN }} \
21 |           --data '{"event_type": "${{ steps.notif.outputs.TITLE }}", "client_payload": {}}'
22 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
 1 | 
 2 | *.bin
 3 | 
 4 | *.elf
 5 | 
 6 | *.map
 7 | 
 8 | .DS_Store
 9 | 
10 | *.pyc
11 | 
12 | utils/web_converter/css_html_js_minify/__pycache__/
13 | 


--------------------------------------------------------------------------------
/LICENSE:
--------------------------------------------------------------------------------
 1 | Do not redistribute, advertise or sell this software as a "jammer"!!!
 2 | 
 3 | MIT License
 4 | 
 5 | Copyright (c) 2020 Spacehuhn Technologies
 6 | 
 7 | Permission is hereby granted, free of charge, to any person obtaining a copy
 8 | of this software and associated documentation files (the "Software"), to deal
 9 | in the Software without restriction, including without limitation the rights
10 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
11 | copies of the Software, and to permit persons to whom the Software is
12 | furnished to do so, subject to the following conditions:
13 | 
14 | The above copyright notice and this permission notice shall be included in all
15 | copies or substantial portions of the Software.
16 | 
17 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
18 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
19 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
20 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
21 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
22 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
23 | SOFTWARE.
24 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
 1 | # ESP8266 Deauther
 2 | 
 3 | <img src='https://deauther.com/img/logo.png' alt='Deauther Logo' width='200' />
 4 | 
 5 | **Scan for WiFi devices, block selected connections, create dozens of networks and confuse WiFi scanners.**
 6 | 
 7 | ## New Documentation
 8 | 
 9 | Hi 👋  
10 | Please visit [Deauther.com](https://deauther.com) for information about this project.  
11 | Here are some quick links:
12 | 
13 | * [Buy](https://deauther.com/docs/buy)
14 | * [Download](https://deauther.com/docs/download)
15 | * [DIY Tutorial](https://deauther.com/docs/category/diy-tutorial)
16 | * [Usage](https://deauther.com/docs/category/usage)
17 | * [FAQ](https://deauther.com/docs/faq)
18 | 
19 | ## Password
20 | 
21 | The password for `pwned` is `deauther`
22 | 
23 | ## About this Project
24 | 
25 | This firmware allows you to easily perform a variety of actions to test 802.11 networks using an [ESP8266](https://www.espressif.com/en/products/socs/esp8266). It's also a great project for learning about WiFi, microcontrollers, Arduino, hacking and electronics/programming in general.  
26 | 
27 | The deauthentication attack is the main feature, which can be used to disconnect devices from their WiFi network.  
28 | Although this denial-of-service attack is nothing new, a lot of devices are still vulnerable to it. Luckily this is slowly changing with more WiFi 6 enabled devices being used. But a lot of outdated WiFi devices remain in place, for example in cheap IoT hardware.
29 | With an ESP8266 Deauther, you can easily test this attack on your 2.4GHz WiFi network/devices and see whether it's successful or not. And if it is, you know you should upgrade your network.
30 | 
31 | ## Disclaimer
32 | 
33 | This project is a proof of concept for testing and educational purposes.  
34 | Neither the ESP8266, nor its SDK was meant or built for such purposes. **Bugs can occur!**  
35 | 
36 | **Use it only against your own networks and devices!**  
37 | Please check the legal regulations in your country before using it.  
38 | We don't take any responsibility for what you do with this program.  


--------------------------------------------------------------------------------
/Reset_Sketch/README.md:
--------------------------------------------------------------------------------
 1 | # RESET
 2 | 
 3 | ## Method 1
 4 | 
 5 | Open the Reset_Sketch.ino and upload with the correct settings.  
 6 | 
 7 | ## Method 2
 8 | 
 9 | Flash one of the `reset_` files.  
10 | 
11 | ## Method 3
12 | 
13 | Flash the `blank_1MB.bin` to 0x000000 for 1MB modules.  
14 | Flash it to 0x000000, 0x100000, 0x200000 and 0x300000 for 4MB modules.  


--------------------------------------------------------------------------------
/Reset_Sketch/Reset_Sketch.ino:
--------------------------------------------------------------------------------
 1 | #include <EEPROM.h>
 2 | #include <LittleFS.h>
 3 | 
 4 | /*
 5 |   Upload this sketch to your ESP8266 to erase 
 6 |   - all files in the SPIFFS, 
 7 |   - all data in the EEPROM
 8 |   - WiFi credentials (SSID, password)
 9 | 
10 |   Also overwrites the previous program with this one (obviously).
11 | */
12 | 
13 | void setup() {
14 |   Serial.begin(115200);
15 | 
16 |   Serial.println();
17 |   Serial.println("STARTING...");
18 |   
19 |   EEPROM.begin(4096);
20 |   Serial.println("EEPROM initialized");
21 |   
22 |   for (int i = 0; i < 4096; ++i){
23 |     EEPROM.write(i,0x00);
24 |   }
25 | 
26 |   Serial.println("EEPROM cleaned");
27 | 
28 |   LittleFS.begin();
29 |   Serial.println("SPIFFS initialized");
30 | 
31 |   LittleFS.format();
32 |   Serial.println("SPIFFS cleaned");
33 |   
34 |   ESP.eraseConfig();
35 | 
36 |   Serial.println("WiFi credentials erased");
37 | 
38 |   Serial.println("DONE!");
39 | 
40 |   delay(10000);
41 |   
42 |   ESP.reset();
43 | }
44 | 
45 | void loop() {
46 |   
47 | }
48 | 


--------------------------------------------------------------------------------
/Reset_Sketch/blank_1MB.bin:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/Reset_Sketch/blank_1MB.bin


--------------------------------------------------------------------------------
/Reset_Sketch/reset_16mb.bin:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/Reset_Sketch/reset_16mb.bin


--------------------------------------------------------------------------------
/Reset_Sketch/reset_1mb.bin:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/Reset_Sketch/reset_1mb.bin


--------------------------------------------------------------------------------
/Reset_Sketch/reset_4mb.bin:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/Reset_Sketch/reset_4mb.bin


--------------------------------------------------------------------------------
/Reset_Sketch/reset_512kb.bin:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/Reset_Sketch/reset_512kb.bin


--------------------------------------------------------------------------------
/arduino-cli.yaml:
--------------------------------------------------------------------------------
1 | # arduino-cli.yaml
2 | board_manager:
3 |   additional_urls:
4 |     - https://raw.githubusercontent.com/SpacehuhnTech/arduino/main/package_spacehuhn_index.json
5 | 


--------------------------------------------------------------------------------
/esp8266_deauther/Accesspoints.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include "Arduino.h"
 6 | #include <ESP8266WiFi.h>
 7 | extern "C" {
 8 |   #include "user_interface.h"
 9 | }
10 | #include "language.h"
11 | #include "SimpleList.h"
12 | #include "Names.h"
13 | 
14 | extern Names names;
15 | 
16 | extern String searchVendor(uint8_t* mac);
17 | extern String leftRight(String a, String b, int len);
18 | extern String fixUtf8(String str);
19 | extern String bytesToStr(const uint8_t* b, uint32_t size);
20 | 
21 | struct AP {
22 |     uint8_t id;
23 |     bool    selected;
24 | };
25 | 
26 | class Accesspoints {
27 |     public:
28 |         Accesspoints();
29 | 
30 |         void sort();
31 |         void sortAfterChannel();
32 | 
33 |         void add(uint8_t id, bool selected);
34 | 
35 |         void print(int num);
36 |         void print(int num, bool header, bool footer);
37 | 
38 |         void select(int num);
39 |         void deselect(int num);
40 |         void remove(int num);
41 |         void select(String ssid);
42 |         void deselect(String ssid);
43 |         void remove(String ssid);
44 | 
45 |         void printAll();
46 |         void printSelected();
47 |         void selectAll();
48 |         void deselectAll();
49 |         void removeAll();
50 | 
51 |         String getSSID(int num);
52 |         String getNameStr(int num);
53 |         String getEncStr(int num);
54 |         String getMacStr(int num);
55 |         String getVendorStr(int num);
56 |         String getSelectedStr(int num);
57 |         uint8_t getCh(int num);
58 |         uint8_t getEnc(int num);
59 |         uint8_t getID(int num);
60 |         int getRSSI(int num);
61 |         uint8_t* getMac(int num);
62 |         bool getHidden(int num);
63 |         bool getSelected(int num);
64 | 
65 |         int find(uint8_t id);
66 | 
67 |         int count();
68 |         int selected();
69 | 
70 |         bool check(int num);
71 |         bool changed = false;
72 | 
73 |     private:
74 |         SimpleList<AP>* list;
75 | 
76 |         bool internal_check(int num);
77 |         void internal_select(int num);
78 |         void internal_deselect(int num);
79 |         void internal_remove(int num);
80 | };


--------------------------------------------------------------------------------
/esp8266_deauther/CLI.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include "Arduino.h"
 6 | #include <ESP8266WiFi.h>
 7 | extern "C" {
 8 |   #include "user_interface.h"
 9 | }
10 | #include "language.h"
11 | #include "A_config.h"
12 | #include "SimpleList.h"
13 | #include "Names.h"
14 | #include "SSIDs.h"
15 | #include "Scan.h"
16 | #include "Attack.h"
17 | #include "DisplayUI.h"
18 | #include "led.h"
19 | 
20 | extern Names names;
21 | extern SSIDs ssids;
22 | extern Accesspoints accesspoints;
23 | extern Stations     stations;
24 | extern Scan   scan;
25 | extern Attack attack;
26 | extern DisplayUI displayUI;
27 | extern uint32_t  currentTime;
28 | extern uint32_t  autosaveTime;
29 | 
30 | extern String macToStr(const uint8_t* mac);
31 | extern bool strToMac(String macStr, uint8_t* mac);
32 | extern bool strToIP(String ipStr, uint8_t* ip);
33 | extern void strToColor(String str, uint8_t* buf);
34 | extern void readFileToSerial(String path, bool showLineNum);
35 | extern bool readFile(String path, String& buf);
36 | extern bool removeFile(String path);
37 | extern bool copyFile(String pathFrom, String pathTo);
38 | extern bool renameFile(String pathFrom, String pathTo);
39 | extern bool appendFile(String path, String& buf);
40 | extern bool removeLines(String path, int lineFrom, int lineTo);
41 | extern bool replaceLine(String path, int line, String& buf);
42 | extern bool equalsKeyword(const char* str, const char* keyword);
43 | 
44 | class CLI {
45 |     public:
46 |         CLI();
47 |         ~CLI();
48 | 
49 |         void load();
50 |         void load(String filepath);
51 | 
52 |         void enable();
53 |         void disable();
54 | 
55 |         void update();
56 |         void stop();
57 | 
58 |         void enableDelay(uint32_t delayTime);
59 | 
60 |         void exec(String input);
61 |         void execFile(String path);
62 |         void runLine(String input);
63 |         void runCommand(String input);
64 | 
65 |     private:
66 |         bool enabled = false;
67 | 
68 |         SimpleList<String>* list;
69 |         SimpleList<String>* queue;
70 | 
71 |         bool delayed            = false;
72 |         uint32_t delayTime      = 0;
73 |         uint32_t delayStartTime = 0;
74 | 
75 |         String execPath = "/autostart.txt";
76 | 
77 |         struct Keyword {
78 |             const char* name;
79 |             const char* shortName;
80 |             const char* alt;
81 |         };
82 | 
83 |         void error(String message);
84 |         void parameterError(String parameter);
85 |         bool isInt(String str);
86 |         int toInt(String str);
87 |         uint32_t getTime(String time);
88 |         bool eqlsCMD(int i, const char* keyword);
89 | };


--------------------------------------------------------------------------------
/esp8266_deauther/EEPROMHelper.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | // ========== Includes ========== //
 6 | #include <EEPROM.h>
 7 | 
 8 | // ========== Boot Counter Structure ========== //
 9 | 
10 | // Used for memory verificaiton
11 | #define BOOT_MAGIC_NUM 1234567890
12 | 
13 | typedef struct boot {
14 |     unsigned int magic_num : 32;
15 |     unsigned int boot_num  : 8;
16 | } boot;
17 | 
18 | // ========== EEPROM Helper Class ========== //
19 | class EEPROMHelper {
20 |     public:
21 |         static void begin(const int eepromSize) {
22 |             EEPROM.begin(eepromSize);
23 |         }
24 | 
25 |         static void end() {
26 |             EEPROM.end();
27 |         }
28 | 
29 |         template<typename T>
30 |         static void saveObject(const int address, const T& t) {
31 |             EEPROM.put(address, t);
32 | 
33 |             EEPROM.commit();
34 |         }
35 | 
36 |         template<typename T>
37 |         static void getObject(const int address, const T& t) {
38 |             EEPROM.get(address, t);
39 |         }
40 | 
41 |         static bool checkBootNum(const int address) {
42 |             boot b;
43 | 
44 |             EEPROM.get(address, b);
45 | 
46 |             if ((b.magic_num == BOOT_MAGIC_NUM) && (b.boot_num < 3)) {
47 |                 saveObject(address, boot{ BOOT_MAGIC_NUM, ++b.boot_num });
48 |                 return true;
49 |             }
50 | 
51 |             return false;
52 |         }
53 | 
54 |         static void resetBootNum(const int address) {
55 |             saveObject(address, boot{ BOOT_MAGIC_NUM, 1 });
56 |         }
57 | 
58 |         static void format(unsigned long size) {
59 |             for (unsigned long i = 0; i<size; i++) EEPROM.write(i, 0x00);
60 |             EEPROM.commit();
61 |         }
62 | };


--------------------------------------------------------------------------------
/esp8266_deauther/Names.h:
--------------------------------------------------------------------------------
  1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
  2 | 
  3 | #pragma once
  4 | 
  5 | #include <ESP8266WiFi.h>
  6 | extern "C" {
  7 |   #include "user_interface.h"
  8 | }
  9 | #include "src/ArduinoJson-v5.13.5/ArduinoJson.h"
 10 | #include "language.h"
 11 | #include "SimpleList.h"
 12 | 
 13 | #define NAME_LIST_SIZE 25
 14 | #define NAME_MAX_LENGTH 17
 15 | 
 16 | extern void checkFile(String path, String data);
 17 | extern JsonVariant parseJSONFile(String path, DynamicJsonBuffer& jsonBuffer);
 18 | extern bool writeFile(String path, String& buf);
 19 | extern bool appendFile(String path, String& buf);
 20 | extern bool strToMac(String macStr, uint8_t* mac);
 21 | extern String searchVendor(uint8_t* mac);
 22 | extern String fixUtf8(String str);
 23 | extern String leftRight(String a, String b, int len);
 24 | extern String escape(String str);
 25 | extern String bytesToStr(const uint8_t* b, uint32_t size);
 26 | 
 27 | class Names {
 28 |     public:
 29 |         Names();
 30 | 
 31 |         void load();
 32 |         void load(String filepath);
 33 |         void save(bool force);
 34 |         void save(bool force, String filepath);
 35 |         void sort();
 36 | 
 37 |         String find(uint8_t* mac);
 38 |         int findID(uint8_t* mac);
 39 | 
 40 |         void print(int num);
 41 |         void print(int num, bool header, bool footer);
 42 |         void select(int num);
 43 |         void select(String name);
 44 |         void deselect(int num);
 45 |         void deselect(String name);
 46 |         void add(uint8_t* mac, String name, uint8_t* bssid, uint8_t ch, bool selected, bool force);
 47 |         void add(String macStr, String name, String bssidStr, uint8_t ch, bool selected, bool force);
 48 |         void replace(int num, String macStr, String name, String bssidStr, uint8_t ch, bool selected);
 49 |         void remove(int num);
 50 | 
 51 |         void printAll();
 52 |         void printSelected();
 53 |         void selectAll();
 54 |         void deselectAll();
 55 |         void removeAll();
 56 | 
 57 |         uint8_t* getMac(int num);
 58 |         uint8_t* getBssid(int num);
 59 |         String getMacStr(int num);
 60 |         String getBssidStr(int num);
 61 |         String getName(int num);
 62 |         String getVendorStr(int num);
 63 |         String getSelectedStr(int num);
 64 |         uint8_t getCh(int num);
 65 |         bool getSelected(int num);
 66 |         bool isStation(int num);
 67 | 
 68 |         void setName(int num, String name);
 69 |         void setMac(int num, String macStr);
 70 |         void setCh(int num, uint8_t ch);
 71 |         void setBSSID(int num, String bssidStr);
 72 | 
 73 |         int count();
 74 |         int selected();
 75 |         int stations();
 76 | 
 77 |         bool check(int num);
 78 | 
 79 |     private:
 80 |         String FILE_PATH = "/names.json";
 81 |         bool changed     = false;
 82 | 
 83 |         struct Device {
 84 |             uint8_t* mac;      // mac address
 85 |             char   * name;     // name of saved device
 86 |             uint8_t* apBssid;  // mac address of AP (if saved device is a station)
 87 |             uint8_t  ch;       // Wi-Fi channel of Device
 88 |             bool     selected; // select for attacking
 89 |         };
 90 | 
 91 |         SimpleList<Device>* list;
 92 | 
 93 |         int binSearch(uint8_t* searchBytes, int lowerEnd, int upperEnd);
 94 |         bool internal_check(int num);
 95 |         void internal_select(int num);
 96 |         void internal_deselect(int num);
 97 |         void internal_add(uint8_t* mac, String name, uint8_t* bssid, uint8_t ch, bool selected);
 98 |         void internal_add(String macStr, String name, String bssidStr, uint8_t ch, bool selected);
 99 |         void internal_remove(int num);
100 |         void internal_removeAll();
101 | };


--------------------------------------------------------------------------------
/esp8266_deauther/SSIDs.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include "Arduino.h"
 6 | #include <ESP8266WiFi.h>
 7 | extern "C" {
 8 |   #include "user_interface.h"
 9 | }
10 | #include "src/ArduinoJson-v5.13.5/ArduinoJson.h"
11 | #include "language.h"
12 | #include "SimpleList.h"
13 | #include "Accesspoints.h"
14 | 
15 | #define SSID_LIST_SIZE 60
16 | 
17 | 
18 | extern uint32_t currentTime;
19 | extern Accesspoints accesspoints;
20 | 
21 | extern void checkFile(String path, String data);
22 | extern JsonVariant parseJSONFile(String path, DynamicJsonBuffer& jsonBuffer);
23 | extern bool appendFile(String path, String& buf);
24 | extern bool writeFile(String path, String& buf);
25 | extern void readFileToSerial(String path);
26 | extern String fixUtf8(String str);
27 | extern String leftRight(String a, String b, int len);
28 | extern String escape(String str);
29 | 
30 | class SSIDs {
31 |     public:
32 |         SSIDs();
33 | 
34 |         void load();
35 |         void load(String filepath);
36 |         void save(bool force);
37 |         void save(bool force, String filepath);
38 |         void update();
39 | 
40 |         void print(int num);
41 |         void print(int num, bool header, bool footer);
42 |         void add(String name, bool wpa2, int clones, bool force);
43 |         void cloneSelected(bool force);
44 |         void remove(int num);
45 |         void enableRandom(uint32_t randomInterval);
46 |         void disableRandom();
47 |         bool getRandom();
48 | 
49 |         String getName(int num);
50 |         bool getWPA2(int num);
51 |         String getEncStr(int num);
52 |         int getLen(int num);
53 | 
54 |         void setWPA2(int num, bool wpa2);
55 |         void replace(int num, String name, bool wpa2);
56 | 
57 |         void printAll();
58 |         void removeAll();
59 | 
60 |         int count();
61 | 
62 |     private:
63 |         bool changed            = false;
64 |         bool randomMode         = false;
65 |         uint32_t randomInterval = 2000;
66 |         uint32_t randomTime     = 0;
67 | 
68 |         struct SSID {
69 |             String  name; // SSID
70 |             bool    wpa2; // WPA2 encrypted or not
71 |             uint8_t len;  // original length (before editing it to be 32 characters)
72 |         };
73 | 
74 |         String FILE_PATH = "/ssids.json";
75 | 
76 |         SimpleList<SSID>* list;
77 | 
78 |         bool check(int num);
79 |         String randomize(String name);
80 | 
81 |         void internal_add(String name, bool wpa2, int add);
82 |         void internal_remove(int num);
83 |         void internal_removeAll();
84 | };


--------------------------------------------------------------------------------
/esp8266_deauther/Scan.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include "Arduino.h"
 6 | #include "Accesspoints.h"
 7 | #include "Stations.h"
 8 | #include "Names.h"
 9 | #include "SSIDs.h"
10 | #include "language.h"
11 | #include "SimpleList.h"
12 | 
13 | #define SCAN_MODE_OFF 0
14 | #define SCAN_MODE_APS 1
15 | #define SCAN_MODE_STATIONS 2
16 | #define SCAN_MODE_ALL 3
17 | #define SCAN_MODE_SNIFFER 4
18 | #define SCAN_DEFAULT_TIME 15000
19 | #define SCAN_DEFAULT_CONTINUE_TIME 10000
20 | #define SCAN_PACKET_LIST_SIZE 64
21 | 
22 | extern Accesspoints accesspoints;
23 | extern Stations     stations;
24 | extern Names names;
25 | extern SSIDs ssids;
26 | 
27 | extern uint8_t wifiMode;
28 | 
29 | extern void setWifiChannel(uint8_t ch, bool force);
30 | extern bool appendFile(String path, String& buf);
31 | extern bool writeFile(String path, String& buf);
32 | extern void readFileToSerial(const String path);
33 | extern String escape(String str);
34 | 
35 | class Scan {
36 |     public:
37 |         Scan();
38 | 
39 |         void sniffer(uint8_t* buf, uint16_t len);
40 |         void start(uint8_t mode, uint32_t time, uint8_t nextmode, uint32_t continueTime, bool channelHop, uint8_t channel);
41 |         void start(uint8_t mode);
42 | 
43 |         void setup();
44 |         void update();
45 |         void stop();
46 |         void save(bool force);
47 |         void save(bool force, String filePath);
48 | 
49 |         void selectAll();
50 |         void deselectAll();
51 |         void printAll();
52 |         void printSelected();
53 | 
54 |         uint8_t getPercentage();
55 |         uint32_t getPackets(int i);
56 |         uint32_t countAll();
57 |         uint32_t countSelected();
58 |         bool isScanning();
59 |         bool isSniffing();
60 | 
61 |         void nextChannel();
62 |         void setChannel(uint8_t newChannel);
63 | 
64 |         String getMode();
65 |         double getScaleFactor(uint8_t height);
66 |         uint32_t getMaxPacket();
67 |         uint32_t getPacketRate();
68 | 
69 |         uint16_t deauths = 0;
70 |         uint16_t packets = 0;
71 | 
72 |     private:
73 |         SimpleList<uint16_t>* list;                      // packet list
74 | 
75 |         uint32_t sniffTime          = SCAN_DEFAULT_TIME; // how long the scan runs
76 |         uint32_t snifferStartTime   = 0;                 // when the scan started
77 |         uint32_t snifferOutputTime  = 0;                 // last info output (every 3s)
78 |         uint32_t snifferChannelTime = 0;                 // last time the channel was changed
79 |         uint32_t snifferPacketTime  = 0;                 // last time the packet rate was reseted (every 1s)
80 | 
81 |         uint8_t scanMode = 0;
82 | 
83 |         uint8_t scan_continue_mode = 0;                          // restart mode after scan stopped
84 |         uint32_t continueTime      = SCAN_DEFAULT_CONTINUE_TIME; // time in ms to wait until scan restarts
85 |         uint32_t continueStartTime = 0;                          // when scan restarted
86 | 
87 |         bool channelHop     = true;
88 |         uint16_t tmpDeauths = 0;
89 | 
90 |         bool apWithChannel(uint8_t ch);
91 |         int findAccesspoint(uint8_t* mac);
92 | 
93 |         String FILE_PATH = "/scan.json";
94 | };


--------------------------------------------------------------------------------
/esp8266_deauther/Stations.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include "Arduino.h"
 6 | extern "C" {
 7 |   #include "user_interface.h"
 8 | }
 9 | #include "language.h"
10 | #include "SimpleList.h"
11 | #include "Accesspoints.h"
12 | #include "Names.h"
13 | 
14 | #define STATION_LIST_SIZE 60
15 | extern Accesspoints accesspoints;
16 | extern Names    names;
17 | extern uint8_t  wifi_channel;
18 | extern uint32_t currentTime;
19 | 
20 | extern String searchVendor(uint8_t* mac);
21 | extern bool macMulticast(uint8_t* mac);
22 | extern bool macValid(uint8_t* mac);
23 | extern bool macBroadcast(uint8_t* mac);
24 | extern String bytesToStr(const uint8_t* b, uint32_t size);
25 | 
26 | class Stations {
27 |     public:
28 |         Stations();
29 | 
30 |         void sort();
31 |         void sortAfterChannel();
32 | 
33 |         void select(int num);
34 |         void deselect(int num);
35 |         void remove(int num);
36 | 
37 |         void select(String ssid);
38 |         void deselect(String ssid);
39 |         void remove(String ssid);
40 | 
41 |         void add(uint8_t* mac, int accesspointNum);
42 | 
43 |         void selectAll();
44 |         void deselectAll();
45 |         void removeAll();
46 |         void removeOldest();
47 | 
48 |         String getNameStr(int num);
49 |         String getAPStr(int num);
50 |         String getMacStr(int num);
51 |         String getMacVendorStr(int num);
52 |         String getVendorStr(int num);
53 |         String getTimeStr(int num);
54 |         String getSelectedStr(int num);
55 |         uint8_t* getAPMac(int num);
56 |         String getAPMacStr(int num);
57 |         uint8_t* getMac(int num);
58 |         uint32_t* getPkts(int num);
59 |         uint32_t* getTime(int num);
60 |         uint8_t getCh(int num);
61 |         int getAP(int num);
62 |         bool getSelected(int num);
63 |         bool hasName(int num);
64 | 
65 |         void print(int num);
66 |         void print(int num, bool header, bool footer);
67 |         void printAll();
68 |         void printSelected();
69 | 
70 |         int count();
71 |         int selected();
72 | 
73 |         bool check(int num);
74 |         bool changed = false;
75 | 
76 |     private:
77 |         struct Station {
78 |             uint8_t   ap;
79 |             uint8_t   ch;
80 |             uint8_t * mac;
81 |             uint32_t* pkts;
82 |             uint32_t* time;
83 |             bool      selected;
84 |         };
85 | 
86 |         SimpleList<Station>* list;
87 | 
88 |         int findStation(uint8_t* mac);
89 |         int findAccesspoint(uint8_t* mac);
90 | 
91 |         bool internal_check(int num);
92 |         void internal_select(int num);
93 |         void internal_deselect(int num);
94 |         void internal_add(uint8_t* mac, int accesspointNum);
95 |         void internal_remove(int num);
96 |         void internal_removeAll();
97 | };


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/LICENSE.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/LICENSE.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/attack.html.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/attack.html.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/index.html.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/index.html.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/info.html.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/info.html.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/js/attack.js.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/js/attack.js.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/js/scan.js.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/js/scan.js.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/js/settings.js.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/js/settings.js.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/js/site.js.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/js/site.js.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/js/ssids.js.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/js/ssids.js.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/cn.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/cn.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/cs.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/cs.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/da.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/da.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/de.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/de.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/en.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/en.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/es.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/es.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/fi.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/fi.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/fr.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/fr.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/hu.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/hu.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/in.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/in.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/it.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/it.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/ja.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/ja.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/ko.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/ko.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/nl.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/nl.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/pl.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/pl.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/pt-br.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/pt-br.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/ptbr.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/ptbr.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/ro.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/ro.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/ru.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/ru.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/th.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/th.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/tlh.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/tlh.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/lang/uk.lang.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/lang/uk.lang.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/scan.html.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/scan.html.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/settings.html.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/settings.html.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/ssids.html.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/ssids.html.gz


--------------------------------------------------------------------------------
/esp8266_deauther/data/web/style.css.gz:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/spacehuhntech/esp8266_deauther/b98f1598115b9400d320f7ffdf08fbc78f01607f/esp8266_deauther/data/web/style.css.gz


--------------------------------------------------------------------------------
/esp8266_deauther/debug.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include "config.h"
 6 | 
 7 | #include <climits>   // LONG_MAX
 8 | #include <Arduino.h> // Serial
 9 | 
10 | #ifdef ENABLE_DEBUG
11 | 
12 | #define debug_init()\
13 |     DEBUG_PORT.begin(DEBUG_BAUD);\
14 |     DEBUG_PORT.setTimeout(LONG_MAX);\
15 |     DEBUG_PORT.println();
16 | 
17 | #define debug(...) DEBUG_PORT.print(__VA_ARGS__)
18 | #define debugln(...) DEBUG_PORT.println(__VA_ARGS__)
19 | #define debugf(...) DEBUG_PORT.printf(__VA_ARGS__)
20 | #define debugF(...) DEBUG_PORT.print(F(__VA_ARGS__))
21 | #define debuglnF(...) DEBUG_PORT.println(F(__VA_ARGS__))
22 | 
23 | #define debug_available() DEBUG_PORT.available()
24 | #define debug_read() DEBUG_PORT.read()
25 | #define debug_peek() DEBUG_PORT.peek()
26 | 
27 | #else /* ifdef ENABLE_DEBUG */
28 | 
29 | #define debug_init() 0
30 | 
31 | #define debug(...) 0
32 | #define debugln(...) 0
33 | #define debugf(...) 0
34 | #define debugF(...) 0
35 | #define debuglnF(...) 0
36 | 
37 | #define debug_available() 0
38 | #define debug_read() 0
39 | #define debug_peek() 0
40 | 
41 | #endif /* ifdef ENABLE_DEBUG */


--------------------------------------------------------------------------------
/esp8266_deauther/esp8266_deauther.ino:
--------------------------------------------------------------------------------
  1 | /* =====================
  2 |    This software is licensed under the MIT License:
  3 |    https://github.com/spacehuhntech/esp8266_deauther
  4 |    ===================== */
  5 | 
  6 | extern "C" {
  7 |     // Please follow this tutorial:
  8 |     // https://github.com/spacehuhn/esp8266_deauther/wiki/Installation#compiling-using-arduino-ide
  9 |     // And be sure to have the right board selected
 10 |   #include "user_interface.h"
 11 | }
 12 | 
 13 | #include "EEPROMHelper.h"
 14 | 
 15 | #include "src/ArduinoJson-v5.13.5/ArduinoJson.h"
 16 | #if ARDUINOJSON_VERSION_MAJOR != 5
 17 | // The software was build using ArduinoJson v5.x
 18 | // version 6 is still in beta at the time of writing
 19 | // go to tools -> manage libraries, search for ArduinoJSON and install version 5
 20 | #error Please upgrade/downgrade ArduinoJSON library to version 5!
 21 | #endif // if ARDUINOJSON_VERSION_MAJOR != 5
 22 | 
 23 | #include "oui.h"
 24 | #include "language.h"
 25 | #include "functions.h"
 26 | #include "settings.h"
 27 | #include "Names.h"
 28 | #include "SSIDs.h"
 29 | #include "Scan.h"
 30 | #include "Attack.h"
 31 | #include "CLI.h"
 32 | #include "DisplayUI.h"
 33 | #include "A_config.h"
 34 | 
 35 | #include "led.h"
 36 | 
 37 | // Run-Time Variables //
 38 | Names names;
 39 | SSIDs ssids;
 40 | Accesspoints accesspoints;
 41 | Stations     stations;
 42 | Scan   scan;
 43 | Attack attack;
 44 | CLI    cli;
 45 | DisplayUI displayUI;
 46 | 
 47 | simplebutton::Button* resetButton;
 48 | 
 49 | #include "wifi.h"
 50 | 
 51 | uint32_t autosaveTime = 0;
 52 | uint32_t currentTime  = 0;
 53 | 
 54 | bool booted = false;
 55 | 
 56 | void setup() {
 57 |     // for random generator
 58 |     randomSeed(os_random());
 59 | 
 60 |     // start serial
 61 |     Serial.begin(115200);
 62 |     Serial.println();
 63 | 
 64 |     // start SPIFFS
 65 |     prnt(SETUP_MOUNT_SPIFFS);
 66 |     // bool spiffsError = !LittleFS.begin();
 67 |     LittleFS.begin();
 68 |     prntln(/*spiffsError ? SETUP_ERROR : */ SETUP_OK);
 69 | 
 70 |     // Start EEPROM
 71 |     EEPROMHelper::begin(EEPROM_SIZE);
 72 | 
 73 | #ifdef FORMAT_SPIFFS
 74 |     prnt(SETUP_FORMAT_SPIFFS);
 75 |     LittleFS.format();
 76 |     prntln(SETUP_OK);
 77 | #endif // ifdef FORMAT_SPIFFS
 78 | 
 79 | #ifdef FORMAT_EEPROM
 80 |     prnt(SETUP_FORMAT_EEPROM);
 81 |     EEPROMHelper::format(EEPROM_SIZE);
 82 |     prntln(SETUP_OK);
 83 | #endif // ifdef FORMAT_EEPROM
 84 | 
 85 |     // Format SPIFFS when in boot-loop
 86 |     if (/*spiffsError || */ !EEPROMHelper::checkBootNum(BOOT_COUNTER_ADDR)) {
 87 |         prnt(SETUP_FORMAT_SPIFFS);
 88 |         LittleFS.format();
 89 |         prntln(SETUP_OK);
 90 | 
 91 |         prnt(SETUP_FORMAT_EEPROM);
 92 |         EEPROMHelper::format(EEPROM_SIZE);
 93 |         prntln(SETUP_OK);
 94 | 
 95 |         EEPROMHelper::resetBootNum(BOOT_COUNTER_ADDR);
 96 |     }
 97 | 
 98 |     // get time
 99 |     currentTime = millis();
100 | 
101 |     // load settings
102 |     #ifndef RESET_SETTINGS
103 |     settings::load();
104 |     #else // ifndef RESET_SETTINGS
105 |     settings::reset();
106 |     settings::save();
107 |     #endif // ifndef RESET_SETTINGS
108 | 
109 |     wifi::begin();
110 |     wifi_set_promiscuous_rx_cb([](uint8_t* buf, uint16_t len) {
111 |         scan.sniffer(buf, len);
112 |     });
113 | 
114 |     // start display
115 |     if (settings::getDisplaySettings().enabled) {
116 |         displayUI.setup();
117 |         displayUI.mode = DISPLAY_MODE::INTRO;
118 |     }
119 | 
120 |     // load everything else
121 |     names.load();
122 |     ssids.load();
123 |     cli.load();
124 | 
125 |     // create scan.json
126 |     scan.setup();
127 | 
128 |     // dis/enable serial command interface
129 |     if (settings::getCLISettings().enabled) {
130 |         cli.enable();
131 |     } else {
132 |         prntln(SETUP_SERIAL_WARNING);
133 |         Serial.flush();
134 |         Serial.end();
135 |     }
136 | 
137 |     // start access point/web interface
138 |     if (settings::getWebSettings().enabled) wifi::startAP();
139 | 
140 |     // STARTED
141 |     prntln(SETUP_STARTED);
142 | 
143 |     // version
144 |     prntln(DEAUTHER_VERSION);
145 | 
146 |     // setup LED
147 |     led::setup();
148 | 
149 |     // setup reset button
150 |     resetButton = new ButtonPullup(RESET_BUTTON);
151 | }
152 | 
153 | void loop() {
154 |     currentTime = millis();
155 | 
156 |     led::update();   // update LED color
157 |     wifi::update();  // manage access point
158 |     attack.update(); // run attacks
159 |     displayUI.update();
160 |     cli.update();    // read and run serial input
161 |     scan.update();   // run scan
162 |     ssids.update();  // run random mode, if enabled
163 | 
164 |     // auto-save
165 |     if (settings::getAutosaveSettings().enabled
166 |         && (currentTime - autosaveTime > settings::getAutosaveSettings().time)) {
167 |         autosaveTime = currentTime;
168 |         names.save(false);
169 |         ssids.save(false);
170 |         settings::save(false);
171 |     }
172 | 
173 |     if (!booted) {
174 |         booted = true;
175 |         EEPROMHelper::resetBootNum(BOOT_COUNTER_ADDR);
176 | #ifdef HIGHLIGHT_LED
177 |         displayUI.setupLED();
178 | #endif // ifdef HIGHLIGHT_LED
179 |     }
180 | 
181 |     resetButton->update();
182 |     if (resetButton->holding(5000)) {
183 |         led::setMode(LED_MODE::SCAN);
184 |         DISPLAY_MODE _mode = displayUI.mode;
185 |         displayUI.mode = DISPLAY_MODE::RESETTING;
186 |         displayUI.update(true);
187 | 
188 |         settings::reset();
189 |         settings::save(true);
190 | 
191 |         delay(2000);
192 | 
193 |         led::setMode(LED_MODE::IDLE);
194 |         displayUI.mode = _mode;
195 |     }
196 | }
197 | 


--------------------------------------------------------------------------------
/esp8266_deauther/led.cpp:
--------------------------------------------------------------------------------
  1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
  2 | 
  3 | #include "led.h"
  4 | 
  5 | #include "A_config.h" // Config for LEDs
  6 | #include <Arduino.h>  // digitalWrite, analogWrite, pinMode
  7 | #include "language.h" // Strings used in printColor and tempDisable
  8 | #include "settings.h" // used in update()
  9 | #include "Attack.h"   // used in update()
 10 | #include "Scan.h"     // used in update()
 11 | 
 12 | // Inlcude libraries for Neopixel or LED_MY92xx if used
 13 | #if defined(LED_NEOPIXEL)
 14 | #include "src/Adafruit_NeoPixel-1.7.0/Adafruit_NeoPixel.h"
 15 | #elif defined(LED_MY92)
 16 | #include "src/my92xx-3.0.3/my92xx.h"
 17 | #elif defined(LED_DOTSTAR)
 18 | #include "src/Adafruit_DotStar-1.1.4/Adafruit_DotStar.h"
 19 | #endif // if defined(LED_NEOPIXEL)
 20 | 
 21 | extern Attack attack;
 22 | extern Scan   scan;
 23 | 
 24 | namespace led {
 25 |     // ===== PRIVATE ===== //
 26 |     LED_MODE mode = OFF;
 27 | 
 28 | #if defined(LED_NEOPIXEL_RGB)
 29 |     Adafruit_NeoPixel strip { LED_NUM, LED_NEOPIXEL_PIN, NEO_RGB + NEO_KHZ800 };
 30 | #elif defined(LED_NEOPIXEL_GRB)
 31 |     Adafruit_NeoPixel strip { LED_NUM, LED_NEOPIXEL_PIN, NEO_GRB + NEO_KHZ800 };
 32 | #elif defined(LED_MY92)
 33 |     my92xx myled { LED_MY92_MODEL, LED_NUM, LED_MY92_DATA, LED_MY92_CLK, MY92XX_COMMAND_DEFAULT };
 34 | #elif defined(LED_DOTSTAR)
 35 |     Adafruit_DotStar strip { LED_NUM, LED_DOTSTAR_DATA, LED_DOTSTAR_CLK, DOTSTAR_BGR };
 36 | #endif // if defined(LED_NEOPIXEL_RGB)
 37 | 
 38 | 
 39 |     void setColor(uint8_t r, uint8_t g, uint8_t b) {
 40 | #if defined(LED_DIGITAL)
 41 |         if (LED_ANODE) {
 42 |             if (LED_PIN_R < 255) digitalWrite(LED_PIN_R, r > 0);
 43 |             if (LED_PIN_G < 255) digitalWrite(LED_PIN_G, g > 0);
 44 |             if (LED_PIN_B < 255) digitalWrite(LED_PIN_B, b > 0);
 45 |         } else {
 46 |             if (LED_PIN_R < 255) digitalWrite(LED_PIN_R, r == 0);
 47 |             if (LED_PIN_G < 255) digitalWrite(LED_PIN_G, g == 0);
 48 |             if (LED_PIN_B < 255) digitalWrite(LED_PIN_B, b == 0);
 49 |         }
 50 | #elif defined(LED_RGB)
 51 |         if (r > 0) r = r * LED_MODE_BRIGHTNESS / 100;
 52 |         if (g > 0) g = g * LED_MODE_BRIGHTNESS / 100;
 53 |         if (b > 0) b = b * LED_MODE_BRIGHTNESS / 100;
 54 | 
 55 |         if (LED_ANODE) {
 56 |             r = 255 - r;
 57 |             g = 255 - g;
 58 |             b = 255 - b;
 59 |         }
 60 | 
 61 |         analogWrite(LED_PIN_R, r);
 62 |         analogWrite(LED_PIN_G, g);
 63 |         analogWrite(LED_PIN_B, b);
 64 | #elif defined(LED_NEOPIXEL) || defined(LED_DOTSTAR)
 65 | 
 66 |         for (size_t i = 0; i < strip.numPixels(); i++) {
 67 |             strip.setPixelColor(i, r, g, b);
 68 |         }
 69 | 
 70 |         strip.show();
 71 | #elif defined(LED_MY9291)
 72 |         myled.setChannel(LED_MY92_CH_R, r);
 73 |         myled.setChannel(LED_MY92_CH_G, g);
 74 |         myled.setChannel(LED_MY92_CH_B, b);
 75 |         myled.setChannel(LED_MY92_CH_BRIGHTNESS, LED_MODE_BRIGHTNESS);
 76 |         myled.setState(true);
 77 |         myled.update();
 78 | #endif // if defined(LED_DIGITAL)
 79 |     }
 80 | 
 81 |     // ===== PUBLIC ===== //
 82 |     void setup() {
 83 |         analogWriteRange(0xff);
 84 | 
 85 | #if defined(LED_DIGITAL) || defined(LED_RGB)
 86 |         if (LED_PIN_R < 255) pinMode(LED_PIN_R, OUTPUT);
 87 |         if (LED_PIN_G < 255) pinMode(LED_PIN_G, OUTPUT);
 88 |         if (LED_PIN_B < 255) pinMode(LED_PIN_B, OUTPUT);
 89 | #elif defined(LED_NEOPIXEL) || defined(LED_DOTSTAR)
 90 |         strip.begin();
 91 |         strip.setBrightness(LED_MODE_BRIGHTNESS);
 92 |         strip.show();
 93 | #elif defined(LED_MY9291)
 94 |         myled.setChannel(LED_MY92_CH_R, 0);
 95 |         myled.setChannel(LED_MY92_CH_G, 0);
 96 |         myled.setChannel(LED_MY92_CH_B, 0);
 97 |         myled.setChannel(LED_MY92_CH_BRIGHTNESS, LED_MODE_BRIGHTNESS);
 98 |         myled.setState(true);
 99 |         myled.update();
100 | #endif // if defined(LED_DIGITAL) || defined(LED_RGB)
101 |     }
102 | 
103 |     void update() {
104 |         if (!settings::getLEDSettings().enabled) {
105 |             setMode(OFF);
106 |         } else if (scan.isScanning() && (scan.deauths < settings::getSnifferSettings().min_deauth_frames)) {
107 |             setMode(SCAN);
108 |         } else if (attack.isRunning()) {
109 |             setMode(ATTACK);
110 |         } else {
111 |             setMode(IDLE);
112 |         }
113 |     }
114 | 
115 |     void setMode(LED_MODE new_mode, bool force) {
116 |         if ((new_mode != mode) || force) {
117 |             mode = new_mode;
118 | 
119 |             switch (mode) {
120 |                 case OFF:
121 |                     setColor(LED_MODE_OFF);
122 |                     break;
123 |                 case SCAN:
124 |                     setColor(LED_MODE_SCAN);
125 |                     break;
126 |                 case ATTACK:
127 |                     setColor(LED_MODE_ATTACK);
128 |                     break;
129 |                 case IDLE:
130 |                     setColor(LED_MODE_IDLE);
131 |                     break;
132 |             }
133 |         }
134 |     }
135 | }
136 | 


--------------------------------------------------------------------------------
/esp8266_deauther/led.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include <cstdint>
 6 | 
 7 | enum LED_MODE {
 8 |     OFF,
 9 |     SCAN,
10 |     ATTACK,
11 |     IDLE
12 | };
13 | 
14 | namespace led {
15 |     void setup();
16 |     void update();
17 |     void setMode(LED_MODE new_mode, bool force = false);
18 |     void setColor(uint8_t r, uint8_t g, uint8_t b);
19 | }


--------------------------------------------------------------------------------
/esp8266_deauther/settings.h:
--------------------------------------------------------------------------------
  1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
  2 | 
  3 | #pragma once
  4 | 
  5 | #include <Arduino.h> // Arduino String, Serial
  6 | #include "A_config.h"
  7 | 
  8 | // ===== VERSION ===== //
  9 | typedef struct version_t {
 10 |     uint8_t major;
 11 |     uint8_t minor;
 12 |     uint8_t revision;
 13 | } version_t;
 14 | 
 15 | // ===== AUTOSAVE ===== //
 16 | typedef struct autosave_settings_t {
 17 |     bool     enabled;
 18 |     uint32_t time;
 19 | } autosave_t;
 20 | 
 21 | // ===== ATTACK ===== //
 22 | typedef enum beacon_interval_t {
 23 |     INTERVAL_1S    = 0,
 24 |     INTERVAL_100MS = 1
 25 | } beacon_interval_t;
 26 | 
 27 | typedef struct attack_settings_t {
 28 |     // General
 29 |     bool     attack_all_ch;
 30 |     bool     random_tx;
 31 |     uint32_t timeout;
 32 | 
 33 |     // Deauth
 34 |     uint8_t deauths_per_target;
 35 |     uint8_t deauth_reason;
 36 | 
 37 |     // Beacon
 38 |     beacon_interval_t beacon_interval;
 39 | 
 40 |     // Probe
 41 |     uint8_t probe_frames_per_ssid;
 42 | } attack_settings_t;
 43 | 
 44 | // ====== WIFI ====== //
 45 | typedef struct wifi_settings_t {
 46 |     uint8_t channel;
 47 |     uint8_t mac_st[6];
 48 |     uint8_t mac_ap[6];
 49 | } wifi_settings_t;
 50 | 
 51 | // ===== SNIFFER ===== //
 52 | typedef struct sniffer_settings_t {
 53 |     uint16_t channel_time;
 54 |     uint16_t min_deauth_frames;
 55 | } sniffer_settings_t;
 56 | 
 57 | // ===== ACCESS POINT ===== //
 58 | typedef struct access_point_settings_t {
 59 |     char    ssid[33];
 60 |     char    password[65];
 61 |     bool    hidden;
 62 |     uint8_t ip[4];
 63 | } access_point_settings_t;
 64 | 
 65 | // ===== WEB INTERFACE ===== //
 66 | typedef struct web_settings_t {
 67 |     bool enabled;
 68 |     bool captive_portal;
 69 |     bool use_spiffs;
 70 |     char lang[3];
 71 | } web_settings_t;
 72 | 
 73 | // ===== CLI ===== //
 74 | typedef struct cli_settings_t {
 75 |     bool enabled;
 76 |     bool serial_echo;
 77 | } cli_settings_t;
 78 | 
 79 | // ===== LED ===== //
 80 | typedef struct led_settings_t {
 81 |     bool enabled;
 82 | } led_settings_t;
 83 | 
 84 | // ===== DISPLAY ===== //
 85 | typedef struct display_settings_t {
 86 |     bool     enabled;
 87 |     uint32_t timeout;
 88 | } display_settings_t;
 89 | 
 90 | // ===== SETTINGS ===== //
 91 | typedef struct settings_t {
 92 |     uint32_t                magic_num;
 93 |     version_t               version;
 94 |     autosave_settings_t     autosave;
 95 |     attack_settings_t       attack;
 96 |     wifi_settings_t         wifi;
 97 |     sniffer_settings_t      sniffer;
 98 |     access_point_settings_t ap;
 99 |     web_settings_t          web;
100 |     cli_settings_t          cli;
101 |     led_settings_t          led;
102 |     display_settings_t      display;
103 | } settings_t;
104 | 
105 | namespace settings {
106 |     void load();
107 |     void save(bool force = false);
108 | 
109 |     void reset();
110 |     void print();
111 | 
112 |     const settings_t& getAllSettings();
113 |     const version_t& getVersion();
114 |     const autosave_settings_t& getAutosaveSettings();
115 |     const attack_settings_t& getAttackSettings();
116 |     const wifi_settings_t& getWifiSettings();
117 |     const sniffer_settings_t& getSnifferSettings();
118 |     const access_point_settings_t& getAccessPointSettings();
119 |     const web_settings_t& getWebSettings();
120 |     const cli_settings_t& getCLISettings();
121 |     const led_settings_t& getLEDSettings();
122 |     const display_settings_t& getDisplaySettings();
123 | 
124 |     void setAllSettings(settings_t& settings);
125 |     void setAutosaveSettings(const autosave_settings_t& autosave);
126 |     void setAttackSettings(const attack_settings_t& attack);
127 |     void setWifiSettings(const wifi_settings_t& wifi);
128 |     void setSnifferSettings(const sniffer_settings_t& sniffer);
129 |     void setAccessPointSettings(const access_point_settings_t& ap);
130 |     void setWebSettings(const web_settings_t& web);
131 |     void setCLISettings(const cli_settings_t& cli);
132 |     void setLEDSettings(const led_settings_t& led);
133 |     void setDisplaySettings(const display_settings_t& display);
134 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/Adafruit_NeoPixel-1.7.0/esp8266.c:
--------------------------------------------------------------------------------
 1 | // This is a mash-up of the Due show() code + insights from Michael Miller's
 2 | // ESP8266 work for the NeoPixelBus library: github.com/Makuna/NeoPixelBus
 3 | // Needs to be a separate .c file to enforce ICACHE_RAM_ATTR execution.
 4 | 
 5 | #if defined(ESP8266)
 6 | 
 7 | #include <Arduino.h>
 8 | #ifdef ESP8266
 9 | #include <eagle_soc.h>
10 | #endif
11 | 
12 | static uint32_t _getCycleCount(void) __attribute__((always_inline));
13 | static inline uint32_t _getCycleCount(void) {
14 |   uint32_t ccount;
15 |   __asm__ __volatile__("rsr %0,ccount":"=a" (ccount));
16 |   return ccount;
17 | }
18 | 
19 | #ifdef ESP8266
20 | void ICACHE_RAM_ATTR espShow(
21 |  uint8_t pin, uint8_t *pixels, uint32_t numBytes, boolean is800KHz) {
22 | #else
23 | void espShow(
24 |  uint8_t pin, uint8_t *pixels, uint32_t numBytes, boolean is800KHz) {
25 | #endif
26 | 
27 | #define CYCLES_800_T0H  (F_CPU / 2500000) // 0.4us
28 | #define CYCLES_800_T1H  (F_CPU / 1250000) // 0.8us
29 | #define CYCLES_800      (F_CPU /  800000) // 1.25us per bit
30 | #define CYCLES_400_T0H  (F_CPU / 2000000) // 0.5uS
31 | #define CYCLES_400_T1H  (F_CPU /  833333) // 1.2us
32 | #define CYCLES_400      (F_CPU /  400000) // 2.5us per bit
33 | 
34 |   uint8_t *p, *end, pix, mask;
35 |   uint32_t t, time0, time1, period, c, startTime;
36 | 
37 | #ifdef ESP8266
38 |   uint32_t pinMask;
39 |   pinMask   = _BV(pin);
40 | #endif
41 | 
42 |   p         =  pixels;
43 |   end       =  p + numBytes;
44 |   pix       = *p++;
45 |   mask      = 0x80;
46 |   startTime = 0;
47 | 
48 | #ifdef NEO_KHZ400
49 |   if(is800KHz) {
50 | #endif
51 |     time0  = CYCLES_800_T0H;
52 |     time1  = CYCLES_800_T1H;
53 |     period = CYCLES_800;
54 | #ifdef NEO_KHZ400
55 |   } else { // 400 KHz bitstream
56 |     time0  = CYCLES_400_T0H;
57 |     time1  = CYCLES_400_T1H;
58 |     period = CYCLES_400;
59 |   }
60 | #endif
61 | 
62 |   for(t = time0;; t = time0) {
63 |     if(pix & mask) t = time1;                             // Bit high duration
64 |     while(((c = _getCycleCount()) - startTime) < period); // Wait for bit start
65 | #ifdef ESP8266
66 |     GPIO_REG_WRITE(GPIO_OUT_W1TS_ADDRESS, pinMask);       // Set high
67 | #else
68 |     gpio_set_level(pin, HIGH);
69 | #endif
70 |     startTime = c;                                        // Save start time
71 |     while(((c = _getCycleCount()) - startTime) < t);      // Wait high duration
72 | #ifdef ESP8266
73 |     GPIO_REG_WRITE(GPIO_OUT_W1TC_ADDRESS, pinMask);       // Set low
74 | #else
75 |     gpio_set_level(pin, LOW);
76 | #endif
77 |     if(!(mask >>= 1)) {                                   // Next bit/byte
78 |       if(p >= end) break;
79 |       pix  = *p++;
80 |       mask = 0x80;
81 |     }
82 |   }
83 |   while((_getCycleCount() - startTime) < period); // Wait for last bit
84 | }
85 | 
86 | #endif // ESP8266
87 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/DS3231-1.0.3/LICENSE:
--------------------------------------------------------------------------------
 1 | This is free and unencumbered software released into the public domain.
 2 | 
 3 | Anyone is free to copy, modify, publish, use, compile, sell, or
 4 | distribute this software, either in source code form or as a compiled
 5 | binary, for any purpose, commercial or non-commercial, and by any
 6 | means.
 7 | 
 8 | In jurisdictions that recognize copyright laws, the author or authors
 9 | of this software dedicate any and all copyright interest in the
10 | software to the public domain. We make this dedication for the benefit
11 | of the public at large and to the detriment of our heirs and
12 | successors. We intend this dedication to be an overt act of
13 | relinquishment in perpetuity of all present and future rights to this
14 | software under copyright law.
15 | 
16 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
17 | EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
18 | MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
19 | IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
20 | OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
21 | ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
22 | OTHER DEALINGS IN THE SOFTWARE.
23 | 
24 | For more information, please refer to <http://unlicense.org/>
25 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/AnalogStick.cpp:
--------------------------------------------------------------------------------
  1 | #include "AnalogStick.h"
  2 | 
  3 | namespace simplebutton {
  4 |     AnalogStick::AnalogStick() {
  5 |         setup(255, 255, 255);
  6 |     }
  7 | 
  8 |     AnalogStick::AnalogStick(uint8_t xPin, uint8_t yPin, uint8_t buttonPin) {
  9 |         setup(xPin, yPin, buttonPin);
 10 |     }
 11 | 
 12 |     AnalogStick::~AnalogStick() {
 13 |         if (this->up) delete this->up;
 14 |         if (this->down) delete this->down;
 15 |         if (this->left) delete this->left;
 16 |         if (this->right) delete this->right;
 17 |     }
 18 | 
 19 |     void AnalogStick::setup(uint8_t xPin, uint8_t yPin, uint8_t buttonPin) {
 20 |         this->xPin      = xPin;
 21 |         this->yPin      = yPin;
 22 |         this->buttonPin = buttonPin;
 23 | 
 24 |         if (xPin < 255) pinMode(xPin, INPUT);
 25 |         if (yPin < 255) pinMode(yPin, INPUT);
 26 |         if (buttonPin < 255) pinMode(buttonPin, INPUT);
 27 | 
 28 |         this->button = new ButtonPullup(buttonPin);
 29 |         this->up     = new ButtonAnalog(yPin);
 30 |         this->down   = new ButtonAnalog(yPin);
 31 |         this->left   = new ButtonAnalog(xPin);
 32 |         this->right  = new ButtonAnalog(xPin);
 33 | 
 34 |         setLogic(1024);
 35 |     }
 36 | 
 37 |     void AnalogStick::update() {
 38 |         button->update();
 39 |         up->update();
 40 |         down->update();
 41 |         left->update();
 42 |         right->update();
 43 | 
 44 |         this->xValue = left->getState();
 45 |         this->yValue = up->getState();
 46 |     }
 47 | 
 48 |     void AnalogStick::update(uint8_t xValue, uint8_t yValue, bool buttonPress) {
 49 |         this->xValue = xValue;
 50 |         this->yValue = yValue;
 51 | 
 52 |         button->update(buttonPress);
 53 |         up->update(yValue);
 54 |         down->update(yValue);
 55 |         left->update(xValue);
 56 |         right->update(xValue);
 57 |     }
 58 | 
 59 |     uint8_t AnalogStick::getX() {
 60 |         return xValue;
 61 |     }
 62 | 
 63 |     uint8_t AnalogStick::getY() {
 64 |         return yValue;
 65 |     }
 66 | 
 67 |     void AnalogStick::setButtons(ButtonAnalog* up, ButtonAnalog* down, ButtonAnalog* left, ButtonAnalog* right,
 68 |                                  Button* button) {
 69 |         if (this->up) delete this->up;
 70 |         if (this->down) delete this->down;
 71 |         if (this->left) delete this->left;
 72 |         if (this->right) delete this->right;
 73 | 
 74 |         this->up    = up ? up : new ButtonAnalog();
 75 |         this->down  = down ? down : new ButtonAnalog();
 76 |         this->left  = left ? left : new ButtonAnalog();
 77 |         this->right = right ? right : new ButtonAnalog();
 78 | 
 79 |         this->button = button ? button : new Button();
 80 | 
 81 |         setLogic(this->logic, this->tolerance);
 82 |     }
 83 | 
 84 |     void AnalogStick::setLogic(uint16_t logic) {
 85 |         setLogic(logic, tolerance);
 86 |     }
 87 | 
 88 |     void AnalogStick::setLogic(uint16_t logic, uint8_t tolerance) {
 89 |         this->logic     = logic;
 90 |         this->tolerance = tolerance;
 91 | 
 92 |         uint16_t difference = (double)logic * ((double)tolerance / double(100));
 93 | 
 94 |         up->setBounds(0, difference);
 95 |         down->setBounds(logic - difference, logic);
 96 |         left->setBounds(0, difference);
 97 |         right->setBounds(logic - difference, logic);
 98 |     }
 99 | 
100 |     void AnalogStick::setUpdateInterval(uint32_t updateInterval) {
101 |         button->setUpdateInterval(updateInterval);
102 |         up->setUpdateInterval(updateInterval);
103 |         down->setUpdateInterval(updateInterval);
104 |         left->setUpdateInterval(updateInterval);
105 |         right->setUpdateInterval(updateInterval);
106 |     }
107 | 
108 |     void AnalogStick::setDefaultMinPushTime(uint32_t defaultMinPushTime) {
109 |         button->setDefaultMinPushTime(defaultMinPushTime);
110 |         up->setDefaultMinPushTime(defaultMinPushTime);
111 |         down->setDefaultMinPushTime(defaultMinPushTime);
112 |         left->setDefaultMinPushTime(defaultMinPushTime);
113 |         right->setDefaultMinPushTime(defaultMinPushTime);
114 |     }
115 | 
116 |     void AnalogStick::setDefaultMinReleaseTime(uint32_t defaultMinReleaseTime) {
117 |         button->setDefaultMinReleaseTime(defaultMinReleaseTime);
118 |         up->setDefaultMinReleaseTime(defaultMinReleaseTime);
119 |         down->setDefaultMinReleaseTime(defaultMinReleaseTime);
120 |         left->setDefaultMinReleaseTime(defaultMinReleaseTime);
121 |         right->setDefaultMinReleaseTime(defaultMinReleaseTime);
122 |     }
123 | 
124 |     void AnalogStick::setDefaultTimeSpan(uint32_t defaultTimeSpan) {
125 |         button->setDefaultTimeSpan(defaultTimeSpan);
126 |         up->setDefaultTimeSpan(defaultTimeSpan);
127 |         down->setDefaultTimeSpan(defaultTimeSpan);
128 |         left->setDefaultTimeSpan(defaultTimeSpan);
129 |         right->setDefaultTimeSpan(defaultTimeSpan);
130 |     }
131 | 
132 |     void AnalogStick::setDefaultHoldTime(uint32_t defaultHoldInterval) {
133 |         button->setDefaultHoldTime(defaultHoldInterval);
134 |         up->setDefaultHoldTime(defaultHoldInterval);
135 |         down->setDefaultHoldTime(defaultHoldInterval);
136 |         left->setDefaultHoldTime(defaultHoldInterval);
137 |         right->setDefaultHoldTime(defaultHoldInterval);
138 |     }
139 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/AnalogStick.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_AnalogStick_h
 2 | #define SimpleButton_AnalogStick_h
 3 | 
 4 | #include "ButtonPullup.h"
 5 | #include "ButtonAnalog.h"
 6 | 
 7 | namespace simplebutton {
 8 |     class AnalogStick {
 9 |         public:
10 |             Button* button      = NULL;
11 |             ButtonAnalog* up    = NULL;
12 |             ButtonAnalog* down  = NULL;
13 |             ButtonAnalog* left  = NULL;
14 |             ButtonAnalog* right = NULL;
15 | 
16 |             AnalogStick();
17 |             AnalogStick(uint8_t xPin, uint8_t yPin, uint8_t buttonPin);
18 | 
19 |             ~AnalogStick();
20 | 
21 |             void setup(uint8_t xPin, uint8_t yPin, uint8_t buttonPin);
22 | 
23 |             void update();
24 |             void update(uint8_t xValue, uint8_t yValue, bool buttonPress);
25 | 
26 |             uint8_t getX();
27 |             uint8_t getY();
28 | 
29 |             void setButtons(ButtonAnalog* up, ButtonAnalog* down, ButtonAnalog* left, ButtonAnalog* right,
30 |                             Button* button);
31 |             void setLogic(uint16_t logic);
32 |             void setLogic(uint16_t logic, uint8_t tolerance);
33 | 
34 |             void setUpdateInterval(uint32_t updateInterval);
35 |             void setDefaultMinPushTime(uint32_t defaultMinPushTime);
36 |             void setDefaultMinReleaseTime(uint32_t defaultMinReleaseTime);
37 |             void setDefaultTimeSpan(uint32_t defaultTimeSpan);
38 |             void setDefaultHoldTime(uint32_t defaultHoldInterval);
39 | 
40 |         private:
41 |             uint16_t logic    = 1024;
42 |             uint8_t tolerance = 25; // percentage
43 | 
44 |             uint8_t xValue = 0;
45 |             uint8_t yValue = 0;
46 | 
47 |             uint8_t xPin      = 0;
48 |             uint8_t yPin      = 0;
49 |             uint8_t buttonPin = 0;
50 |     };
51 | }
52 | 
53 | #endif // ifndef SimpleButton_AnalogStick_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/Button.h:
--------------------------------------------------------------------------------
  1 | #ifndef SimpleButton_Button_h
  2 | #define SimpleButton_Button_h
  3 | 
  4 | #include "Arduino.h"
  5 | #include "../Events/Event.h"
  6 | #include "../Events/PushEvent.h"
  7 | #include "../Events/ReleaseEvent.h"
  8 | #include "../Events/ClickEvent.h"
  9 | #include "../Events/DoubleclickEvent.h"
 10 | #include "../Events/HoldEvent.h"
 11 | 
 12 | namespace simplebutton {
 13 |     class Button {
 14 |         public:
 15 |             Button();
 16 |             Button(uint8_t pin);
 17 |             Button(uint8_t pin, bool inverted);
 18 | 
 19 |             virtual ~Button();
 20 | 
 21 |             void setup(uint8_t pin, bool inverted);
 22 | 
 23 |             virtual void enable();
 24 |             virtual void disable();
 25 |             virtual void reset();
 26 | 
 27 |             virtual void push();
 28 |             virtual void release();
 29 | 
 30 |             virtual void click();
 31 |             virtual void click(uint32_t time);
 32 | 
 33 |             virtual int read();
 34 |             virtual void update();
 35 |             virtual void update(int state);
 36 |             virtual void updateEvents();
 37 | 
 38 |             virtual bool isInverted();
 39 |             virtual bool isEnabled();
 40 |             virtual bool isSetup();
 41 | 
 42 |             virtual bool getState();
 43 |             virtual int getClicks();
 44 |             virtual int getPushTime();
 45 | 
 46 |             virtual bool pushed();
 47 |             virtual bool released();
 48 |             virtual bool clicked();
 49 |             virtual bool clicked(uint32_t minPushTime);
 50 |             virtual bool clicked(uint32_t minPushTime, uint32_t minReleaseTime);
 51 |             virtual bool doubleClicked();
 52 |             virtual bool doubleClicked(uint32_t minPushTime);
 53 |             virtual bool doubleClicked(uint32_t minPushTime, uint32_t timeSpan);
 54 |             virtual bool doubleClicked(uint32_t minPushTime, uint32_t minReleaseTime, uint32_t timeSpan);
 55 |             virtual bool holding();
 56 |             virtual bool holding(uint32_t interval);
 57 | 
 58 |             virtual void setUpdateInterval(uint32_t updateInterval);
 59 |             virtual void setDefaultMinPushTime(uint32_t defaultMinPushTime);
 60 |             virtual void setDefaultMinReleaseTime(uint32_t defaultMinReleaseTime);
 61 |             virtual void setDefaultTimeSpan(uint32_t defaultTimeSpan);
 62 |             virtual void setDefaultHoldTime(uint32_t defaultHoldInterval);
 63 | 
 64 |             virtual void setOnPushed(ButtonEventFunction);
 65 |             virtual void setOnReleased(ButtonEventFunction);
 66 |             virtual void setOnClicked(ButtonEventFunction);
 67 |             virtual void setOnClicked(ButtonEventFunction, uint32_t minPushTime);
 68 |             virtual void setOnClicked(ButtonEventFunction, uint32_t minPushTime, uint32_t minReleaseTime);
 69 |             virtual void setOnDoubleClicked(ButtonEventFunction);
 70 |             virtual void setOnDoubleClicked(ButtonEventFunction, uint32_t minPushTime);
 71 |             virtual void setOnDoubleClicked(ButtonEventFunction, uint32_t minPushTime, uint32_t timeSpan);
 72 |             virtual void setOnDoubleClicked(
 73 |                 ButtonEventFunction, uint32_t minPushTime, uint32_t minReleaseTime, uint32_t timeSpan);
 74 |             virtual void setOnHolding(ButtonEventFunction);
 75 |             virtual void setOnHolding(ButtonEventFunction, uint32_t interval);
 76 | 
 77 |             virtual void clearEvents();
 78 | 
 79 |         protected:
 80 |             Event* events = NULL;
 81 | 
 82 |             bool button_inverted = false;
 83 |             bool button_setup    = false;
 84 |             bool button_enabled  = false;
 85 |             bool state           = false;
 86 |             bool pushedFlag      = false;
 87 |             bool releasedFlag    = false;
 88 |             bool holdFlag        = false;
 89 | 
 90 |             uint8_t button_pin = 255;
 91 | 
 92 |             uint16_t clicks = 0;
 93 | 
 94 |             uint32_t pushTime        = 0;
 95 |             uint32_t releaseTime     = 0;
 96 |             uint32_t prevPushTime    = 0;
 97 |             uint32_t prevReleaseTime = 0;
 98 |             uint32_t holdTime        = 0;
 99 |             uint32_t updateTime      = 0;
100 | 
101 |             uint32_t updateInterval        = 5;
102 |             uint32_t defaultMinPushTime    = 40;
103 |             uint32_t defaultMinReleaseTime = 40;
104 |             uint32_t defaultTimeSpan       = 500;
105 |             uint32_t defaultHoldInterval   = 500;
106 | 
107 |             void addEvent(Event* e);
108 |     };
109 | }
110 | 
111 | #endif // ifndef SimpleButton_Button_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonAnalog.cpp:
--------------------------------------------------------------------------------
 1 | #include "ButtonAnalog.h"
 2 | 
 3 | namespace simplebutton {
 4 |     ButtonAnalog::ButtonAnalog() {
 5 |         setup(255, 0, 1024);
 6 |     }
 7 | 
 8 |     ButtonAnalog::ButtonAnalog(uint8_t pin) {
 9 |         setup(pin, 0, 1024);
10 |     }
11 | 
12 |     ButtonAnalog::ButtonAnalog(uint16_t minValue, uint16_t maxValue) {
13 |         setup(255, minValue, maxValue);
14 |     }
15 | 
16 |     ButtonAnalog::ButtonAnalog(uint8_t pin, uint16_t minValue, uint16_t maxValue) {
17 |         setup(pin, minValue, maxValue);
18 |     }
19 | 
20 |     ButtonAnalog::~ButtonAnalog() {}
21 | 
22 |     void ButtonAnalog::setup(uint8_t pin, uint16_t minValue, uint16_t maxValue) {
23 |         this->button_pin = pin;
24 |         this->minValue   = minValue;
25 |         this->maxValue   = maxValue;
26 |         enable();
27 |     }
28 | 
29 |     int ButtonAnalog::read() {
30 |         int currentState = 0;
31 | 
32 |         if (button_enabled && button_setup) {
33 |             currentState = analogRead(button_pin);
34 |         }
35 | 
36 |         return currentState;
37 |     }
38 | 
39 |     void ButtonAnalog::update() {
40 |         if (millis() - updateTime >= updateInterval) {
41 |             Button::updateEvents();
42 |             if (button_enabled && button_setup) update(read());
43 |         }
44 |     }
45 | 
46 |     void ButtonAnalog::update(int state) {
47 |         uint16_t newState = state;
48 | 
49 |         updateTime = millis();
50 | 
51 |         value = newState;
52 | 
53 |         if ((newState >= minValue) && (newState <= maxValue)) push();
54 |         else release();
55 |     }
56 | 
57 |     void ButtonAnalog::setMin(uint16_t minValue) {
58 |         this->minValue = minValue;
59 |     }
60 | 
61 |     void ButtonAnalog::setMax(uint16_t maxValue) {
62 |         this->maxValue = maxValue;
63 |     }
64 | 
65 |     void ButtonAnalog::setBounds(uint16_t minValue, uint16_t maxValue) {
66 |         setMin(minValue);
67 |         setMax(maxValue);
68 |     }
69 | 
70 |     void ButtonAnalog::setValue(int value) {
71 |         this->value = (uint16_t)value;
72 |     }
73 | 
74 |     uint16_t ButtonAnalog::getValue() {
75 |         return value;
76 |     }
77 | }
78 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonAnalog.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_ButtonAnalog_h
 2 | #define SimpleButton_ButtonAnalog_h
 3 | 
 4 | #include "Button.h"
 5 | 
 6 | 
 7 | namespace simplebutton {
 8 |     class ButtonAnalog : public Button {
 9 |         public:
10 |             ButtonAnalog();
11 |             ButtonAnalog(uint8_t pin);
12 |             ButtonAnalog(uint16_t minValue, uint16_t maxValue);
13 |             ButtonAnalog(uint8_t pin, uint16_t minValue, uint16_t maxValue);
14 | 
15 |             ~ButtonAnalog();
16 | 
17 |             void setup(uint8_t pin, uint16_t minValue, uint16_t maxValue);
18 | 
19 |             int read();
20 | 
21 |             void update();
22 |             void update(int state);
23 | 
24 |             void setMin(uint16_t minValue);
25 |             void setMax(uint16_t maxValue);
26 |             void setBounds(uint16_t minValue, uint16_t maxValue);
27 | 
28 |             uint16_t getValue();
29 |             void setValue(int value);
30 | 
31 |         private:
32 |             uint16_t minValue = 0;
33 |             uint16_t maxValue = 1024;
34 |             uint16_t value    = 0;
35 |     };
36 | }
37 | #endif // ifndef SimpleButton_ButtonAnalog_h
38 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonGPIOExpander.cpp:
--------------------------------------------------------------------------------
 1 | #include "ButtonGPIOExpander.h"
 2 | 
 3 | namespace simplebutton {
 4 |     ButtonGPIOExpander::ButtonGPIOExpander() {
 5 |         setup(NULL, 255, false);
 6 |     }
 7 | 
 8 |     ButtonGPIOExpander::ButtonGPIOExpander(GPIOExpander* pcf, uint8_t pin) {
 9 |         setup(pcf, pin, false);
10 |     }
11 | 
12 |     ButtonGPIOExpander::ButtonGPIOExpander(GPIOExpander* pcf, uint8_t pin, bool inverted) {
13 |         setup(pcf, pin, inverted);
14 |     }
15 | 
16 |     ButtonGPIOExpander::~ButtonGPIOExpander() {}
17 | 
18 |     void ButtonGPIOExpander::setup(GPIOExpander* pcf, uint8_t pin, bool inverted) {
19 |         this->pcf             = pcf;
20 |         this->button_pin      = pin;
21 |         this->button_inverted = inverted;
22 |         enable();
23 |     }
24 | 
25 |     void ButtonGPIOExpander::enable() {
26 |         button_enabled = true;
27 | 
28 |         if (pcf) {
29 |             pcf->write(button_pin, 0);
30 |             if (pcf->connected()) button_setup = true;
31 |         }
32 |     }
33 | 
34 |     int ButtonGPIOExpander::read() {
35 |         bool currentState = false;
36 | 
37 |         if (button_enabled && button_setup) {
38 |             currentState = pcf->read(button_pin) > 0;
39 | 
40 |             if (button_inverted) currentState = !currentState;
41 |         }
42 | 
43 |         return (int)currentState;
44 |     }
45 | 
46 |     void ButtonGPIOExpander::update() {
47 |         if (button_enabled && button_setup) {
48 |             update(read());
49 |         }
50 |     }
51 | 
52 |     void ButtonGPIOExpander::update(int state) {
53 |         Button::update(state);
54 |     }
55 | }
56 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonGPIOExpander.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_ButtonGPIOExpander_h
 2 | #define SimpleButton_ButtonGPIOExpander_h
 3 | 
 4 | #include "Button.h"
 5 | #include "../libs/GPIOExpander.h"
 6 | #include "../libs/PCF8574.h"
 7 | #include "../libs/PCF8575.h"
 8 | #include "../libs/MCP23017.h"
 9 | 
10 | namespace simplebutton {
11 |     class ButtonGPIOExpander : public Button {
12 |         public:
13 |             ButtonGPIOExpander();
14 |             ButtonGPIOExpander(GPIOExpander* pcf, uint8_t pin);
15 |             ButtonGPIOExpander(GPIOExpander* pcf, uint8_t pin, bool inverted);
16 | 
17 |             virtual ~ButtonGPIOExpander();
18 | 
19 |             void setup(GPIOExpander* pcf, uint8_t pin, bool inverted);
20 | 
21 |             virtual void enable();
22 | 
23 |             virtual int read();
24 |             virtual void update();
25 |             virtual void update(int state);
26 | 
27 |         protected:
28 |             GPIOExpander* pcf = NULL;
29 |     };
30 | }
31 | 
32 | #endif // ifndef SimpleButton_ButtonGPIOExpander_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonPullup.cpp:
--------------------------------------------------------------------------------
 1 | #include "ButtonPullup.h"
 2 | 
 3 | namespace simplebutton {
 4 |     ButtonPullup::ButtonPullup() {
 5 |         setup(255);
 6 |     }
 7 | 
 8 |     ButtonPullup::ButtonPullup(uint8_t pin) {
 9 |         setup(pin);
10 |     }
11 | 
12 |     ButtonPullup::~ButtonPullup() {}
13 | 
14 |     void ButtonPullup::setup(uint8_t pin) {
15 |         this->button_pin      = pin;
16 |         this->button_inverted = true;
17 |         enable();
18 |     }
19 | 
20 |     void ButtonPullup::enable() {
21 |         button_enabled = true;
22 | 
23 |         if ((button_pin < 255) && !button_setup) {
24 |             pinMode(button_pin, INPUT_PULLUP);
25 |             button_setup = true;
26 |         }
27 |     }
28 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonPullup.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_ButtonPullup_h
 2 | #define SimpleButton_ButtonPullup_h
 3 | 
 4 | #include "Button.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class ButtonPullup : public Button {
 8 |         public:
 9 |             ButtonPullup();
10 |             ButtonPullup(uint8_t pin);
11 | 
12 |             ~ButtonPullup();
13 | 
14 |             void setup(uint8_t pin);
15 | 
16 |             void enable();
17 |     };
18 | }
19 | 
20 | #endif // ifndef SimpleButton_ButtonPullup_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonPullupGPIOExpander.cpp:
--------------------------------------------------------------------------------
 1 | #include "ButtonPullupGPIOExpander.h"
 2 | 
 3 | namespace simplebutton {
 4 |     ButtonPullupGPIOExpander::ButtonPullupGPIOExpander() {
 5 |         setup(NULL, 255);
 6 |     }
 7 | 
 8 |     ButtonPullupGPIOExpander::ButtonPullupGPIOExpander(GPIOExpander* pcf, uint8_t pin) {
 9 |         setup(pcf, pin);
10 |     }
11 | 
12 |     ButtonPullupGPIOExpander::~ButtonPullupGPIOExpander() {}
13 | 
14 |     void ButtonPullupGPIOExpander::setup(GPIOExpander* pcf, uint8_t pin) {
15 |         this->pcf             = pcf;
16 |         this->button_pin      = pin;
17 |         this->button_inverted = true;
18 |         enable();
19 |     }
20 | 
21 |     void ButtonPullupGPIOExpander::enable() {
22 |         button_enabled = true;
23 | 
24 |         if (pcf) {
25 |             pcf->write(button_pin, 1);
26 |             if (pcf->connected()) button_setup = true;
27 |         }
28 |     }
29 | }
30 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/ButtonPullupGPIOExpander.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_ButtonPullupGPIOExpander_h
 2 | #define SimpleButton_ButtonPullupGPIOExpander_h
 3 | 
 4 | #include "ButtonGPIOExpander.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class ButtonPullupGPIOExpander : public ButtonGPIOExpander {
 8 |         public:
 9 |             ButtonPullupGPIOExpander();
10 |             ButtonPullupGPIOExpander(GPIOExpander* pcf, uint8_t pin);
11 | 
12 |             ~ButtonPullupGPIOExpander();
13 | 
14 |             void setup(GPIOExpander* pcf, uint8_t pin);
15 | 
16 |             void enable();
17 |     };
18 | }
19 | 
20 | #endif // ifndef SimpleButton_ButtonPullupGPIOExpander_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/PS2Gamepad.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_PS2Gamepad_h
 2 | #define SimpleButton_PS2Gamepad_h
 3 | 
 4 | #include "Button.h"
 5 | #include "AnalogStick.h"
 6 | 
 7 | namespace simplebutton {
 8 |     class PS2Gamepad {
 9 |         public:
10 |             ButtonAnalog* up    = NULL;
11 |             ButtonAnalog* down  = NULL;
12 |             ButtonAnalog* left  = NULL;
13 |             ButtonAnalog* right = NULL;
14 | 
15 |             ButtonAnalog* l1 = NULL;
16 |             ButtonAnalog* l2 = NULL;
17 |             ButtonAnalog* r1 = NULL;
18 |             ButtonAnalog* r2 = NULL;
19 | 
20 |             ButtonAnalog* square   = NULL;
21 |             ButtonAnalog* triangle = NULL;
22 |             ButtonAnalog* cross    = NULL;
23 |             ButtonAnalog* circle   = NULL;
24 | 
25 |             Button* select = NULL;
26 |             Button* start  = NULL;
27 | 
28 |             AnalogStick* analogLeft  = NULL;
29 |             AnalogStick* analogRight = NULL;
30 | 
31 |             PS2Gamepad();
32 |             PS2Gamepad(uint8_t clockPin, uint8_t cmdPin, uint8_t attPin, uint8_t dataPin, bool analog = true);
33 |             ~PS2Gamepad();
34 | 
35 |             void setup(uint8_t clockPin, uint8_t cmdPin, uint8_t attPin, uint8_t dataPin, bool analog = true);
36 |             void reconfig();
37 | 
38 |             void update();
39 | 
40 |             String getError();
41 | 
42 |             bool connected();
43 | 
44 |             void setUpdateInterval(uint32_t updateInterval);
45 |             void setMotors(uint8_t motorA, uint8_t motorB);
46 | 
47 |         private:
48 |             void poll();
49 |             void poll(uint8_t motorA, uint8_t motorB);
50 | 
51 |             bool getDigitalValue(uint8_t button);
52 |             uint8_t getAnalogValue(uint8_t button);
53 | 
54 |             // config
55 |             uint8_t motorA = 0x00; // 0 = OFF, 1 = ONN
56 |             uint8_t motorB = 0x00; // usually 0-39 = OFF, 40 - 255 = ON
57 | 
58 |             bool rumbleEnabled   = false;
59 |             bool pressureEnabled = false;
60 | 
61 |             uint32_t updateInterval = 25;
62 | 
63 |             // class variables
64 |             bool is_connected = false;
65 | 
66 |             uint8_t errorCode      = 0;
67 |             uint8_t controllerType = 0;
68 |             uint8_t gamepadData[21];
69 | 
70 |             uint16_t buttonData     = 0;
71 |             uint16_t prevButtonData = 0;
72 | 
73 |             uint32_t lastPoll = 0;
74 | 
75 |             uint8_t clockPin = 0;
76 |             uint8_t cmdPin   = 0;
77 |             uint8_t attPin   = 0;
78 |             uint8_t dataPin  = 0;
79 | 
80 |             // in/output
81 |             uint8_t shift(uint8_t data);
82 | 
83 |             // commands
84 |             void sendEnter();
85 |             void sendMode();
86 |             void sendRumble();
87 |             void sendBytesLarge();
88 |             void sendExit();
89 |             void sendRead();
90 |     };
91 | }
92 | 
93 | #endif // ifndef SimpleButton_PS2Gamepad_h
94 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/RotaryEncoder.cpp:
--------------------------------------------------------------------------------
  1 | #include "RotaryEncoder.h"
  2 | 
  3 | namespace simplebutton {
  4 |     RotaryEncoder::RotaryEncoder() {
  5 |         setButtons(NULL, NULL, NULL);
  6 |     }
  7 | 
  8 |     RotaryEncoder::RotaryEncoder(uint8_t channelA, uint8_t channelB, uint8_t button) {
  9 |         setup(channelA, channelB, button);
 10 |     }
 11 | 
 12 |     RotaryEncoder::RotaryEncoder(GPIOExpander* pcf, uint8_t channelA, uint8_t channelB, uint8_t button) {
 13 |         setup(pcf, channelA, channelB, button);
 14 |     }
 15 | 
 16 |     RotaryEncoder::RotaryEncoder(Button* clockwise, Button* anticlockwise, Button* button) {
 17 |         setup(clockwise, anticlockwise, button);
 18 |     }
 19 | 
 20 |     RotaryEncoder::~RotaryEncoder() {
 21 |         if (this->clockwise) delete this->clockwise;
 22 |         if (this->anticlockwise) delete this->anticlockwise;
 23 |         if (this->button) delete this->button;
 24 |     }
 25 | 
 26 |     void RotaryEncoder::setup(uint8_t channelA, uint8_t channelB, uint8_t button) {
 27 |         this->clockwise     = new ButtonPullup(channelA);
 28 |         this->anticlockwise = new ButtonPullup(channelB);
 29 |         this->button        = new ButtonPullup(button);
 30 | 
 31 |         prevA = clockwise->read();
 32 |         prevB = anticlockwise->read();
 33 |     }
 34 | 
 35 |     void RotaryEncoder::setup(GPIOExpander* pcf, uint8_t channelA, uint8_t channelB, uint8_t button) {
 36 |         this->clockwise     = new ButtonPullupGPIOExpander(pcf, channelA);
 37 |         this->anticlockwise = new ButtonPullupGPIOExpander(pcf, channelB);
 38 |         this->button        = new ButtonPullupGPIOExpander(pcf, button);
 39 | 
 40 |         prevA = clockwise->read();
 41 |         prevB = anticlockwise->read();
 42 |     }
 43 | 
 44 |     void RotaryEncoder::setup(Button* clockwise, Button* anticlockwise, Button* button) {
 45 |         setButtons(clockwise, anticlockwise, button);
 46 | 
 47 |         prevA = clockwise->read();
 48 |         prevB = anticlockwise->read();
 49 |     }
 50 | 
 51 |     void RotaryEncoder::update() {
 52 |         update(clockwise->read(), anticlockwise->read(), button->read());
 53 |     }
 54 | 
 55 |     void RotaryEncoder::update(bool stateA, bool stateB, bool buttonState) {
 56 |         button->update(buttonState);
 57 | 
 58 |         if (curState == State::STILL) {
 59 |             if ((stateA != prevA) && (stateB == prevB)) {
 60 |                 prevA    = stateA;
 61 |                 curState = State::ANTICLOCKWISE;
 62 |             } else if ((stateA == prevA) && (stateB != prevB)) {
 63 |                 prevB    = stateB;
 64 |                 curState = State::CLOCKWISE;
 65 |             }
 66 |         } else if ((curState != State::STILL) && (stateA == stateB)) {
 67 |             prevA = stateA;
 68 |             prevB = stateB;
 69 | 
 70 |             if (curState == prevState) steps++;
 71 |             else steps = 1;
 72 | 
 73 |             if (steps >= button_steps) {
 74 |                 if (curState == State::CLOCKWISE) {
 75 |                     if (!inverted) goClockwise();
 76 |                     else goAnticlockwise();
 77 |                 } else if (curState == State::ANTICLOCKWISE)  {
 78 |                     if (!inverted) goAnticlockwise();
 79 |                     else goClockwise();
 80 |                 }
 81 | 
 82 |                 steps = 0;
 83 |             }
 84 | 
 85 |             prevState = curState;
 86 |             curState  = State::STILL;
 87 |         }
 88 |     }
 89 | 
 90 |     void RotaryEncoder::reset() {
 91 |         button->reset();
 92 |         clockwise->reset();
 93 |         anticlockwise->reset();
 94 | 
 95 |         curState  = State::STILL;
 96 |         prevState = State::STILL;
 97 | 
 98 |         steps = 0;
 99 |     }
100 | 
101 |     int32_t RotaryEncoder::getPos() {
102 |         return pos;
103 |     }
104 | 
105 |     void RotaryEncoder::setButtons(Button* clockwise, Button* anticlockwise, Button* button) {
106 |         if (this->clockwise) delete this->clockwise;
107 |         if (this->anticlockwise) delete this->anticlockwise;
108 |         if (this->button) delete this->button;
109 | 
110 |         this->clockwise     = clockwise ? clockwise : new Button();
111 |         this->anticlockwise = anticlockwise ? anticlockwise : new Button();
112 |         this->button        = button ? button : new Button();
113 |     }
114 | 
115 |     void RotaryEncoder::setPos(int32_t pos) {
116 |         this->pos = pos;
117 |     }
118 | 
119 |     void RotaryEncoder::setMin(int32_t value) {
120 |         this->min = value;
121 |     }
122 | 
123 |     void RotaryEncoder::setMax(int32_t value) {
124 |         this->max = value;
125 |     }
126 | 
127 |     void RotaryEncoder::setEncoding(uint8_t steps) {
128 |         if ((steps == 1) || (steps == 2) || (steps == 4)) this->button_steps = steps;
129 |     }
130 | 
131 |     void RotaryEncoder::enableLoop(bool loop) {
132 |         this->loop = loop;
133 |     }
134 | 
135 |     void RotaryEncoder::setInverted(bool inverted) {
136 |         this->inverted = inverted;
137 |     }
138 | 
139 |     void RotaryEncoder::goClockwise() {
140 |         clockwise->click();
141 |         anticlockwise->reset();
142 |         if (pos < max) pos++;
143 |         else if (loop) pos = min;
144 |     }
145 | 
146 |     void RotaryEncoder::goAnticlockwise() {
147 |         anticlockwise->click();
148 |         clockwise->reset();
149 |         if (pos > min) pos--;
150 |         else if (loop) pos = max;
151 |     }
152 | 
153 |     bool RotaryEncoder::clicked() {
154 |         return button->clicked();
155 |     }
156 | 
157 |     bool RotaryEncoder::incremented() {
158 |         return clockwise->clicked();
159 |     }
160 | 
161 |     bool RotaryEncoder::decremented() {
162 |         return anticlockwise->clicked();
163 |     }
164 | 
165 |     bool RotaryEncoder::minVal() {
166 |         return pos == min;
167 |     }
168 | 
169 |     bool RotaryEncoder::maxVal() {
170 |         return pos == max;
171 |     }
172 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/RotaryEncoder.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_RotaryEncoder_h
 2 | #define SimpleButton_RotaryEncoder_h
 3 | 
 4 | #include "Button.h"
 5 | #include "ButtonPullup.h"
 6 | #include "ButtonGPIOExpander.h"
 7 | #include "ButtonPullupGPIOExpander.h"
 8 | 
 9 | namespace simplebutton {
10 |     class RotaryEncoder {
11 |         public:
12 |             Button* button        = NULL;
13 |             Button* clockwise     = NULL;
14 |             Button* anticlockwise = NULL;
15 | 
16 |             RotaryEncoder();
17 |             RotaryEncoder(uint8_t channelA, uint8_t channelB, uint8_t button);
18 |             RotaryEncoder(GPIOExpander* pcf, uint8_t channelA, uint8_t channelB, uint8_t button);
19 |             RotaryEncoder(Button* clockwise, Button* anticlockwise, Button* button);
20 | 
21 |             ~RotaryEncoder();
22 | 
23 |             void setup(uint8_t channelA, uint8_t channelB, uint8_t button);
24 |             void setup(GPIOExpander* pcf, uint8_t channelA, uint8_t channelB, uint8_t button);
25 |             void setup(Button* clockwise, Button* anticlockwise, Button* button);
26 | 
27 |             void update();
28 |             void update(bool stateA, bool stateB, bool buttonState);
29 | 
30 |             void reset();
31 | 
32 |             int32_t getPos();
33 | 
34 |             void setButtons(Button* clockwise, Button* anticlockwise, Button* button);
35 |             void setPos(int32_t pos);
36 |             void enableLoop(bool loop);
37 |             void setEncoding(uint8_t steps);
38 |             void setMin(int32_t value);
39 |             void setMax(int32_t value);
40 |             void setInverted(bool inverted);
41 | 
42 |             bool clicked();
43 |             bool incremented();
44 |             bool decremented();
45 |             bool minVal();
46 |             bool maxVal();
47 | 
48 |         private:
49 |             int32_t pos = 0;
50 | 
51 |             bool prevA = false;
52 |             bool prevB = false;
53 | 
54 |             enum State { STILL = 0, CLOCKWISE = 1, ANTICLOCKWISE = 2 };
55 |             State curState  = State::STILL;
56 |             State prevState = State::STILL;
57 | 
58 |             uint8_t button_steps = 1; // how many steps per turn (encoding)
59 |             uint8_t steps        = 0; // tmp counter
60 | 
61 |             int32_t min   = -128;
62 |             int32_t max   = 127;
63 |             bool loop     = false;
64 |             bool inverted = false;
65 | 
66 |             void goClockwise();
67 |             void goAnticlockwise();
68 |     };
69 | }
70 | 
71 | #endif // ifndef SimpleButton_RotaryEncoder_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/RotaryEncoderI2C.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_RotaryEncoderI2C_h
 2 | #define SimpleButton_RotaryEncoderI2C_h
 3 | 
 4 | #include "Arduino.h"
 5 | #include <Wire.h>
 6 | 
 7 | #define ROTARY_ENCODER_I2C_ERROR 5
 8 | 
 9 | #include "Button.h"
10 | 
11 | namespace simplebutton {
12 |     class RotaryEncoderI2C {
13 |         public:
14 |             Button* clockwise     = NULL;
15 |             Button* anticlockwise = NULL;
16 |             Button* button        = NULL;
17 | 
18 |             RotaryEncoderI2C();
19 |             RotaryEncoderI2C(uint8_t i2cAddress);
20 |             RotaryEncoderI2C(uint8_t i2cAddressdress, TwoWire* wire);
21 | 
22 |             ~RotaryEncoderI2C();
23 | 
24 |             void setup(uint8_t i2cAddress);
25 |             void setup(uint8_t i2cAddress, TwoWire* wire);
26 | 
27 |             bool update();
28 | 
29 |             void begin();
30 |             void reset();
31 | 
32 |             bool connected();
33 |             String getError();
34 | 
35 |             void setConfig(uint8_t config);
36 | 
37 |             void enableInterrupt(uint8_t pin, bool pullup);
38 |             void enableLed(bool led);
39 |             void enableLoop(bool loop);
40 |             void setEncoding(uint8_t encoding);
41 |             void setInverted(bool inverted);
42 | 
43 |             bool interrupt();
44 | 
45 |             void setPos(int32_t value);
46 |             void setMin(int32_t value);
47 |             void setMax(int32_t value);
48 |             void setLed(uint8_t valueA, uint8_t valueB);
49 |             void setLedA(uint8_t value);
50 |             void setLedB(uint8_t value);
51 | 
52 |             int32_t getPos();
53 | 
54 |             uint8_t readStatus();
55 |             uint8_t readLedA();
56 |             uint8_t readLedB();
57 |             int32_t readMax();
58 |             int32_t readMin();
59 | 
60 |             bool clicked();
61 |             bool incremented();
62 |             bool decremented();
63 |             bool minVal();
64 |             bool maxVal();
65 | 
66 |         private:
67 |             // temp variables
68 |             uint8_t status = 0x00;
69 |             uint8_t error  = 0;
70 | 
71 |             // i2c stuff
72 |             uint8_t i2cAddress = 0x00;
73 |             TwoWire* wire      = NULL;
74 | 
75 |             // config
76 |             uint8_t interruptPin = 0;
77 |             bool interruptEnable = false; // INTE
78 |             bool interruptPullup = true;
79 |             bool ledEnabled      = false; // LEDE
80 |             bool encoding        = false; // x1 = false, x2 = true
81 |             bool loop            = false; // WRAPE
82 |             bool inverted        = false; // DIRE
83 | 
84 |             // internal functions
85 |             void write(uint8_t address, uint8_t value);
86 |             void write(uint8_t address, int32_t value);
87 | 
88 |             uint8_t read(uint8_t address);
89 |             int32_t read32(uint8_t address);
90 |     };
91 | }
92 | #endif // ifndef SimpleButton_RotaryEncoderI2C_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/Switch.cpp:
--------------------------------------------------------------------------------
 1 | #include "Switch.h"
 2 | 
 3 | namespace simplebutton {
 4 |     Switch::Switch() {
 5 |         button = new Button();
 6 |     }
 7 | 
 8 |     Switch::Switch(uint8_t pin) {
 9 |         setup(pin);
10 |     }
11 | 
12 |     Switch::Switch(GPIOExpander* pcf, uint8_t pin) {
13 |         setup(pcf, pin);
14 |     }
15 | 
16 |     Switch::Switch(Button* button) {
17 |         setup(button);
18 |     }
19 | 
20 |     Switch::~Switch() {
21 |         if (this->button) delete this->button;
22 |     }
23 | 
24 |     void Switch::setup(uint8_t pin) {
25 |         button   = new Button(pin);
26 |         tmpState = button->read();
27 |     }
28 | 
29 |     void Switch::setup(GPIOExpander* pcf, uint8_t pin) {
30 |         button   = new ButtonGPIOExpander(pcf, pin);
31 |         tmpState = button->read();
32 |     }
33 | 
34 |     void Switch::setup(Button* button) {
35 |         setButton(button);
36 |         tmpState = button->read();
37 |     }
38 | 
39 |     void Switch::update() {
40 |         update(button->read());
41 |     }
42 | 
43 |     void Switch::update(bool state) {
44 |         bool prevState = tmpState;
45 | 
46 |         tmpState = state > 0;
47 | 
48 |         if (prevState != tmpState) button->click();
49 |     }
50 | 
51 |     void Switch::setButton(Button* button) {
52 |         if (this->button) delete this->button;
53 |         this->button = button ? button : new Button();
54 |     }
55 | 
56 |     bool Switch::getState() {
57 |         return tmpState;
58 |     }
59 | 
60 |     bool Switch::clicked() {
61 |         return button->clicked();
62 |     }
63 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Buttons/Switch.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_Switch_h
 2 | #define SimpleButton_Switch_h
 3 | 
 4 | #include "Button.h"
 5 | #include "ButtonGPIOExpander.h"
 6 | 
 7 | namespace simplebutton {
 8 |     class Switch {
 9 |         public:
10 |             Button* button = NULL;
11 | 
12 |             Switch();
13 |             Switch(uint8_t pin);
14 |             Switch(GPIOExpander* pcf, uint8_t pin);
15 |             Switch(Button* button);
16 | 
17 |             ~Switch();
18 | 
19 |             void setup(uint8_t pin);
20 |             void setup(GPIOExpander* pcf, uint8_t pin);
21 |             void setup(Button* button);
22 | 
23 |             void update();
24 |             void update(bool state);
25 | 
26 |             void setButton(Button* button);
27 | 
28 |             bool getState();
29 |             bool clicked();
30 | 
31 |         private:
32 |             bool tmpState = false;
33 |     };
34 | }
35 | 
36 | #endif // ifndef SimpleButton_Switch_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/ClickEvent.cpp:
--------------------------------------------------------------------------------
 1 | #include "ClickEvent.h"
 2 | 
 3 | namespace simplebutton {
 4 |     ClickEvent::ClickEvent(ButtonEventFunction, uint32_t minPushTime, uint32_t minReleaseTime) {
 5 |         this->fnct           = fnct;
 6 |         this->minPushTime    = minPushTime;
 7 |         this->minReleaseTime = minReleaseTime;
 8 |     }
 9 | 
10 |     ClickEvent::~ClickEvent() {
11 |         if (next) {
12 |             delete next;
13 |             next = NULL;
14 |         }
15 |     }
16 | 
17 |     uint8_t ClickEvent::getMode() {
18 |         return MODE::CLICKED;
19 |     }
20 | 
21 |     uint32_t ClickEvent::getMinPushTime() {
22 |         return minPushTime;
23 |     }
24 | 
25 |     uint32_t ClickEvent::getMinReleaseTime() {
26 |         return minReleaseTime;
27 |     }
28 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/ClickEvent.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_ClickEvent_h
 2 | #define SimpleButton_ClickEvent_h
 3 | 
 4 | #include "Event.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class ClickEvent : public Event {
 8 |         public:
 9 |             ClickEvent(ButtonEventFunction, uint32_t minPushTime, uint32_t minReleaseTime);
10 |             ~ClickEvent();
11 | 
12 |             uint8_t getMode();
13 |             uint32_t getMinPushTime();
14 |             uint32_t getMinReleaseTime();
15 | 
16 |         private:
17 |             uint32_t minPushTime    = 0;
18 |             uint32_t minReleaseTime = 0;
19 |     };
20 | }
21 | 
22 | #endif // ifndef SimpleButton_ClickEvent_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/DoubleclickEvent.cpp:
--------------------------------------------------------------------------------
 1 | #include "DoubleclickEvent.h"
 2 | 
 3 | namespace simplebutton {
 4 |     DoubleclickEvent::DoubleclickEvent(ButtonEventFunction, uint32_t minPushTime, uint32_t minReleaseTime,
 5 |                                        uint32_t timeSpan) {
 6 |         this->fnct           = fnct;
 7 |         this->minPushTime    = minPushTime;
 8 |         this->minReleaseTime = minReleaseTime;
 9 |         this->timeSpan       = timeSpan;
10 |     }
11 | 
12 |     DoubleclickEvent::~DoubleclickEvent() {
13 |         if (next) {
14 |             delete next;
15 |             next = NULL;
16 |         }
17 |     }
18 | 
19 |     uint8_t DoubleclickEvent::getMode() {
20 |         return MODE::DOUBLECLICKED;
21 |     }
22 | 
23 |     uint32_t DoubleclickEvent::getMinPushTime() {
24 |         return minPushTime;
25 |     }
26 | 
27 |     uint32_t DoubleclickEvent::getMinReleaseTime() {
28 |         return minReleaseTime;
29 |     }
30 | 
31 |     uint32_t DoubleclickEvent::getTimeSpan() {
32 |         return timeSpan;
33 |     }
34 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/DoubleclickEvent.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_DoubleclickEvent_h
 2 | #define SimpleButton_DoubleclickEvent_h
 3 | 
 4 | #include "Event.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class DoubleclickEvent : public Event {
 8 |         public:
 9 |             DoubleclickEvent(ButtonEventFunction, uint32_t minPushTime, uint32_t minReleaseTime, uint32_t timeSpan);
10 |             ~DoubleclickEvent();
11 | 
12 |             uint8_t getMode();
13 |             uint32_t getMinPushTime();
14 |             uint32_t getMinReleaseTime();
15 |             uint32_t getTimeSpan();
16 | 
17 |         private:
18 |             uint32_t minPushTime    = 0;
19 |             uint32_t minReleaseTime = 0;
20 |             uint32_t timeSpan       = 0;
21 |     };
22 | }
23 | 
24 | #endif // ifndef SimpleButton_DoubleclickEvent_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/Event.cpp:
--------------------------------------------------------------------------------
 1 | #include "Event.h"
 2 | 
 3 | namespace simplebutton {
 4 |     Event::~Event() {
 5 |         if (next) {
 6 |             delete next;
 7 |             next = NULL;
 8 |         }
 9 |     }
10 | 
11 |     void Event::run() {
12 |         if (fnct) fnct();
13 |     }
14 | 
15 |     uint8_t Event::getMode() {
16 |         return MODE::NONE;
17 |     }
18 | 
19 |     uint32_t Event::getMinPushTime() {
20 |         return 0;
21 |     }
22 | 
23 |     uint32_t Event::getMinReleaseTime() {
24 |         return 0;
25 |     }
26 | 
27 |     uint32_t Event::getTimeSpan() {
28 |         return 0;
29 |     }
30 | 
31 |     uint32_t Event::getInterval() {
32 |         return 0;
33 |     }
34 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/Event.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_Event_h
 2 | #define SimpleButton_Event_h
 3 | 
 4 | #include "Arduino.h"
 5 | #include <functional>
 6 | 
 7 | #define ButtonEventFunction std::function<void()>fnct
 8 | 
 9 | namespace simplebutton {
10 |     class Event {
11 |         public:
12 |             Event* next = NULL;
13 |             enum MODE { NONE = 0, PUSHED = 1, RELEASED = 2, CLICKED = 3, DOUBLECLICKED = 4, HOLDING = 5 };
14 | 
15 |             virtual ~Event();
16 | 
17 |             virtual void run();
18 | 
19 |             virtual uint8_t getMode();
20 |             virtual uint32_t getMinPushTime();
21 |             virtual uint32_t getMinReleaseTime();
22 |             virtual uint32_t getTimeSpan();
23 |             virtual uint32_t getInterval();
24 | 
25 |         protected:
26 |             ButtonEventFunction = NULL;
27 |     };
28 | }
29 | 
30 | #endif // ifndef Event_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/HoldEvent.cpp:
--------------------------------------------------------------------------------
 1 | #include "HoldEvent.h"
 2 | 
 3 | namespace simplebutton {
 4 |     HoldEvent::HoldEvent(ButtonEventFunction, uint32_t interval) {
 5 |         this->fnct     = fnct;
 6 |         this->interval = interval;
 7 |     }
 8 | 
 9 |     HoldEvent::~HoldEvent() {
10 |         if (next) {
11 |             delete next;
12 |             next = NULL;
13 |         }
14 |     }
15 | 
16 |     uint8_t HoldEvent::getMode() {
17 |         return MODE::HOLDING;
18 |     }
19 | 
20 |     uint32_t HoldEvent::getInterval() {
21 |         return interval;
22 |     }
23 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/HoldEvent.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_HoldEvent_h
 2 | #define SimpleButton_HoldEvent_h
 3 | 
 4 | #include "Event.h"
 5 | namespace simplebutton {
 6 |     class HoldEvent : public Event {
 7 |         public:
 8 |             HoldEvent(ButtonEventFunction, uint32_t interval);
 9 |             ~HoldEvent();
10 | 
11 |             uint8_t getMode();
12 |             uint32_t getInterval();
13 | 
14 |         private:
15 |             uint32_t interval = 0;
16 |     };
17 | }
18 | 
19 | #endif // ifndef SimpleButton_HoldEvent_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/PushEvent.cpp:
--------------------------------------------------------------------------------
 1 | #include "PushEvent.h"
 2 | 
 3 | namespace simplebutton {
 4 |     PushEvent::PushEvent(ButtonEventFunction) {
 5 |         this->fnct = fnct;
 6 |     }
 7 | 
 8 |     PushEvent::~PushEvent() {
 9 |         if (next) {
10 |             delete next;
11 |             next = NULL;
12 |         }
13 |     }
14 | 
15 |     uint8_t PushEvent::getMode() {
16 |         return MODE::PUSHED;
17 |     }
18 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/PushEvent.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_PushEvent_h
 2 | #define SimpleButton_PushEvent_h
 3 | 
 4 | #include "Event.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class PushEvent : public Event {
 8 |         public:
 9 |             PushEvent(ButtonEventFunction);
10 |             ~PushEvent();
11 | 
12 |             uint8_t getMode();
13 |     };
14 | }
15 | 
16 | #endif // ifndef SimpleButton_PushEvent_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/ReleaseEvent.cpp:
--------------------------------------------------------------------------------
 1 | #include "ReleaseEvent.h"
 2 | 
 3 | namespace simplebutton {
 4 |     ReleaseEvent::ReleaseEvent(ButtonEventFunction) {
 5 |         this->fnct = fnct;
 6 |     }
 7 | 
 8 |     ReleaseEvent::~ReleaseEvent() {
 9 |         if (next) {
10 |             delete next;
11 |             next = NULL;
12 |         }
13 |     }
14 | 
15 |     uint8_t ReleaseEvent::getMode() {
16 |         return MODE::RELEASED;
17 |     }
18 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/Events/ReleaseEvent.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_ReleaseEvent_h
 2 | #define SimpleButton_ReleaseEvent_h
 3 | 
 4 | #include "Event.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class ReleaseEvent : public Event {
 8 |         public:
 9 |             ReleaseEvent(ButtonEventFunction);
10 |             ~ReleaseEvent();
11 | 
12 |             uint8_t getMode();
13 |     };
14 | }
15 | 
16 | #endif // ifndef SimpleButton_ReleaseEvent_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/LICENSE:
--------------------------------------------------------------------------------
 1 | MIT License
 2 | 
 3 | Copyright (c) 2018 Stefan Kremser
 4 | 
 5 | Permission is hereby granted, free of charge, to any person obtaining a copy
 6 | of this software and associated documentation files (the "Software"), to deal
 7 | in the Software without restriction, including without limitation the rights
 8 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 9 | copies of the Software, and to permit persons to whom the Software is
10 | furnished to do so, subject to the following conditions:
11 | 
12 | The above copyright notice and this permission notice shall be included in all
13 | copies or substantial portions of the Software.
14 | 
15 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
16 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
17 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
18 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
19 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
20 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
21 | SOFTWARE.
22 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/SimpleButton.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_h
 2 | #define SimpleButton_h
 3 | 
 4 | #include "Buttons/Button.h"
 5 | #include "Buttons/ButtonGPIOExpander.h"
 6 | #include "Buttons/ButtonPullup.h"
 7 | #include "Buttons/ButtonPullupGPIOExpander.h"
 8 | #include "Buttons/ButtonAnalog.h"
 9 | #include "Buttons/Switch.h"
10 | #include "Buttons/RotaryEncoder.h"
11 | #include "Buttons/RotaryEncoderI2C.h"
12 | #include "Buttons/AnalogStick.h"
13 | #include "Buttons/PS2Gamepad.h"
14 | 
15 | #endif // ifndef SimpleButton_h
16 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/GPIOExpander.cpp:
--------------------------------------------------------------------------------
 1 | #include "GPIOExpander.h"
 2 | 
 3 | namespace simplebutton {
 4 |     void GPIOExpander::setup(uint8_t address) {
 5 |         this->wire    = &Wire;
 6 |         this->address = address;
 7 |         write(0);
 8 |     }
 9 | 
10 |     void GPIOExpander::setup(uint8_t address, TwoWire* wire) {
11 |         this->wire    = wire;
12 |         this->address = address;
13 |         write(0);
14 |     }
15 | 
16 |     bool GPIOExpander::connected() {
17 |         return error == 0;
18 |     }
19 | 
20 |     String GPIOExpander::getError() {
21 |         String msg;
22 | 
23 |         switch (error) {
24 |         case 0:
25 |             msg += String(F("OK"));
26 |             break;
27 | 
28 |         case 1:
29 |             msg += String(F("Data too long to fit in transmit buffer"));
30 |             break;
31 | 
32 |         case 2:
33 |             msg += String(F("Received NACK on transmit of address"));
34 |             break;
35 | 
36 |         case 3:
37 |             msg += String(F("Received NACK on transmit of data"));
38 | 
39 |         case 4:
40 |             msg += String(F("Unknown transmission error"));
41 |             break;
42 | 
43 |         case 5:
44 |             msg += String(F("Pin error"));
45 |             break;
46 | 
47 |         case 6:
48 |             msg += String(F("I2C error"));
49 |             break;
50 |         }
51 | 
52 |         return msg;
53 |     }
54 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/GPIOExpander.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_GPIOExpander_h
 2 | #define SimpleButton_GPIOExpander_h
 3 | 
 4 | #include "Arduino.h"
 5 | #include <Wire.h>
 6 | 
 7 | #define PCF_PIN_ERROR 5
 8 | #define PCF_I2C_ERROR 6
 9 | 
10 | namespace simplebutton {
11 |     class GPIOExpander {
12 |         public:
13 |             virtual ~GPIOExpander() = default;
14 | 
15 |             virtual void setup(uint8_t address);
16 |             virtual void setup(uint8_t address, TwoWire* wire);
17 | 
18 |             virtual int read() = 0;
19 |             virtual int read(uint8_t pin) = 0;
20 | 
21 |             virtual void write(int value) = 0;
22 |             virtual void write(uint8_t pin, bool value) = 0;
23 | 
24 |             virtual void toggle() = 0;
25 |             virtual void toggle(uint8_t pin) = 0;
26 | 
27 |             virtual bool connected();
28 |             virtual String getError();
29 | 
30 |         protected:
31 |             uint8_t error = 0;
32 | 
33 |             TwoWire* wire;
34 |             uint8_t address;
35 |     };
36 | }
37 | #endif // ifndef SimpleButton_GPIOExpander_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/MCP23017.cpp:
--------------------------------------------------------------------------------
  1 | #include "MCP23017.h"
  2 | namespace simplebutton {
  3 |     MCP23017::MCP23017(uint8_t address) {
  4 |         setup(address);
  5 |     }
  6 | 
  7 |     MCP23017::MCP23017(uint8_t address, TwoWire* wire) {
  8 |         setup(address, wire);
  9 |     }
 10 | 
 11 |     MCP23017::~MCP23017() {}
 12 | 
 13 |     void MCP23017::setup(uint8_t address) {
 14 |         setup(address, &Wire);
 15 |     }
 16 | 
 17 |     void MCP23017::setup(uint8_t address, TwoWire* wire) {
 18 |         this->address = address;
 19 |         this->wire    = wire;
 20 | 
 21 |         setIO();
 22 |         setPullups();
 23 |     }
 24 | 
 25 |     int MCP23017::read() {
 26 |         this->pinData = readRegister16(0x12); // 0x12 = GPIOA
 27 | 
 28 |         return this->pinData;
 29 |     }
 30 | 
 31 |     int MCP23017::read(uint8_t pin) {
 32 |         if (pin >= 16) {
 33 |             error = PCF_PIN_ERROR;
 34 |             return 0;
 35 |         }
 36 | 
 37 |         // make sure the pin is set to be an input
 38 |         if (getPinMode(pin) == OUTPUT) {
 39 |             bool pullup = getPinState(pin);
 40 |             setPinMode(pin, pullup ? INPUT_PULLUP : INPUT);
 41 |         }
 42 | 
 43 |         return (read() >> pin) & 0x1;
 44 |     }
 45 | 
 46 |     void MCP23017::write(int value) {
 47 |         // make sure all pins are set as outputs
 48 |         for (int i = 0; i < 16; i++) {
 49 |             bool output = (value >> i) & 0x1;
 50 |             if (output && (getPinMode(i) != OUTPUT)) setPinMode(i, OUTPUT);
 51 |         }
 52 | 
 53 |         this->pinData = value;
 54 | 
 55 |         writeRegister(0x12, value); // 0x12 = GPIOA
 56 |     }
 57 | 
 58 |     void MCP23017::write(uint8_t pin, bool value) {
 59 |         if (pin >= 16) {
 60 |             error = PCF_PIN_ERROR;
 61 |             return;
 62 |         }
 63 | 
 64 |         if (getPinState(pin) != value) toggle(pin);
 65 |     }
 66 | 
 67 |     void MCP23017::toggle() {
 68 |         pinData = ~pinData;
 69 |         write(pinData);
 70 |     }
 71 | 
 72 |     void MCP23017::toggle(uint8_t pin) {
 73 |         if (pin >= 16) {
 74 |             error = PCF_PIN_ERROR;
 75 |             return;
 76 |         }
 77 | 
 78 |         pinData ^= 1 << pin;
 79 |         write(pinData);
 80 |     }
 81 | 
 82 |     void MCP23017::setIO() {
 83 |         writeRegister(0x00, this->pinModes); // 0x00 = IODIRA register
 84 |     }
 85 | 
 86 |     void MCP23017::setPullups() {
 87 |         writeRegister(0x0C, this->pinPullups); // 0x0C = GPPUA register
 88 |     }
 89 | 
 90 |     void MCP23017::setPinMode(uint8_t pin, uint8_t mode) {
 91 |         if (pin >= 16) {
 92 |             error = PCF_PIN_ERROR;
 93 |             return;
 94 |         }
 95 | 
 96 |         if (getPinMode(pin) == mode) return;
 97 | 
 98 |         bool input  = (mode == INPUT || mode == INPUT_PULLUP);
 99 |         bool pullup = (mode == INPUT_PULLUP);
100 | 
101 |         bitWrite(pinModes, pin, input);
102 |         bitWrite(pinPullups, pin, pullup);
103 | 
104 |         setIO();
105 |         setPullups();
106 |     }
107 | 
108 |     uint8_t MCP23017::getPinMode(uint8_t pin) {
109 |         if (pin >= 16) {
110 |             error = PCF_PIN_ERROR;
111 |             return 0;
112 |         }
113 | 
114 |         bool input  = (this->pinModes >> pin) & 0x1;
115 |         bool pullup = (this->pinPullups >> pin) & 0x1;
116 | 
117 |         if (!input) return OUTPUT;
118 | 
119 |         if (pullup) return INPUT_PULLUP;
120 | 
121 |         return INPUT;
122 |     }
123 | 
124 |     bool MCP23017::getPinState(uint8_t pin) {
125 |         if (pin >= 16) {
126 |             error = PCF_PIN_ERROR;
127 |             return false;
128 |         }
129 | 
130 |         return (pinData >> pin) & 0x1;
131 |     }
132 | 
133 |     uint8_t MCP23017::readRegister8(uint8_t address) {
134 |         wire->beginTransmission(this->address);
135 |         wire->write(address);
136 |         error = wire->endTransmission();
137 | 
138 |         wire->requestFrom(this->address, (uint8_t)1);
139 | 
140 |         if (wire->available() == 1) {
141 |             return wire->read();
142 |         } else {
143 |             error = PCF_I2C_ERROR;
144 |             return 0;
145 |         }
146 |     }
147 | 
148 |     uint16_t MCP23017::readRegister16(uint8_t address) {
149 |         wire->beginTransmission(this->address);
150 |         wire->write(address);
151 |         error = wire->endTransmission();
152 | 
153 |         wire->requestFrom(this->address, (uint8_t)2);
154 | 
155 |         if (wire->available() == 2) {
156 |             uint16_t dataA = wire->read();
157 |             uint16_t dataB = wire->read();
158 | 
159 |             return (dataB << 8) | dataA;
160 |         } else {
161 |             error = PCF_I2C_ERROR;
162 |             return 0;
163 |         }
164 |     }
165 | 
166 |     void MCP23017::writeRegister(uint8_t address, uint16_t value) {
167 |         wire->beginTransmission(this->address);
168 |         wire->write(address);
169 |         wire->write(value & 0xFF);
170 |         wire->write(value >> 8);
171 |         error = wire->endTransmission();
172 |     }
173 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/MCP23017.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_MCP23017_h
 2 | #define SimpleButton_MCP23017_h
 3 | 
 4 | #include "GPIOExpander.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class MCP23017 : public GPIOExpander {
 8 |         public:
 9 |             MCP23017(uint8_t address);
10 |             MCP23017(uint8_t address, TwoWire* wire);
11 | 
12 |             ~MCP23017();
13 | 
14 |             void setup(uint8_t address);
15 |             void setup(uint8_t address, TwoWire* wire);
16 | 
17 |             int read();
18 |             int read(uint8_t pin);
19 | 
20 |             void write(int value);
21 |             void write(uint8_t pin, bool value);
22 | 
23 |             void toggle();
24 |             void toggle(uint8_t pin);
25 | 
26 |         private:
27 |             uint16_t pinData    = 0x0000;
28 |             uint16_t pinModes   = 0x0000;
29 |             uint16_t pinPullups = 0x0000;
30 | 
31 |             void setIO();
32 |             void setPullups();
33 | 
34 |             void setPinMode(uint8_t pin, uint8_t mode);
35 |             uint8_t getPinMode(uint8_t pin);
36 | 
37 |             bool getPinState(uint8_t pin);
38 | 
39 |             uint8_t readRegister8(uint8_t address);
40 |             uint16_t readRegister16(uint8_t address);
41 | 
42 |             void writeRegister(uint8_t address, uint16_t value);
43 |     };
44 | }
45 | 
46 | #endif // ifndef SimpleButton_MCP23017_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/PCF8574.cpp:
--------------------------------------------------------------------------------
 1 | #include "PCF8574.h"
 2 | 
 3 | namespace simplebutton {
 4 |     PCF8574::PCF8574(uint8_t address) {
 5 |         setup(address);
 6 |     }
 7 | 
 8 |     PCF8574::PCF8574(uint8_t address, TwoWire* wire) {
 9 |         setup(address, wire);
10 |     }
11 | 
12 |     PCF8574::~PCF8574() {}
13 | 
14 |     int PCF8574::read() {
15 |         wire->requestFrom(address, (uint8_t)1);
16 | 
17 |         data = 0;
18 | 
19 |         if (wire->available() >= 1) {
20 |             data = wire->read();
21 |         } else {
22 |             error = PCF_I2C_ERROR;
23 |         }
24 | 
25 |         return data;
26 |     }
27 | 
28 |     int PCF8574::read(uint8_t pin) {
29 |         if (pin < 8) {
30 |             data = read();
31 |             return (data & (1 << pin)) > 0;
32 |         } else {
33 |             error = PCF_PIN_ERROR;
34 |             return -1;
35 |         }
36 |     }
37 | 
38 |     void PCF8574::write(int value) {
39 |         wire->beginTransmission(address);
40 | 
41 |         pinModeMask &= 0xff00;
42 |         pinModeMask |= value;
43 |         data         = pinModeMask;
44 | 
45 |         wire->write(data);
46 | 
47 |         error = wire->endTransmission();
48 |     }
49 | 
50 |     void PCF8574::write(uint8_t pin, bool value) {
51 |         if (pin >= 8) {
52 |             error = PCF_PIN_ERROR;
53 |             return;
54 |         }
55 | 
56 |         if (value) pinModeMask |= value << pin;
57 |         else pinModeMask &= ~(1 << pin);
58 | 
59 |         write(pinModeMask);
60 |     }
61 | 
62 |     void PCF8574::toggle() {
63 |         pinModeMask = ~pinModeMask;
64 |         write(pinModeMask);
65 |     }
66 | 
67 |     void PCF8574::toggle(uint8_t pin) {
68 |         if (pin < 8) {
69 |             pinModeMask ^= 1 << pin;
70 | 
71 |             write(pinModeMask);
72 |         } else {
73 |             error = PCF_PIN_ERROR;
74 |         }
75 |     }
76 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/PCF8574.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_PCF8574_h
 2 | #define SimpleButton_PCF8574_h
 3 | 
 4 | #include "GPIOExpander.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class PCF8574 : public GPIOExpander {
 8 |         public:
 9 |             PCF8574(uint8_t address);
10 |             PCF8574(uint8_t address, TwoWire* wire);
11 |             ~PCF8574();
12 | 
13 |             int read();
14 |             int read(uint8_t pin);
15 | 
16 |             void write(int value);
17 |             void write(uint8_t pin, bool value);
18 | 
19 |             void toggle();
20 |             void toggle(uint8_t pin);
21 | 
22 |         private:
23 |             uint8_t data;
24 |             uint8_t pinModeMask;
25 |     };
26 | }
27 | 
28 | #endif // ifndef SimpleButton_PCF8574_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/PCF8575.cpp:
--------------------------------------------------------------------------------
 1 | #include "PCF8575.h"
 2 | 
 3 | namespace simplebutton {
 4 |     PCF8575::PCF8575(uint8_t address) {
 5 |         setup(address);
 6 |     }
 7 | 
 8 |     PCF8575::PCF8575(uint8_t address, TwoWire* wire) {
 9 |         setup(address, wire);
10 |     }
11 | 
12 |     PCF8575::~PCF8575() {}
13 | 
14 |     int PCF8575::read() {
15 |         wire->requestFrom(address, (uint8_t)2);
16 | 
17 |         data = 0;
18 | 
19 |         if (wire->available() >= 2) {
20 |             data  = wire->read();
21 |             data |= wire->read() << 8;
22 |         }
23 | 
24 |         return data;
25 |     }
26 | 
27 |     int PCF8575::read(uint8_t pin) {
28 |         data = read();
29 | 
30 |         return (data & (1 << pin)) > 0;
31 |     }
32 | 
33 |     void PCF8575::write(int value) {
34 |         wire->beginTransmission(address);
35 | 
36 |         pinModeMask = value;
37 |         data        = pinModeMask;
38 | 
39 |         wire->write((uint8_t)data);
40 |         wire->write((uint8_t)(data >> 8));
41 | 
42 |         wire->endTransmission();
43 |     }
44 | 
45 |     void PCF8575::write(uint8_t pin, bool value) {
46 |         if (value) pinModeMask |= value << pin;
47 |         else pinModeMask &= ~(1 << pin);
48 | 
49 |         write(pinModeMask);
50 |     }
51 | 
52 |     void PCF8575::toggle() {
53 |         pinModeMask = ~pinModeMask;
54 |         write(pinModeMask);
55 |     }
56 | 
57 |     void PCF8575::toggle(uint8_t pin) {
58 |         pinModeMask ^= 1 << pin;
59 | 
60 |         write(pinModeMask);
61 |     }
62 | }


--------------------------------------------------------------------------------
/esp8266_deauther/src/SimpleButton/libs/PCF8575.h:
--------------------------------------------------------------------------------
 1 | #ifndef SimpleButton_PCF8575_h
 2 | #define SimpleButton_PCF8575_h
 3 | 
 4 | #include "GPIOExpander.h"
 5 | 
 6 | namespace simplebutton {
 7 |     class PCF8575 : public GPIOExpander {
 8 |         public:
 9 |             PCF8575(uint8_t address);
10 |             PCF8575(uint8_t address, TwoWire* wire);
11 | 
12 |             ~PCF8575();
13 | 
14 |             int read();
15 |             int read(uint8_t pin);
16 | 
17 |             void write(int value);
18 |             void write(uint8_t pin, bool value);
19 | 
20 |             void toggle();
21 |             void toggle(uint8_t pin);
22 | 
23 |         private:
24 |             uint16_t data;
25 |             uint16_t pinModeMask;
26 |     };
27 | }
28 | #endif // ifndef SimpleButton_PCF8575_h


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SH1106.h:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * The MIT License (MIT)
 3 |  *
 4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
 5 |  * Copyright (c) 2018 by Fabrice Weinberg
 6 |  *
 7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
 8 |  * of this software and associated documentation files (the "Software"), to deal
 9 |  * in the Software without restriction, including without limitation the rights
10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
11 |  * copies of the Software, and to permit persons to whom the Software is
12 |  * furnished to do so, subject to the following conditions:
13 |  *
14 |  * The above copyright notice and this permission notice shall be included in all
15 |  * copies or substantial portions of the Software.
16 |  *
17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
23 |  * SOFTWARE.
24 |  *
25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
26 |  * Please support us by buying our products (and not the clones) from
27 |  * https://thingpulse.com
28 |  *
29 |  */
30 | 
31 | #ifndef SH1106_h
32 | #define SH1106_h
33 | #include "SH1106Wire.h"
34 | 
35 | // For make SH1106 an alias for SH1106Wire
36 | typedef SH1106Wire SH1106;
37 | 
38 | 
39 | #endif
40 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SH1106Brzo.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
  5 |  * Copyright (c) 2018 by Fabrice Weinberg
  6 |  *
  7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  8 |  * of this software and associated documentation files (the "Software"), to deal
  9 |  * in the Software without restriction, including without limitation the rights
 10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 11 |  * copies of the Software, and to permit persons to whom the Software is
 12 |  * furnished to do so, subject to the following conditions:
 13 |  *
 14 |  * The above copyright notice and this permission notice shall be included in all
 15 |  * copies or substantial portions of the Software.
 16 |  *
 17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 23 |  * SOFTWARE.
 24 |  *
 25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 26 |  * Please support us by buying our products (and not the clones) from
 27 |  * https://thingpulse.com
 28 |  *
 29 |  */
 30 | 
 31 | #ifndef SH1106Brzo_h
 32 | #define SH1106Brzo_h
 33 | 
 34 | #include "OLEDDisplay.h"
 35 | #include <brzo_i2c.h>
 36 | 
 37 | #if F_CPU == 160000000L
 38 |   #define BRZO_I2C_SPEED 1000
 39 | #else
 40 |   #define BRZO_I2C_SPEED 800
 41 | #endif
 42 | 
 43 | class SH1106Brzo : public OLEDDisplay {
 44 |   private:
 45 |       uint8_t             _address;
 46 |       uint8_t             _sda;
 47 |       uint8_t             _scl;
 48 | 
 49 |   public:
 50 | 	SH1106Brzo(uint8_t _address, uint8_t _sda, uint8_t _scl, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 51 | 		setGeometry(g);
 52 | 
 53 |       this->_address = _address;
 54 |       this->_sda = _sda;
 55 |       this->_scl = _scl;
 56 |     }
 57 | 
 58 |     bool connect(){
 59 |       brzo_i2c_setup(_sda, _scl, 0);
 60 |       return true;
 61 |     }
 62 | 
 63 |     void display(void) {
 64 |     #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 65 |        uint8_t minBoundY = UINT8_MAX;
 66 |        uint8_t maxBoundY = 0;
 67 | 
 68 |        uint8_t minBoundX = UINT8_MAX;
 69 |        uint8_t maxBoundX = 0;
 70 |        uint8_t x, y;
 71 | 
 72 |        // Calculate the Y bounding box of changes
 73 |        // and copy buffer[pos] to buffer_back[pos];
 74 |        for (y = 0; y < (displayHeight / 8); y++) {
 75 |          for (x = 0; x < displayWidth; x++) {
 76 |           uint16_t pos = x + y * displayWidth;
 77 |           if (buffer[pos] != buffer_back[pos]) {
 78 |             minBoundY = _min(minBoundY, y);
 79 |             maxBoundY = _max(maxBoundY, y);
 80 |             minBoundX = _min(minBoundX, x);
 81 |             maxBoundX = _max(maxBoundX, x);
 82 |           }
 83 |           buffer_back[pos] = buffer[pos];
 84 |         }
 85 |         yield();
 86 |        }
 87 | 
 88 |        // If the minBoundY wasn't updated
 89 |        // we can savely assume that buffer_back[pos] == buffer[pos]
 90 |        // holdes true for all values of pos
 91 |        if (minBoundY == UINT8_MAX) return;
 92 | 
 93 |        byte k = 0;
 94 |        uint8_t sendBuffer[17];
 95 |        sendBuffer[0] = 0x40;
 96 | 
 97 |        // Calculate the colum offset
 98 |        uint8_t minBoundXp2H = (minBoundX + 2) & 0x0F;
 99 |        uint8_t minBoundXp2L = 0x10 | ((minBoundX + 2) >> 4 );
100 | 
101 |        brzo_i2c_start_transaction(this->_address, BRZO_I2C_SPEED);
102 | 
103 |        for (y = minBoundY; y <= maxBoundY; y++) {
104 |          sendCommand(0xB0 + y);
105 |          sendCommand(minBoundXp2H);
106 |          sendCommand(minBoundXp2L);
107 |          for (x = minBoundX; x <= maxBoundX; x++) {
108 |              k++;
109 |              sendBuffer[k] = buffer[x + y * displayWidth];
110 |              if (k == 16)  {
111 |                brzo_i2c_write(sendBuffer, 17, true);
112 |                k = 0;
113 |              }
114 |          }
115 |          if (k != 0) {
116 |            brzo_i2c_write(sendBuffer, k + 1, true);
117 |            k = 0;
118 |          }
119 |          yield();
120 |        }
121 |        if (k != 0) {
122 |          brzo_i2c_write(sendBuffer, k + 1, true);
123 |        }
124 |        brzo_i2c_end_transaction();
125 |      #else
126 |      #endif
127 |     }
128 | 
129 |   private:
130 | 	int getBufferOffset(void) {
131 | 		return 0;
132 | 	}
133 |     inline void sendCommand(uint8_t com) __attribute__((always_inline)){
134 |       uint8_t command[2] = {0x80 /* command mode */, com};
135 |       brzo_i2c_start_transaction(_address, BRZO_I2C_SPEED);
136 |       brzo_i2c_write(command, 2, true);
137 |       brzo_i2c_end_transaction();
138 |     }
139 | };
140 | 
141 | #endif
142 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SH1106Spi.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
  5 |  * Copyright (c) 2018 by Fabrice Weinberg
  6 |  *
  7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  8 |  * of this software and associated documentation files (the "Software"), to deal
  9 |  * in the Software without restriction, including without limitation the rights
 10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 11 |  * copies of the Software, and to permit persons to whom the Software is
 12 |  * furnished to do so, subject to the following conditions:
 13 |  *
 14 |  * The above copyright notice and this permission notice shall be included in all
 15 |  * copies or substantial portions of the Software.
 16 |  *
 17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 23 |  * SOFTWARE.
 24 |  *
 25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 26 |  * Please support us by buying our products (and not the clones) from
 27 |  * https://thingpulse.com
 28 |  *
 29 |  */
 30 | 
 31 | #ifndef SH1106Spi_h
 32 | #define SH1106Spi_h
 33 | 
 34 | #include "OLEDDisplay.h"
 35 | #include <SPI.h>
 36 | 
 37 | class SH1106Spi : public OLEDDisplay {
 38 |   private:
 39 |       uint8_t             _rst;
 40 |       uint8_t             _dc;
 41 | 
 42 |   public:
 43 |     SH1106Spi(uint8_t _rst, uint8_t _dc, uint8_t _cs, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 44 |         setGeometry(g);
 45 | 
 46 |       this->_rst = _rst;
 47 |       this->_dc  = _dc;
 48 |     }
 49 | 
 50 |     bool connect(){
 51 |       pinMode(_dc, OUTPUT);
 52 |       pinMode(_rst, OUTPUT);
 53 | 
 54 |       SPI.begin ();
 55 |       SPI.setClockDivider (SPI_CLOCK_DIV2);
 56 | 
 57 |       // Pulse Reset low for 10ms
 58 |       digitalWrite(_rst, HIGH);
 59 |       delay(1);
 60 |       digitalWrite(_rst, LOW);
 61 |       delay(10);
 62 |       digitalWrite(_rst, HIGH);
 63 |       return true;
 64 |     }
 65 | 
 66 |     void display(void) {
 67 |     #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 68 |        uint8_t minBoundY = UINT8_MAX;
 69 |        uint8_t maxBoundY = 0;
 70 | 
 71 |        uint8_t minBoundX = UINT8_MAX;
 72 |        uint8_t maxBoundX = 0;
 73 | 
 74 |        uint8_t x, y;
 75 | 
 76 |        // Calculate the Y bounding box of changes
 77 |        // and copy buffer[pos] to buffer_back[pos];
 78 |        for (y = 0; y < (displayHeight / 8); y++) {
 79 |          for (x = 0; x < displayWidth; x++) {
 80 |           uint16_t pos = x + y * displayWidth;
 81 |           if (buffer[pos] != buffer_back[pos]) {
 82 |             minBoundY = _min(minBoundY, y);
 83 |             maxBoundY = _max(maxBoundY, y);
 84 |             minBoundX = _min(minBoundX, x);
 85 |             maxBoundX = _max(maxBoundX, x);
 86 |           }
 87 |           buffer_back[pos] = buffer[pos];
 88 |         }
 89 |         yield();
 90 |        }
 91 | 
 92 |        // If the minBoundY wasn't updated
 93 |        // we can savely assume that buffer_back[pos] == buffer[pos]
 94 |        // holdes true for all values of pos
 95 |        if (minBoundY == UINT8_MAX) return;
 96 | 
 97 |        // Calculate the colum offset
 98 |        uint8_t minBoundXp2H = (minBoundX + 2) & 0x0F;
 99 |        uint8_t minBoundXp2L = 0x10 | ((minBoundX + 2) >> 4 );
100 | 
101 |        for (y = minBoundY; y <= maxBoundY; y++) {
102 |          sendCommand(0xB0 + y);
103 |          sendCommand(minBoundXp2H);
104 |          sendCommand(minBoundXp2L);
105 |          digitalWrite(_dc, HIGH);   // data mode
106 |          for (x = minBoundX; x <= maxBoundX; x++) {
107 |            SPI.transfer(buffer[x + y * displayWidth]);
108 |          }
109 |          yield();
110 |        }
111 |      #else
112 |       for (uint8_t y=0; y<displayHeight/8; y++) {
113 |         sendCommand(0xB0 + y);
114 |         sendCommand(0x02);
115 |         sendCommand(0x10);
116 |         digitalWrite(_dc, HIGH);   // data mode
117 |         for( uint8_t x=0; x < displayWidth; x++) {
118 |           SPI.transfer(buffer[x + y * displayWidth]);
119 |         }
120 |         yield();
121 |       }
122 |      #endif
123 |     }
124 | 
125 |   private:
126 | 	int getBufferOffset(void) {
127 | 		return 0;
128 | 	}
129 |     inline void sendCommand(uint8_t com) __attribute__((always_inline)){
130 |       digitalWrite(_dc, LOW);
131 |       SPI.transfer(com);
132 |     }
133 | };
134 | 
135 | #endif
136 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SH1106Wire.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
  5 |  * Copyright (c) 2018 by Fabrice Weinberg
  6 |  *
  7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  8 |  * of this software and associated documentation files (the "Software"), to deal
  9 |  * in the Software without restriction, including without limitation the rights
 10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 11 |  * copies of the Software, and to permit persons to whom the Software is
 12 |  * furnished to do so, subject to the following conditions:
 13 |  *
 14 |  * The above copyright notice and this permission notice shall be included in all
 15 |  * copies or substantial portions of the Software.
 16 |  *
 17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 23 |  * SOFTWARE.
 24 |  *
 25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 26 |  * Please support us by buying our products (and not the clones) from
 27 |  * https://thingpulse.com
 28 |  *
 29 |  */
 30 | 
 31 | #ifndef SH1106Wire_h
 32 | #define SH1106Wire_h
 33 | 
 34 | #include "OLEDDisplay.h"
 35 | #include <Wire.h>
 36 | 
 37 | #define SH1106_SET_PUMP_VOLTAGE 0X30
 38 | #define SH1106_SET_PUMP_MODE 0XAD
 39 | #define SH1106_PUMP_ON 0X8B
 40 | #define SH1106_PUMP_OFF 0X8A
 41 | //--------------------------------------
 42 | 
 43 | class SH1106Wire : public OLEDDisplay {
 44 |   private:
 45 |       uint8_t             _address;
 46 |       uint8_t             _sda;
 47 |       uint8_t             _scl;
 48 | 
 49 |   public:
 50 |     SH1106Wire(uint8_t _address, uint8_t _sda, uint8_t _scl, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 51 |       setGeometry(g);
 52 | 
 53 |       this->_address = _address;
 54 |       this->_sda = _sda;
 55 |       this->_scl = _scl;
 56 |     }
 57 | 
 58 |     bool connect() {
 59 |       Wire.begin(this->_sda, this->_scl);
 60 |       // Let's use ~700khz if ESP8266 is in 160Mhz mode
 61 |       // this will be limited to ~400khz if the ESP8266 in 80Mhz mode.
 62 |       Wire.setClock(700000);
 63 |       return true;
 64 |     }
 65 | 
 66 |     void display(void) {
 67 |       #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 68 |         uint8_t minBoundY = UINT8_MAX;
 69 |         uint8_t maxBoundY = 0;
 70 | 
 71 |         uint8_t minBoundX = UINT8_MAX;
 72 |         uint8_t maxBoundX = 0;
 73 | 
 74 |         uint8_t x, y;
 75 | 
 76 |         // Calculate the Y bounding box of changes
 77 |         // and copy buffer[pos] to buffer_back[pos];
 78 |         for (y = 0; y < (displayHeight / 8); y++) {
 79 |           for (x = 0; x < displayWidth; x++) {
 80 |            uint16_t pos = x + y * displayWidth;
 81 |            if (buffer[pos] != buffer_back[pos]) {
 82 |              minBoundY = _min(minBoundY, y);
 83 |              maxBoundY = _max(maxBoundY, y);
 84 |              minBoundX = _min(minBoundX, x);
 85 |              maxBoundX = _max(maxBoundX, x);
 86 |            }
 87 |            buffer_back[pos] = buffer[pos];
 88 |          }
 89 |          yield();
 90 |         }
 91 | 
 92 |         // If the minBoundY wasn't updated
 93 |         // we can savely assume that buffer_back[pos] == buffer[pos]
 94 |         // holdes true for all values of pos
 95 |         if (minBoundY == UINT8_MAX) return;
 96 | 
 97 |         // Calculate the colum offset
 98 |         uint8_t minBoundXp2H = (minBoundX + 2) & 0x0F;
 99 |         uint8_t minBoundXp2L = 0x10 | ((minBoundX + 2) >> 4 );
100 | 
101 |         byte k = 0;
102 |         for (y = minBoundY; y <= maxBoundY; y++) {
103 |           sendCommand(0xB0 + y);
104 |           sendCommand(minBoundXp2H);
105 |           sendCommand(minBoundXp2L);
106 |           for (x = minBoundX; x <= maxBoundX; x++) {
107 |             if (k == 0) {
108 |               Wire.beginTransmission(_address);
109 |               Wire.write(0x40);
110 |             }
111 |             Wire.write(buffer[x + y * displayWidth]);
112 |             k++;
113 |             if (k == 16)  {
114 |               Wire.endTransmission();
115 |               k = 0;
116 |             }
117 |           }
118 |           if (k != 0)  {
119 |             Wire.endTransmission();
120 |             k = 0;
121 |           }
122 |           yield();
123 |         }
124 | 
125 |         if (k != 0) {
126 |           Wire.endTransmission();
127 |         }
128 |       #else
129 |         uint8_t * p = &buffer[0];
130 |         for (uint8_t y=0; y<8; y++) {
131 |           sendCommand(0xB0+y);
132 |           sendCommand(0x02);
133 |           sendCommand(0x10);
134 |           for( uint8_t x=0; x<8; x++) {
135 |             Wire.beginTransmission(_address);
136 |             Wire.write(0x40);
137 |             for (uint8_t k = 0; k < 16; k++) {
138 |               Wire.write(*p++);
139 |             }
140 |             Wire.endTransmission();
141 |           }
142 |         }
143 |       #endif
144 |     }
145 | 
146 |   private:
147 | 	int getBufferOffset(void) {
148 | 		return 0;
149 | 	}
150 |     inline void sendCommand(uint8_t command) __attribute__((always_inline)){
151 |       Wire.beginTransmission(_address);
152 |       Wire.write(0x80);
153 |       Wire.write(command);
154 |       Wire.endTransmission();
155 |     }
156 | 
157 | 
158 | };
159 | 
160 | #endif
161 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SSD1306.h:
--------------------------------------------------------------------------------
 1 | /**
 2 |  * The MIT License (MIT)
 3 |  *
 4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
 5 |  * Copyright (c) 2018 by Fabrice Weinberg
 6 |  *
 7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
 8 |  * of this software and associated documentation files (the "Software"), to deal
 9 |  * in the Software without restriction, including without limitation the rights
10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
11 |  * copies of the Software, and to permit persons to whom the Software is
12 |  * furnished to do so, subject to the following conditions:
13 |  *
14 |  * The above copyright notice and this permission notice shall be included in all
15 |  * copies or substantial portions of the Software.
16 |  *
17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
23 |  * SOFTWARE.
24 |  *
25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
26 |  * Please support us by buying our products (and not the clones) from
27 |  * https://thingpulse.com
28 |  *
29 |  */
30 | 
31 | #ifndef SSD1306_h
32 | #define SSD1306_h
33 | #include "SSD1306Wire.h"
34 | 
35 | // For legacy support make SSD1306 an alias for SSD1306
36 | typedef SSD1306Wire SSD1306;
37 | 
38 | 
39 | #endif
40 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SSD1306Brzo.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
  5 |  * Copyright (c) 2018 by Fabrice Weinberg
  6 |  *
  7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  8 |  * of this software and associated documentation files (the "Software"), to deal
  9 |  * in the Software without restriction, including without limitation the rights
 10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 11 |  * copies of the Software, and to permit persons to whom the Software is
 12 |  * furnished to do so, subject to the following conditions:
 13 |  *
 14 |  * The above copyright notice and this permission notice shall be included in all
 15 |  * copies or substantial portions of the Software.
 16 |  *
 17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 23 |  * SOFTWARE.
 24 |  *
 25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 26 |  * Please support us by buying our products (and not the clones) from
 27 |  * https://thingpulse.com
 28 |  *
 29 |  */
 30 | 
 31 | #ifndef SSD1306Brzo_h
 32 | #define SSD1306Brzo_h
 33 | 
 34 | #include "OLEDDisplay.h"
 35 | #include <brzo_i2c.h>
 36 | 
 37 | #if F_CPU == 160000000L
 38 |   #define BRZO_I2C_SPEED 1000
 39 | #else
 40 |   #define BRZO_I2C_SPEED 800
 41 | #endif
 42 | 
 43 | class SSD1306Brzo : public OLEDDisplay {
 44 |   private:
 45 |       uint8_t             _address;
 46 |       uint8_t             _sda;
 47 |       uint8_t             _scl;
 48 | 
 49 |   public:
 50 |     SSD1306Brzo(uint8_t _address, uint8_t _sda, uint8_t _scl, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 51 |       setGeometry(g);
 52 | 
 53 |       this->_address = _address;
 54 |       this->_sda = _sda;
 55 |       this->_scl = _scl;
 56 |     }
 57 | 
 58 |     bool connect(){
 59 |       brzo_i2c_setup(_sda, _scl, 0);
 60 |       return true;
 61 |     }
 62 | 
 63 |     void display(void) {
 64 |     #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 65 |        uint8_t minBoundY = UINT8_MAX;
 66 |        uint8_t maxBoundY = 0;
 67 | 
 68 |        uint8_t minBoundX = UINT8_MAX;
 69 |        uint8_t maxBoundX = 0;
 70 | 
 71 |        uint8_t x, y;
 72 | 
 73 |        // Calculate the Y bounding box of changes
 74 |        // and copy buffer[pos] to buffer_back[pos];
 75 |        for (y = 0; y < (displayHeight / 8); y++) {
 76 |          for (x = 0; x < displayWidth; x++) {
 77 |           uint16_t pos = x + y * displayWidth;
 78 |           if (buffer[pos] != buffer_back[pos]) {
 79 |             minBoundY = _min(minBoundY, y);
 80 |             maxBoundY = _max(maxBoundY, y);
 81 |             minBoundX = _min(minBoundX, x);
 82 |             maxBoundX = _max(maxBoundX, x);
 83 |           }
 84 |           buffer_back[pos] = buffer[pos];
 85 |         }
 86 |         yield();
 87 |        }
 88 | 
 89 |        // If the minBoundY wasn't updated
 90 |        // we can savely assume that buffer_back[pos] == buffer[pos]
 91 |        // holdes true for all values of pos
 92 |        if (minBoundY == UINT8_MAX) return;
 93 | 
 94 |        sendCommand(COLUMNADDR);
 95 |        sendCommand(minBoundX);
 96 |        sendCommand(maxBoundX);
 97 | 
 98 |        sendCommand(PAGEADDR);
 99 |        sendCommand(minBoundY);
100 |        sendCommand(maxBoundY);
101 | 
102 |        byte k = 0;
103 |        uint8_t sendBuffer[17];
104 |        sendBuffer[0] = 0x40;
105 |        brzo_i2c_start_transaction(this->_address, BRZO_I2C_SPEED);
106 |        for (y = minBoundY; y <= maxBoundY; y++) {
107 |            for (x = minBoundX; x <= maxBoundX; x++) {
108 |                k++;
109 |                sendBuffer[k] = buffer[x + y * displayWidth];
110 |                if (k == 16)  {
111 |                  brzo_i2c_write(sendBuffer, 17, true);
112 |                  k = 0;
113 |                }
114 |            }
115 |            yield();
116 |        }
117 |        brzo_i2c_write(sendBuffer, k + 1, true);
118 |        brzo_i2c_end_transaction();
119 |      #else
120 |        // No double buffering
121 |        sendCommand(COLUMNADDR);
122 |        sendCommand(0x0);
123 |        sendCommand(0x7F);
124 | 
125 |        sendCommand(PAGEADDR);
126 |        sendCommand(0x0);
127 | 
128 |        if (geometry == GEOMETRY_128_64) {
129 |          sendCommand(0x7);
130 |        } else if (geometry == GEOMETRY_128_32) {
131 |          sendCommand(0x3);
132 |        }
133 | 
134 |        uint8_t sendBuffer[17];
135 |        sendBuffer[0] = 0x40;
136 |        brzo_i2c_start_transaction(this->_address, BRZO_I2C_SPEED);
137 |        for (uint16_t i=0; i<displayBufferSize; i++) {
138 |          for (uint8_t x=1; x<17; x++) {
139 |            sendBuffer[x] = buffer[i];
140 |            i++;
141 |          }
142 |          i--;
143 |          brzo_i2c_write(sendBuffer,  17,  true);
144 |          yield();
145 |        }
146 |        brzo_i2c_end_transaction();
147 |      #endif
148 |     }
149 | 
150 |   private:
151 | 	int getBufferOffset(void) {
152 | 		return 0;
153 | 	}
154 |     inline void sendCommand(uint8_t com) __attribute__((always_inline)){
155 |       uint8_t command[2] = {0x80 /* command mode */, com};
156 |       brzo_i2c_start_transaction(_address, BRZO_I2C_SPEED);
157 |       brzo_i2c_write(command, 2, true);
158 |       brzo_i2c_end_transaction();
159 |     }
160 | };
161 | 
162 | #endif
163 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SSD1306I2C.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2019 by Helmut Tschemernjak - www.radioshuttle.de
  5 |  *
  6 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  7 |  * of this software and associated documentation files (the "Software"), to deal
  8 |  * in the Software without restriction, including without limitation the rights
  9 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 10 |  * copies of the Software, and to permit persons to whom the Software is
 11 |  * furnished to do so, subject to the following conditions:
 12 |  *
 13 |  * The above copyright notice and this permission notice shall be included in all
 14 |  * copies or substantial portions of the Software.
 15 |  *
 16 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 17 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 18 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 19 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 20 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 21 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 22 |  * SOFTWARE.
 23 |  *
 24 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 25 |  * Please support us by buying our products (and not the clones) from
 26 |  * https://thingpulse.com
 27 |  *
 28 |  */
 29 | 
 30 | #ifndef SSD1306I2C_h
 31 | #define SSD1306I2C_h
 32 | 
 33 | 
 34 | #ifdef __MBED__
 35 | 
 36 | #include "OLEDDisplay.h"
 37 | #include <mbed.h>
 38 | 
 39 | #ifndef UINT8_MAX
 40 |  #define UINT8_MAX 0xff
 41 | #endif
 42 | 
 43 | class SSD1306I2C : public OLEDDisplay {
 44 | public:
 45 |     SSD1306I2C(uint8_t _address, PinName _sda, PinName _scl, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 46 |       setGeometry(g);
 47 | 
 48 |       this->_address = _address << 1;  // convert from 7 to 8 bit for mbed.
 49 |       this->_sda = _sda;
 50 |       this->_scl = _scl;
 51 | 	  _i2c = new I2C(_sda, _scl);
 52 |     }
 53 | 
 54 |     bool connect() {
 55 | 		// mbed supports 100k and 400k some device maybe 1000k
 56 | #ifdef TARGET_STM32L4
 57 | 	  _i2c->frequency(1000000);
 58 | #else
 59 | 	  _i2c->frequency(400000);
 60 | #endif
 61 |       return true;
 62 |     }
 63 | 
 64 |     void display(void) {
 65 |       const int x_offset = (128 - this->width()) / 2;
 66 | #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 67 |         uint8_t minBoundY = UINT8_MAX;
 68 |         uint8_t maxBoundY = 0;
 69 | 
 70 |         uint8_t minBoundX = UINT8_MAX;
 71 |         uint8_t maxBoundX = 0;
 72 |         uint8_t x, y;
 73 | 
 74 |         // Calculate the Y bounding box of changes
 75 |         // and copy buffer[pos] to buffer_back[pos];
 76 |         for (y = 0; y < (this->height() / 8); y++) {
 77 |           for (x = 0; x < this->width(); x++) {
 78 |            uint16_t pos = x + y * this->width();
 79 |            if (buffer[pos] != buffer_back[pos]) {
 80 |              minBoundY = std::min(minBoundY, y);
 81 |              maxBoundY = std::max(maxBoundY, y);
 82 |              minBoundX = std::min(minBoundX, x);
 83 |              maxBoundX = std::max(maxBoundX, x);
 84 |            }
 85 |            buffer_back[pos] = buffer[pos];
 86 |          }
 87 |          yield();
 88 |         }
 89 | 
 90 |         // If the minBoundY wasn't updated
 91 |         // we can savely assume that buffer_back[pos] == buffer[pos]
 92 |         // holdes true for all values of pos
 93 | 
 94 |         if (minBoundY == UINT8_MAX) return;
 95 | 
 96 |         sendCommand(COLUMNADDR);
 97 |         sendCommand(x_offset + minBoundX);	// column start address (0 = reset)
 98 |         sendCommand(x_offset + maxBoundX);	// column end address (127 = reset)
 99 | 
100 |         sendCommand(PAGEADDR);
101 |         sendCommand(minBoundY);				// page start address
102 |         sendCommand(maxBoundY);				// page end address
103 | 
104 |         for (y = minBoundY; y <= maxBoundY; y++) {
105 | 			uint8_t *start = &buffer[(minBoundX + y * this->width())-1];
106 | 			uint8_t save = *start;
107 | 			
108 | 			*start = 0x40; // control
109 | 			_i2c->write(_address, (char *)start, (maxBoundX-minBoundX) + 1 + 1);
110 | 			*start = save;
111 | 		}
112 | #else
113 | 
114 |         sendCommand(COLUMNADDR);
115 |         sendCommand(x_offset);						// column start address (0 = reset)
116 |         sendCommand(x_offset + (this->width() - 1));// column end address (127 = reset)
117 | 
118 |         sendCommand(PAGEADDR);
119 |         sendCommand(0x0);							// page start address (0 = reset)
120 | 
121 |         if (geometry == GEOMETRY_128_64) {
122 |           sendCommand(0x7);
123 |         } else if (geometry == GEOMETRY_128_32) {
124 |           sendCommand(0x3);
125 |         }
126 | 
127 | 		buffer[-1] = 0x40; // control
128 | 		_i2c->write(_address, (char *)&buffer[-1], displayBufferSize + 1);
129 | #endif
130 |     }
131 | 
132 | private:
133 | 	int getBufferOffset(void) {
134 | 		return 0;
135 | 	}
136 | 
137 |     inline void sendCommand(uint8_t command) __attribute__((always_inline)) {
138 | 		char _data[2];
139 | 	  	_data[0] = 0x80; // control
140 | 	  	_data[1] = command;
141 | 	  	_i2c->write(_address, _data, sizeof(_data));
142 |     }
143 | 
144 | 	uint8_t             _address;
145 | 	PinName             _sda;
146 | 	PinName             _scl;
147 | 	I2C *_i2c;
148 | };
149 | 
150 | #endif
151 | 
152 | #endif
153 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SSD1306Spi.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
  5 |  * Copyright (c) 2018 by Fabrice Weinberg
  6 |  *
  7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  8 |  * of this software and associated documentation files (the "Software"), to deal
  9 |  * in the Software without restriction, including without limitation the rights
 10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 11 |  * copies of the Software, and to permit persons to whom the Software is
 12 |  * furnished to do so, subject to the following conditions:
 13 |  *
 14 |  * The above copyright notice and this permission notice shall be included in all
 15 |  * copies or substantial portions of the Software.
 16 |  *
 17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 23 |  * SOFTWARE.
 24 |  *
 25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 26 |  * Please support us by buying our products (and not the clones) from
 27 |  * https://thingpulse.com
 28 |  *
 29 |  */
 30 | 
 31 | #ifndef SSD1306Spi_h
 32 | #define SSD1306Spi_h
 33 | 
 34 | #include "OLEDDisplay.h"
 35 | #include <SPI.h>
 36 | 
 37 | #if F_CPU == 160000000L
 38 |   #define BRZO_I2C_SPEED 1000
 39 | #else
 40 |   #define BRZO_I2C_SPEED 800
 41 | #endif
 42 | 
 43 | class SSD1306Spi : public OLEDDisplay {
 44 |   private:
 45 |       uint8_t             _rst;
 46 |       uint8_t             _dc;
 47 |       uint8_t             _cs;
 48 | 
 49 |   public:
 50 |     SSD1306Spi(uint8_t _rst, uint8_t _dc, uint8_t _cs, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 51 |         setGeometry(g);
 52 | 
 53 |       this->_rst = _rst;
 54 |       this->_dc  = _dc;
 55 |       this->_cs  = _cs;
 56 |     }
 57 | 
 58 |     bool connect(){
 59 |       pinMode(_dc, OUTPUT);
 60 |       pinMode(_cs, OUTPUT);
 61 |       pinMode(_rst, OUTPUT);
 62 | 
 63 |       SPI.begin ();
 64 |       SPI.setClockDivider (SPI_CLOCK_DIV2);
 65 | 
 66 |       // Pulse Reset low for 10ms
 67 |       digitalWrite(_rst, HIGH);
 68 |       delay(1);
 69 |       digitalWrite(_rst, LOW);
 70 |       delay(10);
 71 |       digitalWrite(_rst, HIGH);
 72 |       return true;
 73 |     }
 74 | 
 75 |     void display(void) {
 76 |     #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 77 |        uint8_t minBoundY = UINT8_MAX;
 78 |        uint8_t maxBoundY = 0;
 79 | 
 80 |        uint8_t minBoundX = UINT8_MAX;
 81 |        uint8_t maxBoundX = 0;
 82 | 
 83 |        uint8_t x, y;
 84 | 
 85 |        // Calculate the Y bounding box of changes
 86 |        // and copy buffer[pos] to buffer_back[pos];
 87 |        for (y = 0; y < (displayHeight / 8); y++) {
 88 |          for (x = 0; x < displayWidth; x++) {
 89 |           uint16_t pos = x + y * displayWidth;
 90 |           if (buffer[pos] != buffer_back[pos]) {
 91 |             minBoundY = _min(minBoundY, y);
 92 |             maxBoundY = _max(maxBoundY, y);
 93 |             minBoundX = _min(minBoundX, x);
 94 |             maxBoundX = _max(maxBoundX, x);
 95 |           }
 96 |           buffer_back[pos] = buffer[pos];
 97 |         }
 98 |         yield();
 99 |        }
100 | 
101 |        // If the minBoundY wasn't updated
102 |        // we can savely assume that buffer_back[pos] == buffer[pos]
103 |        // holdes true for all values of pos
104 |        if (minBoundY == UINT8_MAX) return;
105 | 
106 |        sendCommand(COLUMNADDR);
107 |        sendCommand(minBoundX);
108 |        sendCommand(maxBoundX);
109 | 
110 |        sendCommand(PAGEADDR);
111 |        sendCommand(minBoundY);
112 |        sendCommand(maxBoundY);
113 | 
114 |        digitalWrite(_cs, HIGH);
115 |        digitalWrite(_dc, HIGH);   // data mode
116 |        digitalWrite(_cs, LOW);
117 |        for (y = minBoundY; y <= maxBoundY; y++) {
118 |          for (x = minBoundX; x <= maxBoundX; x++) {
119 |            SPI.transfer(buffer[x + y * displayWidth]);
120 |          }
121 |          yield();
122 |        }
123 |        digitalWrite(_cs, HIGH);
124 |      #else
125 |        // No double buffering
126 |        sendCommand(COLUMNADDR);
127 |        sendCommand(0x0);
128 |        sendCommand(0x7F);
129 | 
130 |        sendCommand(PAGEADDR);
131 |        sendCommand(0x0);
132 | 
133 |        if (geometry == GEOMETRY_128_64) {
134 |          sendCommand(0x7);
135 |        } else if (geometry == GEOMETRY_128_32) {
136 |          sendCommand(0x3);
137 |        }
138 | 
139 |         digitalWrite(_cs, HIGH);
140 |         digitalWrite(_dc, HIGH);   // data mode
141 |         digitalWrite(_cs, LOW);
142 |         for (uint16_t i=0; i<displayBufferSize; i++) {
143 |           SPI.transfer(buffer[i]);
144 |           yield();
145 |         }
146 |         digitalWrite(_cs, HIGH);
147 |      #endif
148 |     }
149 | 
150 |   private:
151 | 	int getBufferOffset(void) {
152 | 		return 0;
153 | 	}
154 |     inline void sendCommand(uint8_t com) __attribute__((always_inline)){
155 |       digitalWrite(_cs, HIGH);
156 |       digitalWrite(_dc, LOW);
157 |       digitalWrite(_cs, LOW);
158 |       SPI.transfer(com);
159 |       digitalWrite(_cs, HIGH);
160 |     }
161 | };
162 | 
163 | #endif
164 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/SSD1306Wire.h:
--------------------------------------------------------------------------------
  1 | /**
  2 |  * The MIT License (MIT)
  3 |  *
  4 |  * Copyright (c) 2018 by ThingPulse, Daniel Eichhorn
  5 |  * Copyright (c) 2018 by Fabrice Weinberg
  6 |  *
  7 |  * Permission is hereby granted, free of charge, to any person obtaining a copy
  8 |  * of this software and associated documentation files (the "Software"), to deal
  9 |  * in the Software without restriction, including without limitation the rights
 10 |  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 11 |  * copies of the Software, and to permit persons to whom the Software is
 12 |  * furnished to do so, subject to the following conditions:
 13 |  *
 14 |  * The above copyright notice and this permission notice shall be included in all
 15 |  * copies or substantial portions of the Software.
 16 |  *
 17 |  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 18 |  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 19 |  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 20 |  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 21 |  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 22 |  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 23 |  * SOFTWARE.
 24 |  *
 25 |  * ThingPulse invests considerable time and money to develop these open source libraries.
 26 |  * Please support us by buying our products (and not the clones) from
 27 |  * https://thingpulse.com
 28 |  *
 29 |  */
 30 | 
 31 | #ifndef SSD1306Wire_h
 32 | #define SSD1306Wire_h
 33 | 
 34 | #include "OLEDDisplay.h"
 35 | #include <Wire.h>
 36 | 
 37 | #ifdef ARDUINO_ARCH_AVR
 38 | #define _min	min
 39 | #define _max	max
 40 | #endif
 41 | 
 42 | class SSD1306Wire : public OLEDDisplay {
 43 |   private:
 44 |       uint8_t             _address;
 45 |       uint8_t             _sda;
 46 |       uint8_t             _scl;
 47 |       bool                _doI2cAutoInit = false;
 48 | 
 49 |   public:
 50 |     SSD1306Wire(uint8_t _address, uint8_t _sda, uint8_t _scl, OLEDDISPLAY_GEOMETRY g = GEOMETRY_128_64) {
 51 |       setGeometry(g);
 52 | 
 53 |       this->_address = _address;
 54 |       this->_sda = _sda;
 55 |       this->_scl = _scl;
 56 |     }
 57 | 
 58 |     bool connect() {
 59 | #ifdef ARDUINO_ARCH_AVR 
 60 |       Wire.begin();
 61 | #else
 62 |       Wire.begin(this->_sda, this->_scl);
 63 | #endif
 64 |       // Let's use ~700khz if ESP8266 is in 160Mhz mode
 65 |       // this will be limited to ~400khz if the ESP8266 in 80Mhz mode.
 66 |       Wire.setClock(700000);
 67 |       return true;
 68 |     }
 69 | 
 70 |     void display(void) {
 71 |       initI2cIfNeccesary();
 72 |       const int x_offset = (128 - this->width()) / 2;
 73 |       #ifdef OLEDDISPLAY_DOUBLE_BUFFER
 74 |         uint8_t minBoundY = UINT8_MAX;
 75 |         uint8_t maxBoundY = 0;
 76 | 
 77 |         uint8_t minBoundX = UINT8_MAX;
 78 |         uint8_t maxBoundX = 0;
 79 |         uint8_t x, y;
 80 | 
 81 |         // Calculate the Y bounding box of changes
 82 |         // and copy buffer[pos] to buffer_back[pos];
 83 |         for (y = 0; y < (this->height() / 8); y++) {
 84 |           for (x = 0; x < this->width(); x++) {
 85 |            uint16_t pos = x + y * this->width();
 86 |            if (buffer[pos] != buffer_back[pos]) {
 87 |              minBoundY = _min(minBoundY, y);
 88 |              maxBoundY = _max(maxBoundY, y);
 89 |              minBoundX = _min(minBoundX, x);
 90 |              maxBoundX = _max(maxBoundX, x);
 91 |            }
 92 |            buffer_back[pos] = buffer[pos];
 93 |          }
 94 |          yield();
 95 |         }
 96 | 
 97 |         // If the minBoundY wasn't updated
 98 |         // we can savely assume that buffer_back[pos] == buffer[pos]
 99 |         // holdes true for all values of pos
100 | 
101 |         if (minBoundY == UINT8_MAX) return;
102 | 
103 |         sendCommand(COLUMNADDR);
104 |         sendCommand(x_offset + minBoundX);
105 |         sendCommand(x_offset + maxBoundX);
106 | 
107 |         sendCommand(PAGEADDR);
108 |         sendCommand(minBoundY);
109 |         sendCommand(maxBoundY);
110 | 
111 |         byte k = 0;
112 |         for (y = minBoundY; y <= maxBoundY; y++) {
113 |           for (x = minBoundX; x <= maxBoundX; x++) {
114 |             if (k == 0) {
115 |               Wire.beginTransmission(_address);
116 |               Wire.write(0x40);
117 |             }
118 | 
119 |             Wire.write(buffer[x + y * this->width()]);
120 |             k++;
121 |             if (k == 16)  {
122 |               Wire.endTransmission();
123 |               k = 0;
124 |             }
125 |           }
126 |           yield();
127 |         }
128 | 
129 |         if (k != 0) {
130 |           Wire.endTransmission();
131 |         }
132 |       #else
133 | 
134 |         sendCommand(COLUMNADDR);
135 |         sendCommand(x_offset);
136 |         sendCommand(x_offset + (this->width() - 1));
137 | 
138 |         sendCommand(PAGEADDR);
139 |         sendCommand(0x0);
140 | 
141 |         if (geometry == GEOMETRY_128_64) {
142 |           sendCommand(0x7);
143 |         } else if (geometry == GEOMETRY_128_32) {
144 |           sendCommand(0x3);
145 |         }
146 | 
147 |         for (uint16_t i=0; i < displayBufferSize; i++) {
148 |           Wire.beginTransmission(this->_address);
149 |           Wire.write(0x40);
150 |           for (uint8_t x = 0; x < 16; x++) {
151 |             Wire.write(buffer[i]);
152 |             i++;
153 |           }
154 |           i--;
155 |           Wire.endTransmission();
156 |         }
157 |       #endif
158 |     }
159 | 
160 |     void setI2cAutoInit(bool doI2cAutoInit) {
161 |       _doI2cAutoInit = doI2cAutoInit;
162 |     }
163 | 
164 |   private:
165 | 	int getBufferOffset(void) {
166 | 		return 0;
167 | 	}
168 |     inline void sendCommand(uint8_t command) __attribute__((always_inline)){
169 |       initI2cIfNeccesary();
170 |       Wire.beginTransmission(_address);
171 |       Wire.write(0x80);
172 |       Wire.write(command);
173 |       Wire.endTransmission();
174 |     }
175 | 
176 |     void initI2cIfNeccesary() {
177 |       if (_doI2cAutoInit) {
178 | #ifdef ARDUINO_ARCH_AVR 
179 |       	Wire.begin();
180 | #else
181 |       	Wire.begin(this->_sda, this->_scl);
182 | #endif
183 |       }
184 |     }
185 | 
186 | };
187 | 
188 | #endif
189 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/esp8266-oled-ssd1306-4.1.0/license:
--------------------------------------------------------------------------------
 1 | The MIT License (MIT)
 2 | 
 3 | Copyright (c) 2016 by Daniel Eichhorn
 4 | Copyright (c) 2016 by Fabrice Weinberg
 5 | 
 6 | Permission is hereby granted, free of charge, to any person obtaining a copy
 7 | of this software and associated documentation files (the "Software"), to deal
 8 | in the Software without restriction, including without limitation the rights
 9 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
10 | copies of the Software, and to permit persons to whom the Software is
11 | furnished to do so, subject to the following conditions:
12 | 
13 | The above copyright notice and this permission notice shall be included in all
14 | copies or substantial portions of the Software.
15 | 
16 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
17 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
18 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
19 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
20 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
21 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
22 | SOFTWARE.
23 | 
24 | See more at http://blog.squix.ch
25 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/my92xx-3.0.3/my92xx.cpp:
--------------------------------------------------------------------------------
  1 | /*
  2 | 
  3 | MY92XX LED Driver for Arduino
  4 | Based on the C driver by MaiKe Labs
  5 | 
  6 | Copyright (c) 2016 - 2026 MaiKe Labs
  7 | Copyright (C) 2017 - 2018 Xose Pérez for the Arduino compatible library
  8 | 
  9 | This program is free software: you can redistribute it and/or modify
 10 | it under the terms of the GNU General Public License as published by
 11 | the Free Software Foundation, either version 3 of the License, or
 12 | (at your option) any later version.
 13 | 
 14 | This program is distributed in the hope that it will be useful,
 15 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 16 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 17 | GNU General Public License for more details.
 18 | 
 19 | You should have received a copy of the GNU General Public License
 20 | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 21 | 
 22 | */
 23 | 
 24 | #include "my92xx.h"
 25 | 
 26 | #if ARDUINO_ARCH_ESP8266
 27 | 
 28 |     extern "C" {
 29 |         void os_delay_us(unsigned int);
 30 |     }
 31 | 
 32 | #elif ARDUINO_ARCH_AVR
 33 | 
 34 |     #define os_delay_us delayMicroseconds
 35 | 
 36 | #endif
 37 | 
 38 | void my92xx::_di_pulse(unsigned int times) {
 39 | 	for (unsigned int i = 0; i < times; i++) {
 40 | 		digitalWrite(_pin_di, HIGH);
 41 | 		digitalWrite(_pin_di, LOW);
 42 | 	}
 43 | }
 44 | 
 45 | void my92xx::_dcki_pulse(unsigned int times) {
 46 | 	for (unsigned int i = 0; i < times; i++) {
 47 | 		digitalWrite(_pin_dcki, HIGH);
 48 | 		digitalWrite(_pin_dcki, LOW);
 49 | 	}
 50 | }
 51 | 
 52 | void my92xx::_write(unsigned int data, unsigned char bit_length) {
 53 | 
 54 |     unsigned int mask = (0x01 << (bit_length - 1));
 55 | 
 56 |     for (unsigned int i = 0; i < bit_length / 2; i++) {
 57 |         digitalWrite(_pin_dcki, LOW);
 58 |         digitalWrite(_pin_di, (data & mask) ? HIGH : LOW);
 59 |         digitalWrite(_pin_dcki, HIGH);
 60 |         data = data << 1;
 61 |         digitalWrite(_pin_di, (data & mask) ? HIGH : LOW);
 62 |         digitalWrite(_pin_dcki, LOW);
 63 |         digitalWrite(_pin_di, LOW);
 64 |         data = data << 1;
 65 |     }
 66 | 
 67 | }
 68 | 
 69 | void my92xx::_set_cmd(my92xx_cmd_t command) {
 70 | 
 71 | 	// ets_intr_lock();
 72 | 
 73 |     // TStop > 12us.
 74 | 	os_delay_us(12);
 75 | 
 76 |     // Send 12 DI pulse, after 6 pulse's falling edge store duty data, and 12
 77 | 	// pulse's rising edge convert to command mode.
 78 | 	_di_pulse(12);
 79 | 
 80 |     // Delay >12us, begin send CMD data
 81 | 	os_delay_us(12);
 82 | 
 83 |     // Send CMD data
 84 |     unsigned char command_data = *(unsigned char *) (&command);
 85 |     for (unsigned char i=0; i<_chips; i++) {
 86 |         _write(command_data, 8);
 87 |     }
 88 | 
 89 | 	// TStart > 12us. Delay 12 us.
 90 | 	os_delay_us(12);
 91 | 
 92 |     // Send 16 DI pulse，at 14 pulse's falling edge store CMD data, and
 93 | 	// at 16 pulse's falling edge convert to duty mode.
 94 | 	_di_pulse(16);
 95 | 
 96 |     // TStop > 12us.
 97 | 	os_delay_us(12);
 98 | 
 99 |     // ets_intr_unlock();
100 | 
101 | }
102 | 
103 | void my92xx::_send() {
104 | 
105 |     #ifdef DEBUG_MY92XX
106 |         DEBUG_MSG_MY92XX("[MY92XX] Refresh: %s (", _state ? "ON" : "OFF");
107 |         for (unsigned char channel = 0; channel < _channels; channel++) {
108 |             DEBUG_MSG_MY92XX(" %d", _value[channel]);
109 |         }
110 |         DEBUG_MSG_MY92XX(" )\n");
111 |     #endif
112 | 
113 |     unsigned char bit_length = 8;
114 | 	switch (_command.bit_width) {
115 | 		case MY92XX_CMD_BIT_WIDTH_16:
116 | 			bit_length = 16;
117 | 			break;
118 | 		case MY92XX_CMD_BIT_WIDTH_14:
119 | 			bit_length = 14;
120 | 			break;
121 | 		case MY92XX_CMD_BIT_WIDTH_12:
122 | 			bit_length = 12;
123 | 			break;
124 | 		case MY92XX_CMD_BIT_WIDTH_8:
125 | 			bit_length = 8;
126 | 			break;
127 | 		default:
128 | 			bit_length = 8;
129 | 			break;
130 | 	}
131 | 
132 | 	// ets_intr_lock();
133 | 
134 |     // TStop > 12us.
135 | 	os_delay_us(12);
136 | 
137 |     // Send color data
138 |     for (unsigned char channel = 0; channel < _channels; channel++) {
139 |         _write(_state ? _value[channel] : 0, bit_length);
140 | 	}
141 | 
142 | 	// TStart > 12us. Ready for send DI pulse.
143 | 	os_delay_us(12);
144 | 
145 | 	// Send 8 DI pulse. After 8 pulse falling edge, store old data.
146 | 	_di_pulse(8);
147 | 
148 | 	// TStop > 12us.
149 | 	os_delay_us(12);
150 | 
151 | 	// ets_intr_unlock();
152 | 
153 | }
154 | 
155 | // -----------------------------------------------------------------------------
156 | 
157 | unsigned char my92xx::getChannels() {
158 |     return _channels;
159 | }
160 | 
161 | void my92xx::setChannel(unsigned char channel, unsigned int value) {
162 |     if (0 <= channel && channel < _channels) {
163 |         _value[channel] = value;
164 |     }
165 | }
166 | 
167 | unsigned int my92xx::getChannel(unsigned char channel) {
168 |     if (0 <= channel && channel < _channels) {
169 |         return _value[channel];
170 |     }
171 |     return 0;
172 | }
173 | 
174 | bool my92xx::getState() {
175 |     return _state;
176 | }
177 | 
178 | void my92xx::setState(bool state) {
179 |     _state = state;
180 | }
181 | 
182 | void my92xx::update() {
183 |     _send();
184 | }
185 | 
186 | // -----------------------------------------------------------------------------
187 | 
188 | my92xx::my92xx(my92xx_model_t model, unsigned char chips, unsigned char di, unsigned char dcki, my92xx_cmd_t command) {
189 | 
190 |     _model = model;
191 |     _chips = chips;
192 | 	_pin_di = di;
193 | 	_pin_dcki = dcki;
194 |     _command = command;
195 | 
196 |     // Init channels
197 |     if (_model == MY92XX_MODEL_MY9291) {
198 |         _channels = 4 * _chips;
199 |     } else if (_model == MY92XX_MODEL_MY9231) {
200 |         _channels = 3 * _chips;
201 |     }
202 |     _value = new uint16_t[_channels];
203 |     for (unsigned char i=0; i<_channels; i++) {
204 |         _value[i] = 0;
205 |     }
206 | 
207 |     // Init GPIO
208 | 	pinMode(_pin_di, OUTPUT);
209 | 	pinMode(_pin_dcki, OUTPUT);
210 | 	digitalWrite(_pin_di, LOW);
211 | 	digitalWrite(_pin_dcki, LOW);
212 | 
213 | 	// Clear all duty register
214 |    	_dcki_pulse(32 * _chips);
215 | 
216 |     // Send init command
217 | 	_set_cmd(command);
218 | 
219 |     DEBUG_MSG_MY92XX("[MY92XX] Initialized\n");
220 | 
221 | }
222 | 


--------------------------------------------------------------------------------
/esp8266_deauther/src/my92xx-3.0.3/my92xx.h:
--------------------------------------------------------------------------------
  1 | /*
  2 | 
  3 | MY92XX LED Driver for Arduino
  4 | Based on the C driver by MaiKe Labs
  5 | 
  6 | Copyright (c) 2016 - 2026 MaiKe Labs
  7 | Copyright (C) 2017 - 2018 Xose Pérez for the Arduino compatible library
  8 | 
  9 | This program is free software: you can redistribute it and/or modify
 10 | it under the terms of the GNU General Public License as published by
 11 | the Free Software Foundation, either version 3 of the License, or
 12 | (at your option) any later version.
 13 | 
 14 | This program is distributed in the hope that it will be useful,
 15 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 16 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 17 | GNU General Public License for more details.
 18 | 
 19 | You should have received a copy of the GNU General Public License
 20 | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 21 | 
 22 | */
 23 | 
 24 | #ifndef _my92xx_h
 25 | #define _my92xx_h
 26 | 
 27 | #include <Arduino.h>
 28 | 
 29 | #ifdef DEBUG_MY92XX
 30 |     #if ARDUINO_ARCH_ESP8266
 31 |         #define DEBUG_MSG_MY92XX(...) DEBUG_MY92XX.printf( __VA_ARGS__ )
 32 |     #elif ARDUINO_ARCH_AVR
 33 |         #define DEBUG_MSG_MY92XX(...) { char buffer[80]; snprintf(buffer, sizeof(buffer),  __VA_ARGS__ ); DEBUG_MY92XX.print(buffer); }
 34 |     #endif
 35 | #else
 36 |     #define DEBUG_MSG_MY92XX(...)
 37 | #endif
 38 | 
 39 | typedef enum my92xx_model_t {
 40 |         MY92XX_MODEL_MY9291 = 0X00,
 41 |         MY92XX_MODEL_MY9231 = 0X01,
 42 | } my92xx_model_t;
 43 | 
 44 | typedef enum my92xx_cmd_one_shot_t {
 45 |         MY92XX_CMD_ONE_SHOT_DISABLE = 0X00,
 46 |         MY92XX_CMD_ONE_SHOT_ENFORCE = 0X01,
 47 | } my92xx_cmd_one_shot_t;
 48 | 
 49 | typedef enum my92xx_cmd_reaction_t {
 50 |         MY92XX_CMD_REACTION_FAST = 0X00,
 51 |         MY92XX_CMD_REACTION_SLOW = 0X01,
 52 | } my92xx_cmd_reaction_t;
 53 | 
 54 | typedef enum my92xx_cmd_bit_width_t {
 55 |         MY92XX_CMD_BIT_WIDTH_16 = 0X00,
 56 |         MY92XX_CMD_BIT_WIDTH_14 = 0X01,
 57 |         MY92XX_CMD_BIT_WIDTH_12 = 0X02,
 58 |         MY92XX_CMD_BIT_WIDTH_8 = 0X03,
 59 | } my92xx_cmd_bit_width_t;
 60 | 
 61 | typedef enum my92xx_cmd_frequency_t {
 62 |         MY92XX_CMD_FREQUENCY_DIVIDE_1 = 0X00,
 63 |         MY92XX_CMD_FREQUENCY_DIVIDE_4 = 0X01,
 64 |         MY92XX_CMD_FREQUENCY_DIVIDE_16 = 0X02,
 65 |         MY92XX_CMD_FREQUENCY_DIVIDE_64 = 0X03,
 66 | } my92xx_cmd_frequency_t;
 67 | 
 68 | typedef enum my92xx_cmd_scatter_t {
 69 |         MY92XX_CMD_SCATTER_APDM = 0X00,
 70 |         MY92XX_CMD_SCATTER_PWM = 0X01,
 71 | } my92xx_cmd_scatter_t;
 72 | 
 73 | typedef struct {
 74 |         my92xx_cmd_scatter_t scatter:1;
 75 |         my92xx_cmd_frequency_t frequency:2;
 76 |         my92xx_cmd_bit_width_t bit_width:2;
 77 |         my92xx_cmd_reaction_t reaction:1;
 78 |         my92xx_cmd_one_shot_t one_shot:1;
 79 |         unsigned char resv:1;
 80 | } __attribute__ ((aligned(1), packed)) my92xx_cmd_t;
 81 | 
 82 | #define MY92XX_COMMAND_DEFAULT { \
 83 |     .scatter = MY92XX_CMD_SCATTER_APDM, \
 84 |     .frequency = MY92XX_CMD_FREQUENCY_DIVIDE_1, \
 85 |     .bit_width = MY92XX_CMD_BIT_WIDTH_8, \
 86 |     .reaction = MY92XX_CMD_REACTION_FAST, \
 87 |     .one_shot = MY92XX_CMD_ONE_SHOT_DISABLE, \
 88 |     .resv = 0 \
 89 | }
 90 | 
 91 | class my92xx {
 92 | 
 93 |     public:
 94 | 
 95 |         my92xx(my92xx_model_t model, unsigned char chips, unsigned char di, unsigned char dcki, my92xx_cmd_t command);
 96 |         unsigned char getChannels();
 97 |         void setChannel(unsigned char channel, unsigned int value);
 98 |         unsigned int getChannel(unsigned char channel);
 99 |         void setState(bool state);
100 |         bool getState();
101 |         void update();
102 | 
103 |     private:
104 | 
105 |         void _di_pulse(unsigned int times);
106 |         void _dcki_pulse(unsigned int times);
107 |         void _set_cmd(my92xx_cmd_t command);
108 |         void _send();
109 |         void _write(unsigned int data, unsigned char bit_length);
110 | 
111 |         my92xx_cmd_t _command;
112 |         my92xx_model_t _model = MY92XX_MODEL_MY9291;
113 |         unsigned char _chips = 1;
114 |         unsigned char _channels;
115 |         uint16_t * _value;
116 |         bool _state = false;
117 |         unsigned char _pin_di;
118 |         unsigned char _pin_dcki;
119 | 
120 | 
121 | };
122 | 
123 | #endif
124 | 


--------------------------------------------------------------------------------
/esp8266_deauther/wifi.h:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | #pragma once
 4 | 
 5 | #include <Arduino.h>
 6 | 
 7 | namespace wifi {
 8 |     void begin();
 9 | 
10 |     String getMode();
11 |     void printStatus();
12 | 
13 |     void startNewAP(String path, String ssid, String password, uint8_t ch, bool hidden, bool captivePortal);
14 |     // void startAP(String path);
15 |     void startAP();
16 | 
17 |     void stopAP();
18 |     void resumeAP();
19 | 
20 |     void update();
21 | }


--------------------------------------------------------------------------------
/settings.md:
--------------------------------------------------------------------------------
  1 | # Settings
  2 | 
  3 | **Overview**
  4 |   - [`version`](#version)
  5 |   - [`ssid`](#ssid)
  6 |   - [`password`](#password)
  7 |   - [`channel`](#channel)
  8 |   - [`hidden`](#hidden)
  9 |   - [`captivePortal`](#captiveportal)
 10 |   - [`lang`](#lang)
 11 |   - [`autosave`](#autosave)
 12 |   - [`autosaveTime`](#autosave-time)
 13 |   - [`displayInterface`](#display-interface)
 14 |   - [`displayTimeout`](#displaytimeout)
 15 |   - [`serialInterface`](#serial-interface)
 16 |   - [`serialEcho`](#serial-echo)
 17 |   - [`webInterface`](#web-interface)
 18 |   - [`webSpiffs`](#web-spiffs)
 19 |   - [`ledEnabled`](#ledEnabled)
 20 |   - [`maxCh`](#max-ch)
 21 |   - [`macAP`](#macap)
 22 |   - [`macSt`](#macst)
 23 |   - [`chTime`](#ch-time)
 24 |   - [`minDeauths`](#mindeauths)
 25 |   - [`attackTimeout`](#attacktimeout)
 26 |   - [`deauthsPerTarget`](#deauths-per-target)
 27 |   - [`deauthReason`](#deauth-reason)
 28 |   - [`beaconChannel`](#beacon-channel)
 29 |   - [`beaconInterval`](#beacon-interval)
 30 |   - [`randomTx`](#randomtx)
 31 |   - [`probesPerSSID`](#probesperssid)
 32 |   
 33 | ## VERSION
 34 | `String version = VERSION;`  
 35 | Version number, i.e. `v2.0`.  
 36 | **PLEASE NOTE** that this setting can only be changed in the source code.  
 37 | 
 38 | ## SSID
 39 | `String ssid = "pwned";`  
 40 | SSID of access point used for the web interface (if enabled).  
 41 | The length must be between 1 and 31 characters.  
 42 | 
 43 | ## PASSWORD
 44 | `String password = "deauther";`  
 45 | Password of access point used for the web interface (if enabled).  
 46 | The length must be between 8 and 31 characters.  
 47 | 
 48 | ## CHANNEL
 49 | `uint8_t channel = 1;`  
 50 | Default WiFi channel that is used when starting.  
 51 | 
 52 | ## HIDDEN
 53 | `bool hidden = false`  
 54 | Hides the access point that is used for the web interface (if enabled).   
 55 | 
 56 | ## CAPTIVEPORTAL
 57 | `bool captivePortal = true;`  
 58 | Enables captive portal for access point (if enabled).  
 59 | 
 60 | ## LANG
 61 | `String lang = "en";`  
 62 | Default language for the web interface.  
 63 | Be sure the language file exists!  
 64 | 
 65 | ## AUTOSAVE
 66 | `bool autosave = true;`  
 67 | Enables automatic saving of SSIDs, device names and settings.  
 68 | 
 69 | ## AUTOSAVE-TIME
 70 | `uint32_t autosaveTime = 30000;`  
 71 | Time interval for automatic saving in milliseconds.  
 72 | 
 73 | ## DISPLAY-INTERFACE
 74 | `bool displayInterface = false;`  
 75 | Enables display interface.  
 76 | 
 77 | ## DISPLAYTIMEOUT
 78 | `uint32_t displayTimeout = 600`  
 79 | Time in seconds after which the display turns off when inactive.  
 80 | To disable the display timeout, set it to 0.  
 81 | 
 82 | ## SERIAL-INTERFACE
 83 | `bool serialInterface = true;`  
 84 | Enables serial interface.  
 85 | 
 86 | ## SERIAL-ECHO
 87 | `bool serialEcho = true`  
 88 | Enables echo for each incoming message over serial.  
 89 | 
 90 | ## WEB-INTERFACE
 91 | `bool webInterface = false;`  
 92 | Enables web interface.  
 93 | 
 94 | ## WEB-SPIFFS
 95 | `bool webSpiffs = false`  
 96 | Enables SPIFFS for all web files.  
 97 | Can lead to longer loading times but it nice if you need to edit the web files regularly.  
 98 | 
 99 | ## LEDENABLED
100 | `bool ledEnabled = true`  
101 | Enables the (RGB) LED feature.  
102 | 
103 | ## MAX-CH
104 | `uint8_t maxCh = 13;`  
105 | Max channel to scan on.  
106 | US = 11, EU = 13, Japan = 14.  
107 | For more information click [here](https://en.wikipedia.org/wiki/List_of_WLAN_channels).  
108 | 
109 | ## MACAP
110 | `uint8_t* macAP;`  
111 | Mac address used for the access point mode.  
112 | Please note that the mac address will only replace the internal mac address when the accesspoint mode is enabled.  
113 | You can set a random mac address with `set macap random`.  
114 | 
115 | ## MACST
116 | `uint8_t* macSt;`  
117 | Mac address used for the station mode.  
118 | Please note that the mac address will only replace the internal mac address when the station mode is enabled.  
119 | You can set a random mac address with `set macst random`.  
120 | 
121 | ## CH-TIME
122 | `uint16_t chTime = 384;`  
123 | Time for scanning one channel before going to the next in milliseconds (only if channel hopping is enabled).  
124 | 
125 | ## MINDEAUTHS
126 | `uint16_t minDeauths = 3`  
127 | Minimum number of deauthentication frames when scanning to change the LED to deauth mode.  
128 | 
129 | ## ATTACKTIMEOUT
130 | `uint32_t attackTimeout = 600`  
131 | After what amount of time (in seconds) the attack will stop automatically.  
132 | Set it to 0 to disable it.  
133 | 
134 | ## DEAUTHS-PER-TARGET
135 | `uint16_t deauthsPerTarget = 10;`  
136 | How many deauthentication and disassociation frames are sent out for each target.  
137 | 
138 | ## DEAUTH-REASON
139 | `uint8_t deauthReason = 1;`  
140 | The [reason code](https://www.cisco.com/assets/sol/sb/WAP371_Emulators/WAP371_Emulator_v1-0-1-5/help/Apx_ReasonCodes2.html) that is sent with the deauth frames to tell the target device why the connection will be closed.  
141 | 
142 | ## BEACON-CHANNEL
143 | `bool beaconChannel = false;`  
144 | If enabled, will sent all beacon and probe frames on different channels when running a beacon attack.  
145 | 
146 | ## BEACON-INTERVAL
147 | `bool beaconInterval = false;`  
148 | If set true, beacons will be sent out every second. If set to false, the interval will be 100ms. 
149 | A longer interval means more stability and less spamming of packets, but it could take longer 
150 | until the clients find the ssids when scanning.  
151 | 
152 | ## RANDOMTX
153 | `bool randomTX = false`  
154 | Enables randomized transmission power for sending out beacon and probe request frames.  
155 | 
156 | ## PROBESPERSSID
157 | `uint8_t probesPerSSID = 1`  
158 | How many probe request frames are sent for each SSID.     
159 | 


--------------------------------------------------------------------------------
/utils/arduino-cli-compile.py:
--------------------------------------------------------------------------------
 1 | #!/usr/bin/env python3
 2 | 
 3 | # inside esp8266_deauther/esp8266_deauther
 4 | # call this script
 5 | # python3 ../utils/arduino-cli-compile.py 2.5.0
 6 | 
 7 | import subprocess
 8 | import os
 9 | import sys
10 | 
11 | boards = [
12 |     "NODEMCU",
13 |     "WEMOS_D1_MINI",
14 |     "HACKHELD_VEGA",
15 |     "MALTRONICS",
16 |     "DISPLAY_EXAMPLE_I2C",
17 |     "DISPLAY_EXAMPLE_SPI",
18 |     "DSTIKE_DEAUTHER_V1",
19 |     "DSTIKE_DEAUTHER_V2",
20 |     "DSTIKE_DEAUTHER_V3",
21 |     "DSTIKE_DEAUTHER_V3_5",
22 |     "DSTIKE_D_DUINO_B_V5_LED_RING",
23 |     "DSTIKE_DEAUTHER_BOY",
24 |     "DSTIKE_NODEMCU_07",
25 |     "DSTIKE_NODEMCU_07_V2",
26 |     "DSTIKE_DEAUTHER_OLED",
27 |     "DSTIKE_DEAUTHER_OLED_V1_5_S",
28 |     "DSTIKE_DEAUTHER_OLED_V1_5",
29 |     "DSTIKE_DEAUTHER_OLED_V2",
30 |     "DSTIKE_DEAUTHER_OLED_V2_5",
31 |     "DSTIKE_DEAUTHER_OLED_V3",
32 |     "DSTIKE_DEAUTHER_OLED_V3_5",
33 |     "DSTIKE_DEAUTHER_OLED_V4",
34 |     "DSTIKE_DEAUTHER_OLED_V5",
35 |     "DSTIKE_DEAUTHER_OLED_V6",
36 |     "DSTIKE_DEAUTHER_MOSTER",
37 |     "DSTIKE_DEAUTHER_MOSTER_V2",
38 |     "DSTIKE_DEAUTHER_MOSTER_V3",
39 |     "DSTIKE_DEAUTHER_MOSTER_V4",
40 |     "DSTIKE_DEAUTHER_MOSTER_V5",
41 |     "DSTIKE_USB_DEAUTHER",
42 |     "DSTIKE_USB_DEAUTHER_V2",
43 |     "DSTIKE_DEAUTHER_WATCH",
44 |     "DSTIKE_DEAUTHER_WATCH_V2",
45 |     "DSTIKE_DEAUTHER_MINI",
46 |     "DSTIKE_DEAUTHER_MINI_EVO",
47 |     "LYASI_7W_E27_LAMP",
48 |     "AVATAR_5W_E14_LAMP",
49 | ]
50 | 
51 | version = sys.argv[1]
52 | 
53 | folder = f"../build_{version}"
54 | os.system(f"mkdir {folder}")
55 | 
56 | for board in boards:
57 |     print(f"Compiling {board}...", flush=True)
58 | 
59 |     if os.path.exists(f"{folder}/esp8266_deauther_{version}_{board}.bin"):
60 |         print("Already compiled")
61 |         continue
62 | 
63 |     os.system(f"arduino-cli cache clean")
64 |     command = f"arduino-cli compile --fqbn deauther:esp8266:generic --build-property \"build.extra_flags=-DESP8266 -D{board}\" --output-dir {folder}"
65 |     process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
66 |     process.wait()
67 |     os.system(
68 |         f"mv {folder}/esp8266_deauther.ino.bin {folder}/esp8266_deauther_{version}_{board}.bin")
69 |     print(f"OK")
70 | 
71 | os.system(f"rm {folder}/esp8266_deauther.ino.elf")
72 | os.system(f"rm {folder}/esp8266_deauther.ino.map")
73 | 
74 | print("Finished :)")
75 | 


--------------------------------------------------------------------------------
/utils/old_web_converter/convert_all.sh:
--------------------------------------------------------------------------------
 1 | #!/bin/bash
 2 | 
 3 | #
 4 | # This script walks through the html folder and minify all JS, HTML and CSS files. It also generates
 5 | # the corresponding constants that is added to the data.h file on esp8266_deauther folder.
 6 | #
 7 | # @Author Erick B. Tedeschi < erickbt86 [at] gmail [dot] com >
 8 | #
 9 | 
10 | outputfile="$(pwd)/data_h_temp"
11 | 
12 | rm $outputfile
13 | 
14 | function minify_html_css {
15 |     file=$1
16 |     curl -X POST -s --data-urlencode "input@$file" http://html-minifier.com/raw > /tmp/converter.temp
17 | }
18 | 
19 | function minify_js {
20 |     file=$1
21 |     curl -X POST -s --data-urlencode "input@$file" https://javascript-minifier.com/raw > /tmp/converter.temp
22 | }
23 | 
24 | function ascii2hexCstyle {
25 |     file_name=$(constFileName $1)
26 |     result=$(cat /tmp/converter.temp | hexdump -ve '1/1 "0x%.2x,"')
27 |     result=$(echo $result | sed 's/,$//')
28 |     echo "const char data_${file_name}[] PROGMEM = {$result};"
29 | }
30 | 
31 | function constFileName {
32 |    extension=$(echo $1 | egrep -io "(css|js|html)$" | tr "[:lower:]" "[:upper:]")
33 |    file=$(echo $1 | sed 's/\.css//' | sed 's/\.html//' | sed 's/\.js//' | sed 's/\.\///' | tr '/' '_' | tr '.' '_')
34 |    echo $file$extension
35 | }
36 | 
37 | 
38 | cd html
39 | file_list=$(find . -type f)
40 | 
41 | for file in $file_list; do
42 |   echo "Processing: $file"
43 |   if [[ "$file" == *.js ]]; then
44 |     echo "-> JS minifier"
45 |     minify_js $file
46 |     ascii2hexCstyle $file >> $outputfile
47 |   elif [[ "$file" == *.html ]] || [[ "$file" == *.css ]]; then
48 |     echo "-> HTML and CSS minifier"
49 |     minify_html_css $file
50 |     ascii2hexCstyle $file >> $outputfile
51 |   else
52 |     echo "-> without minifier"
53 |     cat $file > /tmp/converter.temp
54 |     ascii2hexCstyle $file >> $outputfile
55 |   fi
56 |   sleep 1
57 | done
58 | 


--------------------------------------------------------------------------------
/utils/old_web_converter/converter.html:
--------------------------------------------------------------------------------
 1 | <!Doctype html>
 2 | <html>
 3 | 	<head>
 4 | 		<meta charset="utf-8">
 5 | 		<title>Byte Converter</title>
 6 | 		<meta name="description" content="OConvert Text into Hex-Bytes">
 7 | 		<meta name="author" content="Spacehuhn - Stefan Kremser">
 8 | 		<meta name="viewport" content="width=device-width, initial-scale=1"> 
 9 | 		<link rel="stylesheet" href="style.css">
10 | 		<script src="jquery-3.2.1.min.js"></script>
11 | 		<style>
12 | 			textarea{
13 | 				width: 96%;
14 | 				height: 350px;
15 | 			}
16 | 		</style>
17 | 	</head>
18 | 	<body>
19 | 
20 | 		<nav>
21 | 			<a href="index.html">Converter</a>
22 | 			<a href="https://github.com/spacehuhn" class="right">GitHub</a>
23 | 		</nav>
24 | 		
25 | 		<div class="container">
26 | 		
27 | 			<div class="row">
28 | 				<div class="col-12">
29 | 					<h1 class="header">Text to Byte Array Converter</h1>
30 | 					<p>
31 | 						Please use <a href="https://htmlcompressor.com/compressor/" target="_blank">HTMLCompressor</a> (or something similar) first to get your HTML, CSS and JS minified.<br />
32 | 						Every saved byte can improve the stability of the ESP8266's webserver!
33 | 					</p>
34 | 				</div>
35 | 			</div>
36 | 			<div class="row">
37 | 				<div class="col-6">
38 | 					<textarea id="input"></textarea>
39 | 				</div>
40 | 				<div class="col-6">
41 | 					<textarea id="output" onclick="this.focus();this.select()" readonly="readonly"></textarea>
42 | 				</div>
43 | 			</div>
44 | 			<div class="row">
45 | 				<div class="col-12">
46 | 					<button onclick="convert()" class="fullWidth button-primary">convert</button>
47 | 				</div>
48 | 			</div>
49 | 			<div class="row">
50 | 				<div class="col-12">
51 | 					<p>Length: <span id="info_len">0</span> Bytes</p>
52 | 				</div>
53 | 			</div>
54 | 					
55 | 		</div>
56 | 		
57 | 		<script>
58 | 			String.prototype.convertToHex = function (delim) {
59 | 				  return this.split("").map(function(c) {
60 | 					  return ("0" + c.charCodeAt(0).toString(16)).slice(-2);
61 | 				  }).join(delim || "");
62 | 			  };
63 | 			  
64 | 			function convert(){
65 | 				var input = $('#input').val().convertToHex(",0x");
66 | 				$('#output').val("0x"+input);
67 | 				$('#info_len').html((input.match(new RegExp(",", "g")) || []).length + 1);
68 | 			}
69 | 		</script>
70 | 	</body>
71 | </html>
72 | 


--------------------------------------------------------------------------------
/utils/old_web_converter/readme.md:
--------------------------------------------------------------------------------
 1 | # How to update files inside html folder?
 2 | The files related to the Frontend of ESP8266_Deauther are inside html folder.
 3 | To reflect on the firmware it needs to be: minified, converted to hex and updated on data.h on esp8266_deauther folder on the root of this project.
 4 | 
 5 | The following process can be used:
 6 | ## Script Mode (Linux/Mac)
 7 | 
 8 | **1** Update the desired files on ./html folder
 9 | **2** at the command line run the shell script: ./convert_all.sh
10 | **3** open the generated file "data_h_temp" and copy the content (CTRL+C)
11 | **4** Go to data.h and replace the content between the comments like below:
12 | ```c
13 | /* constants generated by convert_all.sh - start */
14 | const char data_apscanHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x43...
15 | const char data_attackHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x43...
16 | const char data_errorHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x43,...
17 | const char data_indexHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x43,...
18 | const char data_infoHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x43,0...
19 | const char data_js_apscanJS[] PROGMEM = {0x66,0x75,0x6e,0x63,0x7...
20 | const char data_js_attackJS[] PROGMEM = {0x66,0x75,0x6e,0x63,0x7...
21 | const char data_js_functionsJS[] PROGMEM = {0x66,0x75,0x6e,0x63,...
22 | const char data_js_settingsJS[] PROGMEM = {0x66,0x75,0x6e,0x63,0...
23 | const char data_js_stationsJS[] PROGMEM = {0x66,0x75,0x6e,0x63,0...
24 | const char data_license[] PROGMEM = {0x43,0x6f,0x70,0x79,0x72,0x...
25 | const char data_settingsHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x...
26 | const char data_stationsHTML[] PROGMEM = {0x3c,0x21,0x44,0x4f,0x...
27 | const char data_styleCSS[] PROGMEM = {0x2f,0x2a,0x20,0x47,0x6c,0...
28 | /* constants generated by convert_all.sh - end */
29 | ```
30 | 
31 | ## Manual mode
32 | 
33 | **1** Use a minifier (e.g. htmlcompressor.com) to get your files as small as possible  
34 | **2** Open converter.html  
35 | **3** Paste the code in the left textfield  
36 | **4** Press Convert  
37 | **5** Copy the results from the right textfield  
38 | **6** Go to data.h and replace the array of the changed file with the copied bytes  
39 | 
40 | **Now compile and upload your new sketch :)**
41 | 


--------------------------------------------------------------------------------
/utils/vendor_list_updater/README.md:
--------------------------------------------------------------------------------
1 | `python3 update_manuf.py -o oui.h -s`  
2 | 
3 | This Python script updates the manufacturer list oui.h in deauther2.0/esp8266_deauther.  
4 | 
5 | The -s option is for creating a limited list of the top 1000 vendors. That is enough for most devices and it makes the list fit in 512kb.  


--------------------------------------------------------------------------------
/utils/vendor_list_updater/update_manuf.py:
--------------------------------------------------------------------------------
  1 | #/usr/bin/env python3
  2 | # This scripts downloads the last OUI manufaturer file from the Whireshark
  3 | # project and converts it to esp8266_deauther format
  4 | #
  5 | # Copyright (c) 2018 xdavidhu
  6 | # https://github.com/xdavidhu/
  7 | #
  8 | 
  9 | import argparse
 10 | from urllib.request import urlopen
 11 | 
 12 | WS_MANUF_FILE_URL = "https://code.wireshark.org/review/gitweb?p=wireshark.git;a=blob_plain;f=manuf"
 13 | macs = []
 14 | vendors = []
 15 | tempVendors = []
 16 | 
 17 | def padhex(s):
 18 |     return '0x' + s[2:].zfill(2)
 19 | 
 20 | def parse_options():
 21 |     parser = argparse.ArgumentParser()
 22 |     parser.add_argument("-o", "--output", help="Output file name for macs list", required=True)
 23 |     parser.add_argument("-s", "--small", action='store_true', help="Generate small file only with most used 10 000 macs")
 24 |     parser.add_argument("-u", "--url", help="Wireshark oui/manuf file url")
 25 | 
 26 |     opt = parser.parse_args()
 27 | 
 28 |     return opt
 29 | 
 30 | def generate_lists(url, output, small):
 31 | 
 32 |     global tempVendors
 33 |     global vendors
 34 |     global macs
 35 | 
 36 |     if url:
 37 |         data = urlopen(url)
 38 |     else:
 39 |         data = urlopen(WS_MANUF_FILE_URL)
 40 | 
 41 |     lines = data.readlines()
 42 | 
 43 |     for line in lines:
 44 |         line = line.decode()
 45 |         if line.startswith('#') or line.startswith('\n'):
 46 |             continue
 47 |         mac, short_desc, *rest = line.strip().split('\t')
 48 |         short_desc = short_desc[0:8]
 49 |         short_desc = short_desc.encode("ascii", "ignore").decode()
 50 |         mac_octects = len(mac.split(':'))
 51 |         if mac_octects == 6:
 52 |             continue
 53 |         else:
 54 |             inList = False
 55 |             for vendor in tempVendors:
 56 |                 if vendor[0] == short_desc:
 57 |                     inList = True
 58 |                     vendor[1] += 1
 59 |                     break
 60 |             if not inList:
 61 |                 tempVendors.append([short_desc, 1])
 62 | 
 63 |     if small:
 64 |         tempVendors.sort(key=lambda x: x[1])
 65 |         tempVendors.reverse()
 66 |         #tempVendors = tempVendors[:1000]
 67 | 
 68 |     for vendor in tempVendors:
 69 |         vendors.append(vendor[0])
 70 | 
 71 |     for line in lines:
 72 |         line = line.decode()
 73 |         if line.startswith('#') or line.startswith('\n'):
 74 |             continue
 75 |         mac, short_desc, *rest = line.strip().split('\t')
 76 |         short_desc = short_desc[0:8]
 77 |         short_desc = short_desc.encode("ascii", "ignore").decode()
 78 |         mac_octects = len(mac.split(':'))
 79 |         if mac_octects == 6:
 80 |             continue
 81 |         else:
 82 |             for vendor in vendors:
 83 |                 if vendor == short_desc:
 84 |                     index = vendors.index(vendor)
 85 |                     macs.append([mac, index])
 86 | 
 87 |     generate_files(output)
 88 | 
 89 | 
 90 | def generate_files(output):
 91 |     global tempVendors
 92 |     global vendors
 93 |     global macs
 94 | 
 95 |     # 'vendors' list
 96 |     vendorsTxt = ""
 97 |     for vendor in vendors:
 98 |         vendor = vendor.ljust(8, '\0')
 99 |         hex_vendor = ", 0x".join("{:02x}".format(ord(c)) for c in vendor)
100 |         line = "0x" + hex_vendor
101 |         vendorsTxt += line + ",\n"
102 |     vendorsTxt = vendorsTxt[:-2] + "\n"
103 | 
104 |     # 'macs' list
105 |     macsTxt = ""
106 |     for mac in macs:
107 |         macaddr = mac[0]
108 |         vendorindex = mac[1]
109 |         (oc1, oc2, oc3) = macaddr.split(':')
110 |         if vendorindex > 255:
111 |             num = vendorindex
112 |             index_bytes = []
113 |             while num > 0:
114 |                 byte = num % 0x100
115 |                 index_bytes.append(byte)
116 |                 num //= 0x100
117 |             hex_index = ""
118 |             for byte in index_bytes:
119 |                 hex_index += padhex(hex(byte)) + ", "
120 |             hex_index = hex_index[:-2]
121 |         else:
122 |             hex_index = padhex(hex(vendorindex)) + ", 0x00"
123 |         line = "0x" + oc1.upper() + ", " + "0x" + oc2.upper() + ", " + "0x" + oc3.upper() + ", " + hex_index
124 |         macsTxt += line + ",\n"
125 |     macsTxt = macsTxt[:-2] + "\n"
126 | 
127 |     # Saving to file
128 |     if output:
129 |         with open(output, 'w') as out_file:
130 |             out_file.write("#ifndef oui_h\n#define oui_h\n/*\n  Based on Wireshark manufacturer database\n  source: https://www.wireshark.org/tools/oui-lookup.html\n  Wireshark is released under the GNU General Public License version 2\n*/\n\n#define ENABLE_MAC_LIST // comment out if you want to save memory\n\n")
131 |             out_file.write("const static uint8_t data_vendors[] PROGMEM = {\n#ifdef ENABLE_MAC_LIST\n")
132 |             out_file.write(vendorsTxt)
133 |             out_file.write("#endif\n};\n")
134 |             out_file.write("const static uint8_t data_macs[] PROGMEM = {\n#ifdef ENABLE_MAC_LIST\n")
135 |             out_file.write(macsTxt)
136 |             out_file.write("#endif\n};\n#endif")
137 |             out_file.close()
138 | 
139 | 
140 |     print("Done.")
141 | 
142 | if __name__ == "__main__":
143 |     options = parse_options()
144 |     generate_lists(options.url, options.output, options.small)
145 | 


--------------------------------------------------------------------------------
/utils/web_converter/css_html_js_minify/__init__.py:
--------------------------------------------------------------------------------
 1 | #!/usr/bin/env python3
 2 | # -*- coding: utf-8 -*-
 3 | # Created by: juancarlospaco
 4 | # GitHub Repo: https://github.com/juancarlospaco/css-html-js-minify
 5 | 
 6 | 
 7 | """CSS-HTML-JS-Minify.
 8 | 
 9 | Minifier for the Web.
10 | """
11 | 
12 | 
13 | from .minify import (process_single_html_file, process_single_js_file,
14 |                      process_single_css_file, html_minify, js_minify,
15 |                      css_minify)
16 | 
17 | 
18 | __version__ = '2.5.0'
19 | __license__ = 'GPLv3+ LGPLv3+'
20 | __author__ = 'Juan Carlos'
21 | __email__ = 'juancarlospaco@gmail.com'
22 | __url__ = 'https://github.com/juancarlospaco/css-html-js-minify'
23 | __source__ = ('https://raw.githubusercontent.com/juancarlospaco/'
24 |               'css-html-js-minify/master/css-html-js-minify.py')
25 | 
26 | 
27 | __all__ = ['__version__', '__license__', '__author__',
28 |            '__email__', '__url__', '__source__',
29 |            'process_single_html_file', 'process_single_js_file',
30 |            'process_single_css_file', 'html_minify', 'js_minify',
31 |            'css_minify', 'minify']
32 | 


--------------------------------------------------------------------------------
/utils/web_converter/readme.md:
--------------------------------------------------------------------------------
 1 | Use this converter to minify and gzip everything in the `web_interface` folder and put it in `esp8266_deauther/data/web/`.  
 2 | This script will also generate a new `webfiles.h` file and replace the old in `esp8266_deauther`.
 3 | 
 4 | Copyright goes to [@xdavidhu](http://github.com/xdavidhu/).  
 5 | 
 6 | **A few notes:**  
 7 | - you need python3 to run this script
 8 | - you need to install the anglerfish package: `sudo python3 -m pip install anglerfish`
 9 | - be sure to run the script from its current position
10 | - `.lang` files will always go in the `/lang` folder
11 | - `.js` files will always go int the `/js` folder
12 | - `.json` files will be ignored and not copied
13 | - only `.html` and `.css` will be minified before being gzipped (minifying JS can make problems)
14 | 


--------------------------------------------------------------------------------
/web_interface/attack.html:
--------------------------------------------------------------------------------
  1 | <!--- This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther -->
  2 | 
  3 | <!Doctype html>
  4 | <html>
  5 | 
  6 | <head>
  7 | 	<meta charset="UTF-8">
  8 | 	<meta name="viewport" content="width=device-width, initial-scale=0.8, minimal-ui">
  9 | 	<meta name="theme-color" content="#36393E">
 10 | 
 11 | 	<meta name="description" content="ESP8266 Deauther">
 12 | 	<title>ESP8266 Deauther</title>
 13 | 
 14 | 	<link rel="stylesheet" type="text/css" href="style.css">
 15 | 	<script src="js/site.js"></script>
 16 | 	<script src="js/attack.js"></script>
 17 | </head>
 18 | 
 19 | <body onload="loadLang()">
 20 | 	<nav>
 21 | 		<ul class="menu">
 22 | 			<li><a href="scan.html" data-translate="scan">Scan</a></li>
 23 | 			<li><a href="ssids.html" data-translate="ssids">SSIDs</a></li>
 24 | 			<li><a href="attack.html" data-translate="attacks">Attack</a></li>
 25 | 			<li><a href="settings.html" data-translate="settings">Settings</a></li>
 26 | 		</ul>
 27 | 	</nav>
 28 | 
 29 | 	<div id="status"></div>
 30 | 
 31 | 	<div class="container">
 32 | 		<div class="row">
 33 | 			<div class="col-12">
 34 | 				<h1 class="header" data-translate="attacks">Attacks</h1>
 35 | 
 36 | 				<p>
 37 | 					<span class="red" data-translate="info_span">INFO:</span><br>
 38 | 					<span data-translate="attack_info">
 39 | 						- You might lose connection when starting an attack!<br>
 40 | 						- You need to select a target for the deauth attack.<br>
 41 | 						- You need a saved SSID for the beacon and probe attack.<br>
 42 | 						- Click reload to refresh the packet rate.<br>
 43 | 					</span>
 44 | 					<span data-translate="info_disclaimer">In case of an unexpected error, please reload the site and
 45 | 						look at the serial monitor for further debugging.</span><br>
 46 | 				</p>
 47 | 				<p class="right">
 48 | 					<button onclick="stopAll()" data-translate="stop">stop</button>
 49 | 					<button onclick="load()" data-translate="reload">reload</button>
 50 | 				</p>
 51 | 				<table>
 52 | 					<tr>
 53 | 						<th data-translate="attacks">Attacks</th>
 54 | 						<th data-translate="targets">Targets</th>
 55 | 						<th>Pkts/s</th>
 56 | 						<th data-translate="start_stop">START / STOP</th>
 57 | 					</tr>
 58 | 					<tr>
 59 | 						<td>Deauth</td>
 60 | 						<td id="deauthTargets">0</td>
 61 | 						<td id="deauthPkts">0/0</td>
 62 | 						<td><button id="deauth" onclick="start(0)" class="select" data-translate="start">START</button>
 63 | 						</td>
 64 | 					</tr>
 65 | 					<tr>
 66 | 						<td>Beacon</td>
 67 | 						<td id="beaconTargets">0</td>
 68 | 						<td id="beaconPkts">0/0</td>
 69 | 						<td><button id="beacon" onclick="start(1)" class="select" data-translate="start">START</button>
 70 | 						</td>
 71 | 					</tr>
 72 | 					<tr>
 73 | 						<td>Probe</td>
 74 | 						<td id="probeTargets">0</td>
 75 | 						<td id="probePkts">0/0</td>
 76 | 						<td><button id="probe" onclick="start(2)" class="select" data-translate="start">START</button>
 77 | 						</td>
 78 | 					</tr>
 79 | 					<tr>
 80 | 						<td colspan="2">All Pkts/s:</td>
 81 | 						<td colspan="2" id="allpkts">0</td>
 82 | 					</tr>
 83 | 				</table>
 84 | 
 85 | 				<h2>Deauth</h2>
 86 | 				<p data-translate="deauth_desc">
 87 | 					Closes the connection of WiFi devices by sending deauthentication frames to access points and client
 88 | 					devices you selected.<br>
 89 | 					This is only possible because a lot of devices don't use the 802.11w-2009 standard that offers a
 90 | 					protection against this attack.<br>
 91 | 					Please only select one target! When you select multiple targets that run on different channels and
 92 | 					start the attack,
 93 | 					it will quickly switch between those channels and you have no chance to reconnect to the access
 94 | 					point that hosts this web interface.
 95 | 				</p>
 96 | 
 97 | 				<h2>Beacon</h2>
 98 | 				<p data-translate="beacon_desc">
 99 | 					Beacon packets are used to advertise access points. By continuously sending beacon packets out, it
100 | 					will look like you created new WiFi networks.<br>
101 | 					You can specify the network names under SSIDs.<br>
102 | 				</p>
103 | 
104 | 				<h2>Probe</h2>
105 | 				<p data-translate="probe_desc">
106 | 					Probe requests are sent by client devices to ask if a known network is nearby.<br>
107 | 					Use this attack to confuse WiFi trackers by asking for networks that you specified in the SSID
108 | 					list.<br>
109 | 					It's unlikely you will see any impact by this attack with your home network.<br>
110 | 				</p>
111 | 			</div>
112 | 		</div>
113 | 	</div>
114 | 	<footer>
115 | 		<span id="version">Version 2.6.1</span>
116 | 		<br>
117 | 		<br>
118 | 		<a href="http://deauther.maltronics.com" target="_blank">Wiki</a> | <a href="info.html">Credits</a>
119 | 	</footer>
120 | </body>
121 | 
122 | </html>


--------------------------------------------------------------------------------
/web_interface/attack.json:
--------------------------------------------------------------------------------
1 | [[false,0,0,0],[false,0,0,0],[false,0,0,0],0]


--------------------------------------------------------------------------------
/web_interface/index.html:
--------------------------------------------------------------------------------
 1 | <!--- This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther -->
 2 | 
 3 | <!Doctype html>
 4 | <html>
 5 | 
 6 | <head>
 7 | 	<meta charset="UTF-8">
 8 | 	<meta name="viewport" content="width=device-width, initial-scale=0.8, minimal-ui">
 9 | 	<meta name="theme-color" content="#36393E">
10 | 
11 | 	<meta name="description" content="ESP8266 Deauther">
12 | 	<title>ESP8266 Deauther</title>
13 | 
14 | 	<link rel="stylesheet" type="text/css" href="style.css">
15 | 	<script src="js/site.js"></script>
16 | </head>
17 | 
18 | <body onload="loadLang()">
19 | 	<div class="container">
20 | 		<div class="row">
21 | 			<div class="col-12">
22 | 				<h1 class="header" data-translate="warning">WARNING</h1>
23 | 				<p class="centered" data-translate="disclaimer">
24 | 					This project is a proof of concept for testing and educational purposes.<br>
25 | 					Neither the ESP8266, nor its SDK was meant or build for such purposes. Bugs can occur!<br>
26 | 					<br>
27 | 					Use it only against your own networks and devices!<br>
28 | 					<br>
29 | 					It uses valid Wi-Fi frames described in the IEEE 802.11 standard and does not block or disrupt any
30 | 					frequencies.<br>
31 | 					Please check the legal regulations in your country before using it.<br>
32 | 					<br>
33 | 					Please don't refer to this project as "jammer", as it undermines the real purpose of this
34 | 					project!<br>
35 | 					If you do, it only proves that you didn't understand anything of what this project stands for.<br>
36 | 					Publishing content about this without without a proper explanation shows that you only do it for the
37 | 					clicks,
38 | 					fame and/or money and have no respect for intellectual property, the community behind it and the
39 | 					fight for a better WiFi standard.<br>
40 | 					<br>
41 | 					For more information visit:<br>
42 | 					<a
43 | 						href="https://github.com/spacehuhntech/esp8266_deauther">github.com/spacehuhntech/esp8266_deauther</a>
44 | 				</p>
45 | 				<p class="centered bold">
46 | 					<a class="button" href="scan.html" data-translate="disclaimer-button">I have read and understood the
47 | 						notice above</a>
48 | 				</p>
49 | 			</div>
50 | 		</div>
51 | 	</div>
52 | 	<footer>
53 | 		<span id="version">Version 2.6.1</span>
54 | 		<br>
55 | 		<br>
56 | 		<a href="http://deauther.maltronics.com" target="_blank">Wiki</a> | <a href="info.html">Credits</a>
57 | 	</footer>
58 | </body>
59 | 
60 | </html>


--------------------------------------------------------------------------------
/web_interface/info.html:
--------------------------------------------------------------------------------
  1 | <!--- This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther -->
  2 | 
  3 | <!Doctype html>
  4 | <html>
  5 | 
  6 | <head>
  7 | 	<meta charset="UTF-8">
  8 | 	<meta name="viewport" content="width=device-width, initial-scale=0.8, minimal-ui">
  9 | 	<meta name="theme-color" content="#36393E">
 10 | 
 11 | 	<meta name="description" content="ESP8266 Deauther">
 12 | 	<title>ESP8266 Deauther</title>
 13 | 
 14 | 	<link rel="stylesheet" type="text/css" href="style.css">
 15 | 	<script src="js/site.js"></script>
 16 | </head>
 17 | 
 18 | <body onload="loadLang()">
 19 | 	<nav>
 20 | 		<ul class="menu">
 21 | 			<li><a href="scan.html" data-translate="scan">Scan</a></li>
 22 | 			<li><a href="ssids.html" data-translate="ssids">SSIDs</a></li>
 23 | 			<li><a href="attack.html" data-translate="attacks">Attack</a></li>
 24 | 			<li><a href="settings.html" data-translate="settings">Settings</a></li>
 25 | 		</ul>
 26 | 	</nav>
 27 | 
 28 | 	<div id="status"></div>
 29 | 
 30 | 	<div class="container">
 31 | 		<div class="row">
 32 | 			<div class="col-12">
 33 | 				<h1 class="header">Credits</h1>
 34 | 
 35 | 				<h2>Disclaimer</h2>
 36 | 				<p data-translate="disclaimer">
 37 | 					This project is a proof of concept for testing and educational purposes.<br>
 38 | 					Neither the ESP8266, nor its SDK was meant or build for such purposes. Bugs can occur!<br>
 39 | 					<br>
 40 | 					Use it only against your own networks and devices!<br>
 41 | 					<br>
 42 | 					It uses valid Wi-Fi frames described in the IEEE 802.11 standard and does not block or disrupt any
 43 | 					frequencies.<br>
 44 | 					Please check the legal regulations in your country before using it.<br>
 45 | 					<br>
 46 | 					Please don't refer to this project as "jammer", as it undermines the real purpose of this
 47 | 					project!<br>
 48 | 					If you do, it only proves that you didn't understand anything of what this project stands for.<br>
 49 | 					Publishing content about this without without a proper explanation shows that you only do it for the
 50 | 					clicks,
 51 | 					fame and/or money and have no respect for intellectual property, the community behind it and the
 52 | 					fight for a better WiFi standard.<br>
 53 | 					<br>
 54 | 					For more information visit:<br>
 55 | 					<a
 56 | 						href="https://github.com/spacehuhntech/esp8266_deauther">github.com/spacehuhntech/esp8266_deauther</a>
 57 | 				</p>
 58 | 
 59 | 				<h2>Acknowledgements</h2>
 60 | 				<p>
 61 | 					A huge thanks to:<br>
 62 | 				<ul>
 63 | 					<li><a href="http://github.com/deantonious" target="_blank">@deantonious</a></li>
 64 | 					<li><a href="http://github.com/jLynx" target="_blank">@jLynx</a></li>
 65 | 					<li><a href="http://github.com/lspoplove" target="_blank">@lspoplove</a></li>
 66 | 					<li><a href="http://github.com/schinfo" target="_blank">@schinfo</a></li>
 67 | 					<li><a href="http://github.com/tobozo" target="_blank">@tobozo</a></li>
 68 | 					<li><a href="http://github.com/xdavidhu" target="_blank">@xdavidhu</a></li>
 69 | 					<li><a href="http://github.com/PwnKitteh" target="_blank">@PwnKitteh</a></li>
 70 | 				</ul>
 71 | 				for helping out with various things regarding this project and keeping it alive!<br>
 72 | 				<br>
 73 | 				Also thanks to everyone working on the libraries used for this project:<br>
 74 | 				<ul>
 75 | 					<li><a href="https://github.com/ThingPulse/esp8266-oled-ssd1306"
 76 | 							target="_blank">esp8266-oled-ssd1306</a></li>
 77 | 					<li><a href="https://github.com/bblanchon/ArduinoJson" target="_blank">ArduinoJson</a></li>
 78 | 					<li><a href="https://github.com/adafruit/Adafruit_DotStar" target="_blank">Adafruit DotStar</a></li>
 79 | 					<li><a href="https://github.com/adafruit/Adafruit_NeoPixel" target="_blank">Adafruit NeoPixel</a>
 80 | 					</li>
 81 | 					<li><a href="https://github.com/NorthernWidget/DS3231" target="_blank">DS3231</a></li>
 82 | 					<li><a href="https://github.com/xoseperez/my92xx" target="_blank">my92xx</a></li>
 83 | 				</ul>
 84 | 				We also thank Espressif and their community for this awesome chip and all the software and
 85 | 				hardware projects around it and the countless tutorials you can find online!<br>
 86 | 				</p>
 87 | 
 88 | 				<h2>License</h2>
 89 | 				<p>
 90 | 					<b>In regards to the firmware:</b><br>
 91 | 					<br>
 92 | 					MIT License<br>
 93 | 					Copyright (c) 2020 Spacehuhn Technologies<br>
 94 | 					<br>
 95 | 					Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 96 | 					associated documentation files (the "Software"), to deal in the Software without restriction,
 97 | 					including without limitation the rights to use, copy, modify, merge, publish, distribute,
 98 | 					sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 99 | 					furnished to do so, subject to the following conditions:<br>
100 | 					<br>
101 | 					The above copyright notice and this permission notice shall be included in all copies or substantial
102 | 					portions of the Software.<br>
103 | 					<br>
104 | 					THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
105 | 					NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
106 | 					NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
107 | 					OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
108 | 					CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
109 | 				</p>
110 | 			</div>
111 | 		</div>
112 | 	</div>
113 | 	<footer>
114 | 		<span id="version">Version 2.6.1</span>
115 | 		<br>
116 | 		<br>
117 | 		<a href="http://deauther.maltronics.com" target="_blank">Wiki</a> | <a href="info.html">Credits</a>
118 | 	</footer>
119 | </body>
120 | 
121 | </html>


--------------------------------------------------------------------------------
/web_interface/js/attack.js:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | var attackJSON = [[false, 0, 0], [false, 0, 0], [false, 0, 0]];
 4 | 
 5 | function draw() {
 6 | 	getE("deauth").innerHTML = attackJSON[0][0] ? lang("stop") : lang("start");
 7 | 	getE("beacon").innerHTML = attackJSON[1][0] ? lang("stop") : lang("start");
 8 | 	getE("probe").innerHTML = attackJSON[2][0] ? lang("stop") : lang("start");
 9 | 
10 | 	getE("deauthTargets").innerHTML = esc(attackJSON[0][1] + "");
11 | 	getE("beaconTargets").innerHTML = esc(attackJSON[1][1] + "");
12 | 	getE("probeTargets").innerHTML = esc(attackJSON[2][1] + "");
13 | 
14 | 	getE("deauthPkts").innerHTML = esc(attackJSON[0][2] + "/" + attackJSON[0][3]);
15 | 	getE("beaconPkts").innerHTML = esc(attackJSON[1][2] + "/" + attackJSON[1][3]);
16 | 	getE("probePkts").innerHTML = esc(attackJSON[2][2] + "/" + attackJSON[2][3]);
17 | 
18 | 	getE("allpkts").innerHTML = esc(attackJSON[3] + "");
19 | }
20 | 
21 | function stopAll() {
22 | 	getFile("run?cmd=stop attack", function () {
23 | 		load();
24 | 	});
25 | }
26 | 
27 | function start(mode) {
28 | 	switch (mode) {
29 | 		case 0:
30 | 			attackJSON[0][0] = !attackJSON[0][0];
31 | 			break;
32 | 		case 1:
33 | 			attackJSON[1][0] = !attackJSON[1][0];
34 | 			break;
35 | 		case 2:
36 | 			attackJSON[2][0] = !attackJSON[2][0];
37 | 			break;
38 | 	}
39 | 	getFile("run?cmd=attack" + (attackJSON[0][0] ? " -d" : "") + (attackJSON[1][0] ? " -b" : "") + (attackJSON[2][0] ? " -p" : ""), function () {
40 | 		setTimeout(load, 2000);
41 | 		draw();
42 | 	});
43 | }
44 | 
45 | function load() {
46 | 	getFile("attack.json", function (response) {
47 | 		attackJSON = JSON.parse(response);
48 | 		console.log(response);
49 | 		showMessage("connected");
50 | 		draw();
51 | 	});
52 | }


--------------------------------------------------------------------------------
/web_interface/js/settings.js:
--------------------------------------------------------------------------------
 1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
 2 | 
 3 | var settingsJson = {};
 4 | 
 5 | function load() {
 6 | 	getFile("settings.json", function (res) {
 7 | 		settingsJson = JSON.parse(res);
 8 | 		showMessage("connected");
 9 | 		draw();
10 | 	});
11 | }
12 | 
13 | function draw() {
14 | 	var html = "";
15 | 	for (var key in settingsJson) {
16 | 		key = esc(key);
17 | 		if (settingsJson.hasOwnProperty(key)) {
18 | 			html += "<div class='row'>"
19 | 				+ "<div class='col-6'>"
20 | 				+ "<label class='settingName " + (typeof settingsJson[key] == "boolean" ? "labelFix" : "") + "' for='" + key + "'>" + key + ":</label>"
21 | 				+ "</div>"
22 | 				+ "<div class='col-6'>";
23 | 
24 | 			if (typeof settingsJson[key] == "boolean") {
25 | 				html += "<label class='checkBoxContainer'><input type='checkbox' name='" + key + "' " + (settingsJson[key] ? "checked" : "") + " onchange='save(\"" + key + "\",!settingsJson[\"" + key + "\"])'><span class='checkmark'></span></label>";
26 | 			} else if (typeof settingsJson[key] == "number") {
27 | 				html += "<input type='number' name='" + key + "' value=" + settingsJson[key] + " onchange='save(\"" + key + "\",parseInt(this.value))'>";
28 | 			} else if (typeof settingsJson[key] == "string") {
29 | 				html += "<input type='text' name='" + key + "' value='" + settingsJson[key].toString() + "' " + (key == "version" ? "readonly" : "") + " onchange='save(\"" + key + "\",this.value)'>";
30 | 			}
31 | 
32 | 			html += "</div>"
33 | 				+ "</div>"
34 | 				+ "<div class='row'>"
35 | 				+ "<div class='col-12'>"
36 | 				+ "<p>" + lang("setting_" + key) + "</p>"
37 | 				+ "<hr>"
38 | 				+ "</div>"
39 | 				+ "</div>";
40 | 		}
41 | 	}
42 | 	getE("settingsList").innerHTML = html;
43 | }
44 | 
45 | function save(key, value) {
46 | 	if (key) {
47 | 		settingsJson[key] = value;
48 | 		getFile("run?cmd=set " + key + " \"" + value + "\"");
49 | 	} else {
50 | 		getFile("run?cmd=save settings", function (res) {
51 | 			load();
52 | 		});
53 | 	}
54 | }


--------------------------------------------------------------------------------
/web_interface/js/site.js:
--------------------------------------------------------------------------------
  1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
  2 | 
  3 | var langJson = {};
  4 | 
  5 | function getE(name) {
  6 | 	return document.getElementById(name);
  7 | }
  8 | 
  9 | function esc(str) {
 10 | 	if (str) {
 11 | 		return str.toString()
 12 | 			.replace(/&/g, '&amp;')
 13 | 			.replace(/</g, '&lt;')
 14 | 			.replace(/>/g, '&gt;')
 15 | 			.replace(/\"/g, '&quot;')
 16 | 			.replace(/\'/g, '&#39;')
 17 | 			.replace(/\//g, '&#x2F;');
 18 | 	}
 19 | 	return "";
 20 | }
 21 | 
 22 | function convertLineBreaks(str) {
 23 | 	if (str) {
 24 | 		str = str.toString();
 25 | 		str = str.replace(/(?:\r\n|\r|\n)/g, '<br>');
 26 | 		return str;
 27 | 	}
 28 | 	return "";
 29 | }
 30 | 
 31 | function showMessage(msg) {
 32 | 	if (msg.startsWith("ERROR")) {
 33 | 		getE("status").style.backgroundColor = "#d33";
 34 | 		getE("status").innerHTML = "disconnected";
 35 | 
 36 | 		console.error("disconnected (" + msg + ")");
 37 | 	} else if (msg.startsWith("LOADING")) {
 38 | 		getE("status").style.backgroundColor = "#fc0";
 39 | 		getE("status").innerHTML = "loading...";
 40 | 	} else {
 41 | 		getE("status").style.backgroundColor = "#3c5";
 42 | 		getE("status").innerHTML = "connected";
 43 | 
 44 | 		console.log("" + msg + "");
 45 | 	}
 46 | }
 47 | 
 48 | function getFile(adr, callback, timeout, method, onTimeout, onError) {
 49 | 	/* fallback stuff */
 50 | 	if (adr === undefined) return;
 51 | 	if (callback === undefined) callback = function () { };
 52 | 	if (timeout === undefined) timeout = 8000;
 53 | 	if (method === undefined) method = "GET";
 54 | 	if (onTimeout === undefined) {
 55 | 		onTimeout = function () {
 56 | 			showMessage("ERROR: timeout loading file " + adr);
 57 | 		};
 58 | 	}
 59 | 	if (onError === undefined) {
 60 | 		onError = function () {
 61 | 			showMessage("ERROR: loading file: " + adr);
 62 | 		};
 63 | 	}
 64 | 
 65 | 	/* create request */
 66 | 	var request = new XMLHttpRequest();
 67 | 
 68 | 	/* set parameter for request */
 69 | 	request.open(method, encodeURI(adr), true);
 70 | 	request.timeout = timeout;
 71 | 	request.ontimeout = onTimeout;
 72 | 	request.onerror = onError;
 73 | 	request.overrideMimeType("application/json");
 74 | 
 75 | 	request.onreadystatechange = function () {
 76 | 		if (this.readyState == 4) {
 77 | 			if (this.status == 200) {
 78 | 				showMessage("CONNECTED");
 79 | 				callback(this.responseText);
 80 | 			}
 81 | 		}
 82 | 	};
 83 | 
 84 | 	showMessage("LOADING");
 85 | 
 86 | 	/* send request */
 87 | 	request.send();
 88 | 
 89 | 	console.log(adr);
 90 | }
 91 | 
 92 | function lang(key) {
 93 | 	return convertLineBreaks(esc(langJson[key]));
 94 | }
 95 | 
 96 | function parseLang(fileStr) {
 97 | 	langJson = JSON.parse(fileStr);
 98 | 	if (langJson["lang"] != "en") {// no need to update the HTML	
 99 | 		var elements = document.querySelectorAll("[data-translate]");
100 | 		for (i = 0; i < elements.length; i++) {
101 | 			var element = elements[i];
102 | 			element.innerHTML = lang(element.getAttribute("data-translate"));
103 | 		}
104 | 	}
105 | 	document.querySelector('html').setAttribute("lang", langJson["lang"]);
106 | 	if (typeof load !== 'undefined') load();
107 | }
108 | 
109 | function loadLang() {
110 | 	var language = "default"; //navigator.language.slice(0, 2);
111 | 	getFile("lang/" + language + ".lang",
112 | 		parseLang,
113 | 		2000,
114 | 		"GET",
115 | 		function () {
116 | 			getFile("lang/en.lang", parseLang);
117 | 		}, function () {
118 | 			getFile("lang/en.lang", parseLang);
119 | 		}
120 | 	);
121 | }
122 | 
123 | window.addEventListener('load', function () {
124 | 	getE("status").style.backgroundColor = "#3c5";
125 | 	getE("status").innerHTML = "connected";
126 | });


--------------------------------------------------------------------------------
/web_interface/js/ssids.js:
--------------------------------------------------------------------------------
  1 | /* This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther */
  2 | 
  3 | var ssidJson = { "random": false, "ssids": [] };
  4 | 
  5 | function load() {
  6 | 	getFile("run?cmd=save ssids", function () {
  7 | 		getFile("ssids.json", function (res) {
  8 | 			ssidJson = JSON.parse(res);
  9 | 			showMessage("connected");
 10 | 			draw();
 11 | 		});
 12 | 	});
 13 | }
 14 | 
 15 | function draw() {
 16 | 	var html;
 17 | 
 18 | 	html = "<tr>"
 19 | 		+ "<th class='id'></th>"
 20 | 		+ "<th class='ssid'></th>"
 21 | 		+ "<th class='lock'></th>"
 22 | 		+ "<th class='save'></th>"
 23 | 		+ "<th class='remove'></th>"
 24 | 		+ "</tr>";
 25 | 
 26 | 	for (var i = 0; i < ssidJson.ssids.length; i++) {
 27 | 		html += "<tr>"
 28 | 			+ "<td class='id'>" + i + "</td>" // ID
 29 | 			+ "<td class='ssid' contenteditable='true' id='ssid_" + i + "'>" + esc(ssidJson.ssids[i][0].substring(0, ssidJson.ssids[i][2])) + "</td>" // SSID
 30 | 			+ "<td class='lock clickable' onclick='changeEnc(" + i + ")' id='enc_" + i + "'>" + (ssidJson.ssids[i][1] ? "&#x1f512;" : "-") + "</td>" // Enc
 31 | 			+ "<td class='save'><button class='green' onclick='save(" + i + ")'>" + lang("save") + "</button></td>" // Save
 32 | 			+ "<td class='remove'><button class='red' onclick='remove(" + i + ")'>X</button></td>" // Remove
 33 | 			+ "</tr>";
 34 | 	}
 35 | 
 36 | 	getE("randomBtn").innerHTML = ssidJson.random ? lang("disable_random") : lang("enable_random");
 37 | 
 38 | 	getE("ssidTable").innerHTML = html;
 39 | }
 40 | 
 41 | function remove(id) {
 42 | 	ssidJson.ssids.splice(id, 1);
 43 | 	getFile("run?cmd=remove ssid " + id);
 44 | 	draw();
 45 | }
 46 | 
 47 | function add() {
 48 | 	var ssidStr = getE("ssid").value;
 49 | 	var wpa2 = getE("enc").checked;
 50 | 	var clones = getE("ssidNum").value;
 51 | 	var force = getE("overwrite").checked;
 52 | 
 53 | 	if (ssidStr.length > 0) {
 54 | 		var cmdStr = "add ssid \"" + ssidStr + "\"" + (force ? " -f" : " ") + " -cl " + clones;
 55 | 		if (wpa2) cmdStr += " -wpa2";
 56 | 
 57 | 		getFile("run?cmd=" + cmdStr);
 58 | 
 59 | 		for (var i = 0; i < clones; i++) {
 60 | 			if (ssidJson.ssids.length >= 60) ssidJson.ssids.splice(0, 1);
 61 | 			ssidJson.ssids.push([ssidStr, wpa2]);
 62 | 		}
 63 | 
 64 | 		draw();
 65 | 	}
 66 | }
 67 | 
 68 | function enableRandom() {
 69 | 	if (ssidJson.random) {
 70 | 		getFile("run?cmd=disable random", function () {
 71 | 			load();
 72 | 		});
 73 | 	} else {
 74 | 		getFile("run?cmd=enable random " + getE("interval").value, function () {
 75 | 			load();
 76 | 		});
 77 | 	}
 78 | 
 79 | }
 80 | 
 81 | function disableRandom() {
 82 | 
 83 | }
 84 | 
 85 | function addSelected() {
 86 | 	getFile("run?cmd=add ssid -s" + (getE("overwrite").checked ? " -f" : ""));
 87 | }
 88 | 
 89 | function changeEnc(id) {
 90 | 	ssidJson.ssids[id][1] = !ssidJson.ssids[id][1];
 91 | 	draw();
 92 | 	save(id);
 93 | }
 94 | 
 95 | function removeAll() {
 96 | 	ssidJson.ssids = [];
 97 | 	getFile("run?cmd=remove ssids");
 98 | 	draw();
 99 | }
100 | 
101 | function save(id) {
102 | 	var name = getE("ssid_" + id).innerHTML.replace("<br>", "").substring(0, 32);
103 | 	var wpa2 = ssidJson.ssids[id][1];
104 | 	ssidJson.ssids[id] = [name, wpa2];
105 | 
106 | 	getFile("run?cmd=replace ssid " + id + " -n \"" + name + "\" " + (wpa2 ? "-wpa2" : ""));
107 | }
108 | 
109 | 


--------------------------------------------------------------------------------
/web_interface/lang/cn.lang:
--------------------------------------------------------------------------------
 1 | {
 2 |     "lang": "cn",
 3 |     "warning": "注意！",
 4 |     "disclaimer": "该项目仅用于个人学习和研究使用\nESP8266及其SDK都不是为此目的而设计或构建的。可能会有 Bug 出现！\n请仅在自己的网络和设备上使用！\n本项目使用IEEE 802.11标准中描述的有效Wi-Fi帧，不会阻止或破坏任何频带。\n使用前请检查您的国家的法律法规。\n\n请不要将这个项目称为“干扰器”，这完全破坏了这个项目的真正目的！\n如果你这样做，它只能证明你不了解这个项目意味着什么。\n请勿用于商业用途，或为了自身利益发布该项目的消息，这只能说明你不尊重知识产权，以及背后的社区和为了更好的WiFi标准的斗争。\n\n详情请访问：",
 5 | 	"disclaimer-button": "我已阅读并明白上述注意事项。",
 6 | 	"reload": "刷新",
 7 | 	"scan": "扫描",
 8 | 	"ssids": "SSIDs",
 9 | 	"attacks": "攻击",
10 | 	"settings": "设置",
11 | 	"info": "关于",
12 | 	"info_span": "注意： ",
13 | 	"all": "全部",
14 | 	"channel": "信道",
15 | 	"devices": "保存的设备",
16 | 	"select_all": "全选",
17 | 	"deselect_all": "全不选",
18 | 	"remove_all": "移除全部",
19 | 	"station_scan_time": "Station扫描时间",
20 | 	"new": "新建",
21 | 	"save": "保存",
22 | 	"add": "添加",
23 | 	"add_selected": "克隆所选接入点",
24 | 	"overwrite": "覆盖",
25 | 	"time_interval": "时间间隔",
26 | 	"number": "数量",
27 | 	"targets": "目标",
28 | 	"scan_info": "- 点击扫描并等待，直到主板上的蓝色LED指示灯熄灭（或变为绿色），然后点击刷新。\n- 在Station扫描期间，Web界面将不可用，您可能需要重新连接！\n- 请只选择一个目标！\n",
29 | 	"ssids_info": "- 此SSID列表用于信标(beacon)和探测(probe)攻击。\n-  每个SSID最多可以有32个字符。\n- 修改SSID后不要忘记点击保存。\n- 您需要在克隆SSID后点击刷新。\n",
30 | 	"attack_info": "-  您在开始攻击时可能会失去连接！\n- 你需要为取消验证洪水攻击(deauth)攻击选择一个目标。\n- 您需要保存一个SSID来进行信标和探测攻击。\n- 点击刷新以刷新数据包速率。\n",
31 | 	"settings_info": "- 某些设置需要重启后才能生效。\n- 修改设置后请务必点击保存以生效。\n",
32 | 	"info_disclaimer": "如果发生了不可预计的错误，请重载网页并使用串口监视器以进一步调试。",
33 | 	"start_stop": "开始 / 停止",
34 | 	"start": "开始",
35 | 	"stop": "停止",
36 | 	"wifi_off": "WiFi关闭",
37 | 	"reboot": "重启",
38 | 	"reset": "重置",
39 | 	"enable_random": "开启随机模式",
40 | 	"disable_random": "关闭随机模式",
41 | 	"random_desc": "启用随机模式以在给定时间间隔内生成随机的SSID列表",
42 | 	"deauth_desc": "通过向您选择的接入点和客户端设备发送解除认证帧来关闭WiFi设备的连接。\n因为很多设备不使用802.11w-2009标准来抵御这种攻击。\n- 请只选择一个目标！当您开始攻击的不同信道上的多个目标时，它将在这些信道之间快速切换，届时您将无法重新连接到此Web界面。\n",
43 | 	"beacon_desc": "信标帧(Beacon)数据包用于宣告接入点。通过不断发送信标帧数据包，看起来就像您创建了新的WiFi网络。\n您可以通过SSID指定网络名称。",
44 | 	"probe_desc": "探测请求帧由客户端设备发送，以询问一个已知网络是否在附近。\n通过请求您在SSID列表中指定的网络，以此来混淆WiFi跟踪器。\n您可能不会在家庭网络中看到此次攻击的任何影响。",
45 | 	"setting_version": "版本号，比如说 v2.0.1\n这个选项只能在源代码中更改",
46 | 	"setting_ssid" : "Wi-Fi 热点 SSID (如果已启用)。\nSSID长度必须在8到31个字符之间。",
47 | 	"setting_password": "Wi-Fi 密码(如果已启用)。\n密码长度必须在8到31个字符之间。",
48 | 	"setting_channel": "启动时默认使用的信道。",
49 | 	"setting_hidden": "隐藏接入点的SSID。",
50 | 	"setting_captivePortal": "启用captive portal（无线认证系统）。",
51 | 	"setting_autosave": "自动保存SSIDs、设备名和设置。",
52 | 	"setting_autosavetime": "自动保存的时间间隔(ms)。",
53 | 	"setting_display": "启用OLED界面。",
54 | 	"setting_displayTimeout": "OLED超时时间(s)。\n若需要关闭超时，请设置成0。",
55 | 	"setting_serial": "启用串口控制界面.\n推荐不要关闭。",
56 | 	"setting_serialEcho": "开启串口输入回显",
57 | 	"setting_web": "启用Web界面。",
58 | 	"settings_webSpiffs": "对所有文件启用 SPIFFS",
59 | 	"setting_led": "启用 (RGB) LED灯。",
60 | 	"setting_maxch": "扫描的最大信道。\nUS = 11, EU = 13, Japan = 14.",
61 | 	"setting_macAP": "接入点模式下的MAC地址。\n只有在接入点模式开启时才会改变MAC地址。",
62 | 	"setting_macSt": "客户端模式下的MAC地址。\n只有在客户端模式开启时才会改变MAC地址。",
63 | 	"setting_chtime": "扫描第一个信道到第二个信道的时间间隔(ms)(只有在信道跳变开启时有效)。",
64 | 	"setting_minDeauths": "扫描最小解除认证攻击帧的数量，改变取消验证洪水攻击模式下的LED。",
65 | 	"setting_attacktimeout": "指定时间(s)后自动停止攻击。\n设定为0以关闭。",
66 | 	"setting_forcepackets": "发送多少数据包来用于攻击。\n如果要在繁忙区域达到更好的数据包速率，则将此值设置得更高。\n小心，这个设置可能使设备更慢或者更不稳定。\n最大值为255!",
67 | 	"setting_deauthspertarget": "发送给每个目标的解除关联帧与解除认证帧。",
68 | 	"setting_deauthReason": "解除认证帧的原因代码。告知目标设备其为什么连接会被关闭。",
69 | 	"setting_beaconchannel": "如果启用，在运行信标帧(Beacon)攻击时，会在不同信道上广播。",
70 | 	"setting_beaconInterval": "启用时，每隔1s会发送一次信标帧(Beacon)。关闭时，时间间隔会变成100ms。\n一个长的时间间隔意味着更稳定和更高效的数据包，但在扫描客户端和接入点时会花费您更多时间。",
71 | 	"setting_randomTX": "启用随机传输功率来发送信标帧和探测请求帧。",
72 | 	"setting_probesPerSSID": "探测攻击模式下发送给每个SSID的探测请求帧。",
73 | 	"setting_lang": "Web界面的默认语言。\n请确认语言文件是否存在！"
74 | }
75 | 


--------------------------------------------------------------------------------
/web_interface/lang/cs.lang:
--------------------------------------------------------------------------------
 1 | {
 2 |     "lang": "cs",
 3 |     "warning": "VAROVÁNÍ",
 4 |     "disclaimer": "Tento projekt slouží pouze pro testovací a edukační využití.\nESP8266, nebo jeho SDK není určeno pro toto použití, proto se mohou vyskytnout chyby!\n\nPoužijte tento projekt jen proti vlastním zařízením a sítím!\n\nPoužíváme validní Wi-Fi rámce popsané v IEEE 802.11 standardu. Neblokujeme, ani nezasahujeme do jiných frekvencí.\nPřed použitím si zkontrolujte omezení ve vaší zemi.\n\nProsím neodkazujte na tento projekt jako na \"rušičku\", nebo \"jammer\", podkopává to reálný význam tohoto projektu!\nPokud tak budete nadále odkazovat, jen to ukazuje, že jste nic nepochopili.\nPublikování obsahu o tomto projektu bez řádného vysvětlení ukazuje, že to děláte pouze pro kliknutí, slávu, peníze a nemáte žádný respekt k duševnímu vlastnictví, komunitě za ním a boji za lepší standard WiFi.\n\nPro více informací navštivte:",
 5 | 	"disclaimer-button": "Přečetl jsem a pochopil výše uvedené oznámení",
 6 | 	"reload": "Obnovit",
 7 | 	"scan": "Skenovat",
 8 | 	"ssids": "SSID",
 9 | 	"attacks": "Útoky",
10 | 	"settings": "Nastavení",
11 | 	"info": "Info",
12 | 	"info_span": "INFO: ",
13 | 	"all": "Vše",
14 | 	"channel": "Kanál",
15 | 	"devices": "Uložená zařízení",
16 | 	"select_all": "Označit vše",
17 | 	"deselect_all": "Odoznačit vše",
18 | 	"remove_all": "Odstranit vše",
19 | 	"station_scan_time": "Čas skenování stanice",
20 | 	"new": "Nový",
21 | 	"save": "Uložit",
22 | 	"add": "Přidat",
23 | 	"add_selected": "Klonovat vybrané stanice",
24 | 	"overwrite": "Přepsat",
25 | 	"time_interval": "Časový interval",
26 | 	"number": "Číslo",
27 | 	"targets": "Cíle",
28 | 	"scan_info": "- Klikněte na Skenovat a vyčkejte až se modrá LED vypne (nebo se změní na zelenou), poté klikněte na Obnovit.\n- Webové rozhraní nebude během skenu dostupné. Budete se muset připojit znovu!\n- Vyberte jenom jeden cíl!\n",
29 | 	"ssids_info": "- Pro útok bude využit tento seznam SSID.\n- Každé SSID může mít do 32 znaků.\n- Po editaci nezapomeňte kliknout na Uložit.\n- Po klonování SSID budete muset kliknout na Obnovit.\n",
30 | 	"attack_info": "- Při zahájení útoku možná ztratíte připojení!\n- Musíte vybrat cíl.\n- Pro útok potřebujete uložené SSID.\n- Klikněte na Obnovit pro obnovení rychlosti paketů.\n",
31 | 	"settings_info": "- Některá nastavení vyžadují restart.\n- Pro aplikování změn klikněte na Uložit.\n",
32 | 	"info_disclaimer": "V případě neočekávané chyby obnovte stránku a zkontrolujte sériové rozhraní pro další ladění.",
33 | 	"start_stop": "START / STOP",
34 | 	"start": "START",
35 | 	"stop": "STOP",
36 | 	"wifi_off": "WiFi Off",
37 | 	"reboot": "Restartovat",
38 | 	"reset": "Resetovat",
39 | 	"enable_random": "Zapnout režim náhody",
40 | 	"disable_random": "Vypnout režim náhody",
41 | 	"random_desc": "Zapnout generování náhodného SSID seznamu.",
42 | 	"deauth_desc": "Uzavře spojení WIFI zařízení odesláním deauth paketů klientům a AP, které jste si vybrali.\nToto je možné, protože většina zařízení neimplementuje 802.11w-2009 standard, který proti tomuto útoku brání.\n- Vyberte jenom jeden cíl! Pokud vyberete více cílů, které jsou na jíných kanálech a spustíte útok, tak ztratíte možnost se připojit do webového rozhraní.\n",
43 | 	"beacon_desc": "Pro zviditelnění jsou použity beacon pakety. Odesíláním těchto paketů výtváříte dojem nových sítí.\nJména můžete specifikovat v sekci SSID.",
44 | 	"probe_desc": "Probe požadavky jsou odesílány klienty, pro zjištění, jestli není blízko známá síť.\nPoužijte tento útok pro zmatení WIFI skenerů.\nVe vaší domácí sítí pravděpodobně nezaznamenáte žádné výsledky.",
45 | 	"setting_version": "Číslo verze, tj. v2.0.\nMůže být změněno pouze ve zdrojovém kódu.",
46 | 	"setting_ssid" : "SSID přístupového bodu AP (je-li zapnuto).\nDélka musí být mezi 1 a 31 znaky.",
47 | 	"setting_password": "Heslo přístupového bodu AP (je-li zapnuto).\nDélka musí být mezi 8 a 31 znaky.",
48 | 	"setting_channel": "Výchozí WIFI kanál, který bude použit při startu.",
49 | 	"setting_hidden": "Skryje přístupový bod pro webové rozhraní (je-li zapnuto).",
50 | 	"setting_captivePortal": "Aktivuje captive portal pro webové rozhraní (je-li zapnuto).",
51 | 	"setting_autosave": "Aktivuje automatické ukládání SSID, jmen zařízení and nastavení.",
52 | 	"setting_autosavetime": "Časový interval pro automatické ukládání v milisekundách.",
53 | 	"setting_display": "Aktivuje rozhraní displaye.",
54 | 	"setting_displayTimeout": "Čas v sekundách za který se display po nečinnosti automaticky vypne.\nPro vypnutí časovače použijte 0.",
55 | 	"setting_serial": "Aktivuje sériové rozhraní.\nNení doporučeno ho vypínat!",
56 | 	"setting_serialEcho": "Aktivuje odezvu (echo) pro každý řádek v sériové konzoli.",
57 | 	"setting_web": "Aktivuje webové rozhraní.",
58 | 	"settings_webSpiffs": "Zapnout SPIFFS pro všechny webové soubory.",
59 | 	"setting_led": "Aktivuje (RGB) LED.",
60 | 	"setting_maxch": "Max. kanál.\nUS = 11, EU = 13, Japonsko = 14.",
61 | 	"setting_macAP": "MAC adresa v AP módu.\nMAC adresa bude nahrazena, pokud je AP mód aktivní.",
62 | 	"setting_macSt": "MAC adresa v módu stanice.\nMAC adresa bude nahrazena, pokud je mód stanice aktivní.",
63 | 	"setting_chtime": "Čas pro skenování jednoho kanálu v milisekundách (pokud je zapnuto přeskakování kanálů).",
64 | 	"setting_minDeauths": "Minimální počet odhlašovacích rámců pro změnu LED indikátoru.",
65 | 	"setting_attacktimeout": "Útok se automaticky zastaví po zadaném čase (v sekundách).\nPro vypnutí časovače nastavte 0.",
66 | 	"setting_forcepackets": "Počet pokusů pro odeslání paketu.\nNastavte větší hodnotu, pokud potřebujete lepší výsledky v rušných prostředích.\nToto nastavení může vést ke zpomalení zařízení a nestabilitě.\nMaximální hodnota je 255!",
67 | 	"setting_deauthspertarget": "Kolik deauth paketů bude odesláno každému cíli.",
68 | 	"setting_deauthReason": "Kód, který určuje důvod odhlášení klientů za sítě.",
69 | 	"setting_beaconchannel": "Pokud aktivní, beacon pakety budou odesílány na odlišných kanálech.",
70 | 	"setting_beaconInterval": "Pokud aktivní, beacon interval bude 1s. Pokud ne, interval bude 100ms.\nDelší interval znamená větší stabilitu, ale skenování může trvat déle.",
71 | 	"setting_randomTX": "Aktivuje náhodný vysílací výkon pro každý packet.",
72 | 	"setting_probesPerSSID": "Kolik probe paketů bude odesláno k SSID.",
73 | 	"setting_lang": "Výchozí jazyk pro webové rozhraní.\nUjistěte se, že definiční soubor jazyka existuje!"
74 | }
75 | 
76 | 


--------------------------------------------------------------------------------
/web_interface/lang/ja.lang:
--------------------------------------------------------------------------------
 1 | {
 2 |     "lang": "ja",
 3 |     "warning": "警告",
 4 |     "disclaimer": "このプロジェクトはテスト及び学術的な目的の概念実証です。\nESP8266及び、そのSDKは、このような目的のためのものではないため。バグがあるかもしれません。\n\n所有するデバイスとネットワークに対してのみ使用してください。\n\nIEEE 802.11標準に記述された有効なWi-Fiフレームを用いており、遮断及び周波数の攪乱ではありません。\n使用する前に自国内の法規を確認してください。\n\nこのプロジェクトでの\"妨害\"を意図しないでください。それはこのプロジェクト本来の目的に反するものです。\nこのプロジェクトが意味するところを何も理解できていないことが証明されるだけです。\n適切な説明をせず、これに関するコンテンツを配布することは、クリックや名声・金銭目的の為であり、知的財産とその背後にあるコミュニティとWiFi標準を良くしていくための戦いに敬意を示さない事になります。\n\n詳細はこちらから:",
 5 | 	"disclaimer-button": "私は告示を読んで理解しました",
 6 | 	"reload": "再読込",
 7 | 	"scan": "スキャン",
 8 | 	"ssids": "SSID",
 9 | 	"attacks": "攻撃",
10 | 	"settings": "設定",
11 | 	"info": "情報",
12 | 	"info_span": "情報: ",
13 | 	"all": "全て",
14 | 	"channel": "チャンネル",
15 | 	"devices": "保存済みデバイス",
16 | 	"select_all": "全選択",
17 | 	"deselect_all": "全選択解除",
18 | 	"remove_all": "全削除",
19 | 	"station_scan_time": "ステーションのスキャン時間",
20 | 	"new": "新規",
21 | 	"save": "保存",
22 | 	"add": "追加",
23 | 	"add_selected": "選択APを複製",
24 | 	"overwrite": "上書",
25 | 	"time_interval": "間隔",
26 | 	"number": "番号",
27 | 	"targets": "対象",
28 | 	"scan_info": "- SCANを押下してボード上の青色LED(充電中は緑色)が消灯してから、RELOADを押下します。\n- ステーションのスキャン中は再接続までWebインターフェイスを使用できません!\n- 対象を1つだけ選択してください。\n",
29 | 	"ssids_info": "- このSSIDリストはビーコンと探査攻撃に使用されます。\n- SSIDは最大32文字まで。\n- SSIDを編集した時は忘れずに保存してください。\n- SSIDを複製した後は再読み込みしてください。\n",
30 | 	"attack_info": "- 攻撃開始により接続が失われることがあります。\n- 認証解除攻撃には対象を選択する必要があります。\n- ビーコン・探査攻撃にはSSIDの保存が必要です。\n- 再読み込みのクリックによりパケットレートを更新します。\n",
31 | 	"settings_info": "- いくつかの設定は再起動が必要です。\n- 保存をクリックして変更を反映します。\n",
32 | 	"info_disclaimer": "例外エラーが生じた場合はページの再読み込みと、デバッグのためにシリアルモニターを確認してください。",
33 | 	"start_stop": "開始 / 停止",
34 | 	"start": "開始",
35 | 	"stop": "停止",
36 | 	"wifi_off": "WiFiオフ",
37 | 	"reboot": "再起動",
38 | 	"reset": "リセット",
39 | 	"enable_random": "ランダムモード有効化",
40 | 	"disable_random": "ランダムモード無効化",
41 | 	"random_desc": "ランダムモードを有効にして、ランダムなSSIDを指定の間隔で生成します。",
42 | 	"deauth_desc": "選択したAPとクライアントに認証解除フレームを送信してWiFiデバイスの接続を閉じます。\nこれは多くのデバイスが、この攻撃に対する保護をもたらす802.11w-2009標準に準じていないため可能になります。\n- 1つだけ対象を選択してください! 異なるチャンネルの複数の対象に攻撃を開始すると、それらのチャンネルがすぐに切り替わりWebインターフェイスに再接続する機会がなくなります。\n",
43 | 	"beacon_desc": "ビーコンパケットはアクセスポイントのアドバタイズに使用されます。ビーコンパケットの継続的な送信は、WiFiネットワークを新しく作成したかのように見えます。\nSSID下のネットワーク名を指定できます。",
44 | 	"probe_desc": "探査リクエストはクライアントが近隣に既知のネットワークが存在するか問い合わせます。\nこの攻撃はSSIDリストで指定されたネットワークへの問い合わせによってWiFiトラッカーを攪乱させます。\nホームネットワークに対して、この攻撃による影響はみられないでしょう。",
45 | 	"setting_version": "バージョン v2.0.\nこの設定はソースコード内でのみ変更できます。",
46 | 	"setting_ssid" : "Webインターフェイスで使用するアクセスポイントのSSID名(有効な場合)\n1～31文字である必要があります。",
47 | 	"setting_password": "Webインターフェイスで使用するアクセスポイントのパスワード(有効な場合)\n8～31文字である必要があります。",
48 | 	"setting_channel": "開始時に使用するデフォルトのWiFiチャンネル",
49 | 	"setting_hidden": "Webインターフェイスで使用するアクセスポイントを隠す(有効な場合)",
50 | 	"setting_captivePortal": "アクセスポイントのキャプティブポータルを有効にする(有効な場合)",
51 | 	"setting_autosave": "SSID/デバイス名/設定を自動保存",
52 | 	"setting_autosavetime": "自動保存の間隔(ミリ秒)",
53 | 	"setting_display": "ディスプレイインターフェイスを有効にする",
54 | 	"setting_displayTimeout": "非アクティブ時にディスプレイをオフにするまでの秒数\n0でディスプレイタイムアウトが無効になります。",
55 | 	"setting_serial": "シリアルインターフェイスを有効化\n無効にしないことを推奨します!",
56 | 	"setting_serialEcho": "シリアル経由のメッセージ毎のエコーを有効にする",
57 | 	"setting_web": "Webインターフェイスを有効にする",
58 | 	"setting_webSpiffs": "全てのWebファイルでSPIFFSを有効にする",
59 | 	"setting_led": "(RGB)LED機能を有効にする",
60 | 	"setting_maxch": "スキャンする最大チャンネル数\nアメリカ = 11, EU = 13, 日本 = 14",
61 | 	"setting_macAP": "アクセスポイントモードで使用するMACアドレス\n アクセスポイントモードが有効な時にのみ内部MACアドレスを置き換えることに留意してください。",
62 | 	"setting_macSt": "ステーションモードで使用するMACアドレス\nステーションモードが有効な時にのみ内部MACアドレスを置き換えることに留意してください。",
63 | 	"setting_chtime": "順次スキャンで次に移るまでの個別のスキャンにかけるミリ秒(チャンネルホッピングが有効な場合のみ)",
64 | 	"setting_minDeauths": "スキャン時に認証解除モードにLEDを変更するときの認証解除フレームの最小数",
65 | 	"setting_attacktimeout": "指定時間(秒)後に自動的に攻撃を停止します。\n0で無効になります。",
66 | 	"setting_forcepackets": "パケットの送信試行数\n混雑したエリアで良好なパケットレートを実現したい場合は値を高く設定します。\nこの設定がデバイスを遅く、より不安定にする可能性があることに注意してください。\n最大値は255です!",
67 | 	"setting_deauthspertarget": "ターゲット毎に送信する認証解除・関連付け解除フレーム数",
68 | 	"setting_deauthReason": "認証解除フレームで理由コードが送信されることにより対象デバイスに、なぜ接続が閉じられるか知らせます。",
69 | 	"setting_beaconchannel": "有効にすると、ビーコン攻撃実行時に全フレームを異なるチャンネルに送信します。",
70 | 	"setting_beaconInterval": "有効にすると、ビーコンが毎秒送信されます。無効の場合は100ミリ秒の間隔を開けます。\n間隔を長くするとパケットの安定性とスパムの低減をもたらしますが、スキャン時にクライアントがSSIDを見つけるまで時間を要する事があります。",
71 | 	"setting_randomTX": "探査リクエストフレームと送出ビーコンの送信出力をランダムにする",
72 | 	"setting_probesPerSSID": "SSID毎に送信する探査リクエストフレーム数",
73 | 	"setting_lang": "Webインターフェイスのデフォルト言語\n言語ファイルが存在するか確認してください!"
74 | }


--------------------------------------------------------------------------------
/web_interface/lang/ko.lang:
--------------------------------------------------------------------------------
 1 | {
 2 |     "lang": "ko",
 3 |     "warning": "경고",
 4 |     "disclaimer": "이 프로젝트는 교육목적 또는 테스트를 위해 만들어졌습니다.\nESP8266외 다른기기에서 오류가 발생할수 있습니다!\n\n절대로 공공장소에서 사용하지마세요 자신 네트워크 장치에서만 사용하세요!\n\nIEEE 802.11 표준에 설명된 유효한 Wi-Fi 프레임을 사용하며 그외 다른 주파수를 차단하거나 방해하지 않습니다.\n해당 장치를 사용하기전에 이용중인 국가의 규정을 확인하세요.\n\n제발 이 프로젝트명을 \"재머\", 라고 칭하지말아주세요! 저희는 재머 용도로 프로젝트를 진행한게 아닙니다!\n만약 당신이 재머라고 부르면 당신은 이 프로젝트를 이해를 못했다고 생각합니다.\n적절한 설명 없이 이것을 실행한다면 추후 문제가 발생할 가능성이 높습니다.\n\n자세한 내용은 아래 링크를 접속해서 확인해주세요 :)",
 5 | 	"disclaimer-button": "저는 위 경고를 모두 읽고 이해를 했습니다",
 6 | 	"reload": "리로드",
 7 | 	"scan": "스캔",
 8 | 	"ssids": "SSID설정",
 9 | 	"attacks": "공격",
10 | 	"settings": "설정",
11 | 	"info": "정보",
12 | 	"info_span": "정보: ",
13 | 	"all": "전체",
14 | 	"channel": "채널",
15 | 	"devices": "기기 저장",
16 | 	"select_all": "전체선택",
17 | 	"deselect_all": "전체선택취소",
18 | 	"remove_all": "전체 삭제",
19 | 	"station_scan_time": "스테이션 스캔 시간",
20 | 	"new": "새로 만들기",
21 | 	"save": "저장",
22 | 	"add": "추가",
23 | 	"add_selected": "선택한 AP 복제",
24 | 	"overwrite": "덮어쓰기",
25 | 	"time_interval": "시간간격",
26 | 	"number": "개수",
27 | 	"targets": "타켓 수",
28 | 	"scan_info": "- 스캔하는 동안 보드에 파란색 혹식 녹색 LED가 들어옵니다 작동중이라는 표시이니 기다리세요.\n- 스테이션 스캔을 진행하고있을떄 웹 인터페이스가 잠시 멈추니 재연결해야합니다.\n- 오직 대상을 하나만 선택하세요!\n",
29 | 	"ssids_info": "- 이 SSID 목록은 Beacon과 Probe 공격에 사용합니다.\n- 각 SSID는 최대 32자리 까지 가능합니다. 한국어는 신호가 약하거나 SSID가 적게 나올수도있습니다.\n- SSID를 편집할때 저장을 클릭하는 것을 잊지 마세요.\n- SSID를 복제하고 리로드를 해야합니다.\n",
30 | 	"attack_info": "- 공격도중 연결이 Wi-Fi가 끊어질때도 있습니다!\n- Deauth 공격은 공격 대상을 지정해야합니다.\n- Beacon과 Probe 공격을 위해서는 SSID를 저장해야합니다.\n- 패킷 속도를 새로 볼려면 리로드를 클릭하세요.\n",
31 | 	"settings_info": "- 일부 설정은 재부팅이 필요합니다.\n- 변경내용을 적용하실려면 저장을 클릭하세요.\n",
32 | 	"info_disclaimer": "예기치 않은 오류가 생길경우 리로드를 하고 디버깅을 위해 모니터를 연결하세요. 모니터가 없을시 무시하세요.",
33 | 	"start_stop": "실행 / 중지",
34 | 	"start": "실행",
35 | 	"stop": "중지",
36 | 	"wifi_off": "와이파이 끄기",
37 | 	"reboot": "재부팅",
38 | 	"reset": "리셋",
39 | 	"enable_random": "랜덤모드 활성화",
40 | 	"disable_random": "랜덤모드 비활성화",
41 | 	"random_desc": "랜덤모드 활성화시 설정하신 시간마다 SSID목록을 새로 생성합니다.",
42 | 	"deauth_desc": "Deauth 공격은 선택한 AP에 클라이언트 장치에 인증 해제 프레임을 전송하여 Wi-Fi연결에 장애를 발생합니다.\n많은 장치가 공격에 대한 보호를 제공하는 802.11w-2009표준을 사용하지 않을 경우 사용이 가능합니다 요약하자면 대부분 Wi-Fi에서는 공격이 가능합니다.\n- 공격대상을 하나만 선택하세요! 다른 채널에서 실행되는 Wi-Fi를 선택하고 공격하면 채널간 빠르게 전환되며 웹 인터페이스에 다시 연결하기가 어렵습니다.\n",
43 | 	"beacon_desc": "Beacon 공격은 Wi-Fi를 여러개 생성하여 Wi-Fi네트워크를 만든것처럼 보이는 공격기술입니다.\nSSID설정에서 Wi-Fi이름을 선택이 가능합니다.",
44 | 	"probe_desc": "알려진 네트워크가 근처에 있는지 확인하기 위해 클라우드장치에서 Prob 요청을 보냅니다.\nSSID목록에 지정한 네트워크를 요청하여 Wi-Fi 추적기를 혼동하려면 이 공격방법을 사용하세요.\n이 공격이 가정집에 미치는 영향을 볼 가능성은 적습니다.",
45 | 	"setting_version": "버전 번호 예시) v2.0.\n이 설정은 소스코드에서만 변경이 가능합니다.",
46 | 	"setting_ssid" : "웹인터페이스에서 사용하는 SSID\nSSID는 1~31자 사이여야 합니다.",
47 | 	"setting_password": "웹인터페이스에 사용되는 Wi-Fi 비밀번호를 설정이 가능합니다.\n8~31자리여야합니다",
48 | 	"setting_channel": "웹인터페이스에 사용되는 Wi-Fi의 채널을 설정할 수 있습니다.",
49 | 	"setting_hidden": "웹인터페이스 Wi-Fi를 숨길 수 있습니다.",
50 | 	"setting_captivePortal": "캡티브 포털 활성화 여부를 선택할 수 있습니다.",
51 | 	"setting_autosave": "SSID와 장치이름을 자동으로 저장합니다.",
52 | 	"setting_autosavetime": "자동저장 시간간격 (밀리초 단위)",
53 | 	"setting_display": "디스플레이 인터페이스 활성화 여부를 선택할 수 있습니다.",
54 | 	"setting_displayTimeout": "비활성화 상태일때 디스플레이가 꺼지는 시간 (초단 위)\n디스플레이 꺼짐 시간을 비활성화 할려면 0으로 설정하세요.",
55 | 	"setting_serial": "시리얼 인터페이스 활성화 여부를 선택 할 수 있습니다.\n비활성화를 추천드립니다.",
56 | 	"setting_serialEcho": "시리얼을 통해 들어오는 각 메시지에 에코 활성화 여부를 선택 할 수 있습니다.",
57 | 	"setting_web": "웹인터페이스 사용여부를 선택 할 수 있습니다.",
58 | 	"setting_webSpiffs": "모든 웹파일 SPIFFS 사용",
59 | 	"setting_led": "LED기능 활성화 여부를 선택 할 수 있습니다.",
60 | 	"setting_maxch": "최대 검색 채널\n미국 = 11, 유럽 = 13, 일본 = 14.",
61 | 	"setting_macAP": "웹인터페이스 Wi-Fi에 사용하는 MAC주소를 정해주세요.\nMAC주소 지정시 내부 MAC주소를 대체합니다. 주의해주세요.",
62 | 	"setting_macSt": "스테이션모드에서 사용되는 MAC주소\n스테이션모드가 활성화된 경우 내부 MAC주소를 대체합니다. 주의해주세요.",
63 | 	"setting_chtime": "채널 호핑이 활성화중일때, 다음 채널로 이동하기 전에 한 채널을 검색하기 위한 시간입니다 (밀리초 단위)",
64 | 	"setting_minDeauths": "LED를 삭제 모드로 변경하기 위해 검색할때 최소 인증프레임 수입니다.",
65 | 	"setting_attacktimeout": "공격도중 지정한 시간후 공격이 자동으로 멈춥니다 (초 단위)\n0으로 설정할시 비활성화됩니다.",
66 | 	"setting_forcepackets": "패킷을 전송 시도 횟수\n사용량이 많은 지역에서 더 나은 패킷 비율을 얻으려면 이 값을 더 높게 설정해야합니다.\n이값을 변경시 장치가 느리거나 불안정해질수 있습니다. 주의하세요.\n최대값은 255입니다!",
67 | 	"setting_deauthspertarget": "각 대상에 대해 발송되는 인증 및 연결 해제 프레임 수.",
68 | 	"setting_deauthReason": "공격대상 장치에 연결이 끊어지는 이유를 알리기위해 Deauth 프레임과 함께 전송되는 이유 코드",
69 | 	"setting_beaconchannel": "활성화되면 Beacon 공격을 실행할때 다른 채널의 모든 프레임을 보냅니다.",
70 | 	"setting_beaconInterval": "true로 설정하면 Beacon이 매초마다 전송됩니다. false로 설정하면 간격은 100ms입니다.\n더 긴 간격은 더 많은 안정성과 적은 패킷공격을 의미하지만 클라이언트가 스캔할 때 SSID를 찾을 때까지 더 오래 시간이 걸릴 수 있습니다.",
71 | 	"setting_randomTX": "Beacon또는 Probe 요청 프레임을 보내기 위해 무작위 전송 전력을 활성화합니다.",
72 | 	"setting_probesPerSSID": "각 SSID에 대해 전송된 Probe 요청 프레임 수입니다.",
73 | 	"setting_lang": "웹인터페이스 언어를 선택 할 수 있습니다.\n언어파일이 있는지 확인해주세요."
74 | }


--------------------------------------------------------------------------------
/web_interface/names.json:
--------------------------------------------------------------------------------
 1 | [
 2 | 	[
 3 | 		"b8:1d:aa:d5:6f:f0",
 4 | 		"don't!",
 5 | 		"[[[[not mine]]]]",
 6 | 		"",
 7 | 		1,
 8 | 		true
 9 | 	]
10 | 	,[
11 | 		"f4:6b:de:da:8d:95",
12 | 		"Spacehuhn",
13 | 		"--SpaceRouter!--",
14 | 		"",
15 | 		1,
16 | 		false
17 | 	]
18 | 	,[
19 | 		"00:11:22:33:44:55",
20 | 		"TEST",
21 | 		"JS sucks!",
22 | 		"5c:37:3b:f7:67:be",
23 | 		1,
24 | 		true
25 | 	]
26 | ]


--------------------------------------------------------------------------------
/web_interface/run:
--------------------------------------------------------------------------------
1 | Empty file :D


--------------------------------------------------------------------------------
/web_interface/scan.html:
--------------------------------------------------------------------------------
  1 | <!--- This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther -->
  2 | 
  3 | <!Doctype html>
  4 | <html>
  5 | 
  6 | <head>
  7 | 	<meta charset="UTF-8">
  8 | 	<meta name="viewport" content="width=device-width, initial-scale=0.8, minimal-ui">
  9 | 	<meta name="theme-color" content="#36393E">
 10 | 
 11 | 	<meta name="description" content="ESP8266 Deauther">
 12 | 	<title>ESP8266 Deauther</title>
 13 | 
 14 | 	<link rel="stylesheet" type="text/css" href="style.css">
 15 | 	<script src="js/site.js"></script>
 16 | 	<script src="js/scan.js"></script>
 17 | </head>
 18 | 
 19 | <body onload="loadLang()">
 20 | 	<nav>
 21 | 		<ul class="menu">
 22 | 			<li><a href="scan.html" data-translate="scan">Scan</a></li>
 23 | 			<li><a href="ssids.html" data-translate="ssids">SSIDs</a></li>
 24 | 			<li><a href="attack.html" data-translate="attacks">Attack</a></li>
 25 | 			<li><a href="settings.html" data-translate="settings">Settings</a></li>
 26 | 		</ul>
 27 | 	</nav>
 28 | 
 29 | 	<div id="status"></div>
 30 | 
 31 | 	<div class="container">
 32 | 		<div class="row">
 33 | 			<div class="col-12">
 34 | 				<h1 class="header" data-translate="scan">Scan</h1>
 35 | 
 36 | 				<button id=scanZero onclick="scan(0)">Scan APs</button>
 37 | 				<button id=scanOne onclick="scan(1)">Scan Stations</button>
 38 | 				<button id=RButton onclick="load()" data-translate="reload" class="right">Reload</button>
 39 | 			</div>
 40 | 		</div>
 41 | 		<div class="row">
 42 | 			<div class="col-6">
 43 | 				<label for="ch" data-translate="channel">Channel</label>
 44 | 			</div>
 45 | 			<div class="col-6">
 46 | 				<select id="ch" name="ch">
 47 | 					<option value="all" data-translate="all">All</option>
 48 | 					<option value="1">1</option>
 49 | 					<option value="2">2</option>
 50 | 					<option value="3">3</option>
 51 | 					<option value="4">4</option>
 52 | 					<option value="5">5</option>
 53 | 					<option value="6">6</option>
 54 | 					<option value="7">7</option>
 55 | 					<option value="8">8</option>
 56 | 					<option value="9">9</option>
 57 | 					<option value="10">10</option>
 58 | 					<option value="11">11</option>
 59 | 					<option value="12">12</option>
 60 | 					<option value="13">13</option>
 61 | 					<option value="14">14</option>
 62 | 				</select>
 63 | 			</div>
 64 | 		</div>
 65 | 		<div class="row">
 66 | 			<div class="col-6">
 67 | 				<label data-translate="station_scan_time">Station Scan Time</label>
 68 | 			</div>
 69 | 			<div class="col-6">
 70 | 				<input type="number" value="15" id="scanTime">s
 71 | 			</div>
 72 | 		</div>
 73 | 		<div class="row">
 74 | 			<div class="col-12">
 75 | 				<p>
 76 | 					<span class="red" data-translate="info_span">INFO: </span><br>
 77 | 					<span data-translate="scan_info">
 78 | 						- Click Scan and wait until the blue LED on your board turns off (or changes to green), then
 79 | 						click on Reload.<br>
 80 | 						- The web interface will be unavailable during a station scan and you will have to
 81 | 						reconnect!<br>
 82 | 						- Please select only one target!<br>
 83 | 					</span>
 84 | 					<span data-translate="info_disclaimer">In case of an unexpected error, please reload the site and
 85 | 						look at the serial monitor for further debugging.</span>
 86 | 				</p>
 87 | 
 88 | 				<hr>
 89 | 
 90 | 				<h2><span>Access Points</span>: <span id="apNum"></span></h2>
 91 | 				<table id="apTable"></table>
 92 | 				<button onclick="selectAll(0,true)" data-translate="select_all">select all</button>
 93 | 				<button onclick="selectAll(0,false)" data-translate="deselect_all">deselect all</button>
 94 | 
 95 | 				<hr>
 96 | 
 97 | 				<h2><span>Stations</span>: <span id="stNum"></span></h2>
 98 | 				<table id="stTable"></table>
 99 | 				<button onclick="selectAll(1,true)" data-translate="select_all">select all</button>
100 | 				<button onclick="selectAll(1,false)" data-translate="deselect_all">deselect all</button>
101 | 
102 | 				<hr>
103 | 
104 | 				<h2><span data-translate="devices">Saved Devices</span>: <span id="nNum"></span></h2>
105 | 				<table id="nTable"></table>
106 | 				<button onclick="selectAll(2,true)" data-translate="select_all">select all</button>
107 | 				<button onclick="selectAll(2,false)" data-translate="deselect_all">deselect all</button>
108 | 				<button onclick="add(2)" data-translate="new">new</button>
109 | 			</div>
110 | 		</div>
111 | 	</div>
112 | 	<footer>
113 | 		<span id="version">Version 2.6.1</span>
114 | 		<br>
115 | 		<br>
116 | 		<a href="http://deauther.maltronics.com" target="_blank">Wiki</a> | <a href="info.html">Credits</a>
117 | 	</footer>
118 | </body>
119 | 
120 | </html>


--------------------------------------------------------------------------------
/web_interface/scan.json:
--------------------------------------------------------------------------------
 1 | {
 2 |    "aps":[
 3 |       [
 4 |          "Don't",
 5 |          "--SpaceRouter!--",
 6 |          6,
 7 |          -57,
 8 |          "WPA2",
 9 |          "f4:6b:de:da:8d:95",
10 |          "Spacehuhn",
11 |          false
12 |       ],
13 |       [
14 |          "call",
15 |          "",
16 |          1,
17 |          -80,
18 |          "-",
19 |          "cc:cf:1e:d5:5b:2b",
20 |          "SpaceLtd",
21 |          true
22 |       ],
23 |       [
24 |          "it",
25 |          "",
26 |          6,
27 |          -81,
28 |          "WPA*",
29 |          "5c:37:3b:f7:67:be",
30 |          "SpaceBox",
31 |          false
32 |       ],
33 |       [
34 |          "a",
35 |          "",
36 |          8,
37 |          -82,
38 |          "WPA2",
39 |          "cd:ce:1e:0a:4e:9e",
40 |          "SpacEEE",
41 |          false
42 |       ],
43 |       [
44 |          "jammer",
45 |          "",
46 |          8,
47 |          -83,
48 |          "WPA2",
49 |          "c7:0e:14:95:a1:3b",
50 |          "Chicken!",
51 |          false
52 |       ],
53 | 	  [
54 |          "Don't call it a Jammer! DON'T !!",
55 |          "",
56 |          8,
57 |          -90,
58 |          "WPA2",
59 |          "c8:0e:14:95:a1:3b",
60 |          "Huhn",
61 |          false
62 |       ]
63 |    ],
64 |    "stations":[
65 |       [
66 |          "04:d7:aa:dc:6e:5a",
67 |          6,
68 |          "",
69 |          "Just",
70 |          168,
71 |          2,
72 |          "<1sec",
73 |          false
74 |       ],
75 |   
76 |       [
77 |          "b8:1d:aa:d5:6f:f0",
78 |          8,
79 |          "[[[[not mine]]]]",
80 |          "don't!",
81 |          2,
82 |          4,
83 |          "<1sec",
84 |          true
85 |       ],
86 |       [
87 |          "58:41:4e:7a:dd:1b",
88 |          8,
89 |          "",
90 |          "OK?!",
91 |          2,
92 |          3,
93 |          "<1min",
94 |          false
95 |       ]
96 |    ]
97 | }


--------------------------------------------------------------------------------
/web_interface/settings.html:
--------------------------------------------------------------------------------
 1 | <!--- This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther -->
 2 | 
 3 | <!Doctype html>
 4 | <html>
 5 | 
 6 | <head>
 7 | 	<meta charset="UTF-8">
 8 | 	<meta name="viewport" content="width=device-width, initial-scale=0.8, minimal-ui">
 9 | 	<meta name="theme-color" content="#36393E">
10 | 
11 | 	<meta name="description" content="ESP8266 Deauther">
12 | 	<title>ESP8266 Deauther</title>
13 | 
14 | 	<link rel="stylesheet" type="text/css" href="style.css">
15 | 	<script src="js/site.js"></script>
16 | 	<script src="js/settings.js"></script>
17 | </head>
18 | 
19 | <body onload="loadLang()">
20 | 	<nav>
21 | 		<ul class="menu">
22 | 			<li><a href="scan.html" data-translate="scan">Scan</a></li>
23 | 			<li><a href="ssids.html" data-translate="ssids">SSIDs</a></li>
24 | 			<li><a href="attack.html" data-translate="attacks">Attack</a></li>
25 | 			<li><a href="settings.html" data-translate="settings">Settings</a></li>
26 | 		</ul>
27 | 	</nav>
28 | 
29 | 	<div id="status"></div>
30 | 
31 | 	<div class="container">
32 | 		<div class="row">
33 | 			<div class="col-12">
34 | 				<h1 class="header" data-translate="settings">Settings</h1>
35 | 
36 | 				<button
37 | 					onclick="getFile('run?cmd=stopap');alert('Turning off access point now. Restart your Deauther to be able to connect again.')"
38 | 					class="red" data-translate="wifi_off">WiFi off</button>
39 | 				<button onclick="getFile('run?cmd=reset;;save settings')" class="red"
40 | 					data-translate="reset">Reset</button>
41 | 				<button onclick="getFile('run?cmd=reboot')" class="red right" data-translate="reboot">reboot</button>
42 | 
43 | 				<p>
44 | 					<span class="red" data-translate="info_span">INFO:</span><br>
45 | 					<span data-translate="settings_info">
46 | 						- Some settings require a reboot.<br>
47 | 						- Click save to make sure that your changes are applied.<br>
48 | 					</span>
49 | 					<span data-translate="info_disclaimer">In case of an unexpected error, please reload the site and
50 | 						look at the serial monitor for further debugging.</span><br>
51 | 				</p>
52 | 
53 | 				<button onclick="save()" data-translate="save">save</button>
54 | 				<button onclick="load()" class="right" data-translate="reload">reload</button>
55 | 			</div>
56 | 		</div>
57 | 
58 | 		<div id="settingsList"></div>
59 | 	</div>
60 | 	<footer>
61 | 		<span id="version">Version 2.6.1</span>
62 | 		<br>
63 | 		<br>
64 | 		<a href="http://deauther.maltronics.com" target="_blank">Wiki</a> | <a href="info.html">Credits</a>
65 | 	</footer>
66 | </body>
67 | 
68 | </html>


--------------------------------------------------------------------------------
/web_interface/settings.json:
--------------------------------------------------------------------------------
 1 | {
 2 |     "version": "over9000",
 3 |     "ssid": "pwned",
 4 |     "password": "deauther",
 5 |     "channel": 1,
 6 |     "hidden": false,
 7 |     "captivePortal": true,
 8 |     "lang": "en",
 9 |     "autosave": true,
10 |     "autosavetime": 30000,
11 |     "display": false,
12 |     "displayTimeout": 600,
13 |     "serial": true,
14 |     "serialEcho": true,
15 |     "web": true,
16 |     "led": true,
17 |     "maxch": 14,
18 |     "macSt": "aa:bb:cc:dd:ee:ff",
19 |     "macAP": "00:11:22:33:44:55",
20 |     "chtime": 384,
21 |     "minDeauths": 3,
22 |     "attacktimeout": 600,
23 |     "deauthspertarget": 20,
24 |     "deauthReason": 1,
25 |     "beaconchannel": false,
26 |     "beaconInterval": false,
27 |     "randomTX": false,
28 |     "probesPerSSID": 1
29 | }


--------------------------------------------------------------------------------
/web_interface/ssids.html:
--------------------------------------------------------------------------------
  1 | <!--- This software is licensed under the MIT License: https://github.com/spacehuhntech/esp8266_deauther -->
  2 | 
  3 | <!Doctype html>
  4 | <html>
  5 | 
  6 | <head>
  7 | 	<meta charset="UTF-8">
  8 | 	<meta name="viewport" content="width=device-width, initial-scale=0.8, minimal-ui">
  9 | 	<meta name="theme-color" content="#36393E">
 10 | 
 11 | 	<meta name="description" content="ESP8266 Deauther">
 12 | 	<title>ESP8266 Deauther</title>
 13 | 
 14 | 	<link rel="stylesheet" type="text/css" href="style.css">
 15 | 	<script src="js/site.js"></script>
 16 | 	<script src="js/ssids.js"></script>
 17 | </head>
 18 | 
 19 | <body onload="loadLang()">
 20 | 	<nav>
 21 | 		<ul class="menu">
 22 | 			<li><a href="scan.html" data-translate="scan">Scan</a></li>
 23 | 			<li><a href="ssids.html" data-translate="ssids">SSIDs</a></li>
 24 | 			<li><a href="attack.html" data-translate="attacks">Attack</a></li>
 25 | 			<li><a href="settings.html" data-translate="settings">Settings</a></li>
 26 | 		</ul>
 27 | 	</nav>
 28 | 
 29 | 	<div id="status"></div>
 30 | 
 31 | 	<div class="container">
 32 | 		<div class="row">
 33 | 			<div class="col-12">
 34 | 				<h1 class="header" data-translate="ssids">SSIDs</h1>
 35 | 			</div>
 36 | 		</div>
 37 | 		<div class="row">
 38 | 			<div class="col-6">
 39 | 				<label for="ssid">SSID</label>
 40 | 			</div>
 41 | 			<div class="col-6">
 42 | 				<input type="text" id="ssid" name="ssid" placeholder="SSID" maxlength="32">
 43 | 			</div>
 44 | 		</div>
 45 | 		<div class="row">
 46 | 			<div class="col-6">
 47 | 				<label>WPA2</label>
 48 | 			</div>
 49 | 			<div class="col-6">
 50 | 				<label class='checkBoxContainer'><input id="enc" type='checkbox'><span class='checkmark'></span></label>
 51 | 			</div>
 52 | 		</div>
 53 | 		<div class="row">
 54 | 			<div class="col-6">
 55 | 				<label data-translate="number">Number</label>
 56 | 			</div>
 57 | 			<div class="col-6">
 58 | 				<input id="ssidNum" type="number" value="1" max="60" min="1">
 59 | 			</div>
 60 | 		</div>
 61 | 		<div class="row">
 62 | 			<div class="col-6">
 63 | 				<label data-translate="overwrite">Overwrite</label>
 64 | 			</div>
 65 | 			<div class="col-6">
 66 | 				<label class='checkBoxContainer'><input id="overwrite" type='checkbox' checked><span
 67 | 						class='checkmark'></span></label>
 68 | 			</div>
 69 | 		</div>
 70 | 		<div class="row">
 71 | 			<div class="col-12">
 72 | 				<button onclick="add()" data-translate="add">add</button>
 73 | 				<button onclick="addSelected()" data-translate="add_selected">clone selected APs</button>
 74 | 			</div>
 75 | 		</div>
 76 | 		<div class="row">
 77 | 			<div class="col-12">
 78 | 				<button onclick="load()" class="right" data-translate="reload">Reload</button>
 79 | 				<p>
 80 | 					<span class="red" data-translate="info_span">INFO:</span><br>
 81 | 					<span data-translate="ssids_info">
 82 | 						- This SSID list is used for the beacon and probe attack.<br>
 83 | 						- Each SSID can be up to 32 characters.<br>
 84 | 						- Don't forget to click save when you edited a SSID.<br>
 85 | 						- You have to click Reload after cloning SSIDs.<br>
 86 | 					</span>
 87 | 					<span data-translate="info_disclaimer">In case of an unexpected error, please reload the site and
 88 | 						look at the serial monitor for further debugging.</span><br>
 89 | 				</p>
 90 | 				<hr>
 91 | 			</div>
 92 | 		</div>
 93 | 		<div class="row">
 94 | 			<div class="col-6">
 95 | 				<label for="interval" data-translate="time_interval">Time Interval</label>
 96 | 			</div>
 97 | 			<div class="col-6">
 98 | 				<input id="interval" name="interval" type="number" value="10" max="600" min="1">s
 99 | 			</div>
100 | 		</div>
101 | 		<div class="row">
102 | 			<div class="col-12">
103 | 				<button onclick="enableRandom()" id="randomBtn">Enable Random Mode</button>
104 | 				<p data-translate="random_desc">Enable the random mode to generate a random SSID list in a given
105 | 					interval.</p>
106 | 				<hr>
107 | 				<table id="ssidTable"></table>
108 | 				<button onclick="removeAll()" class="red" data-translate="remove_all">Remove All</button>
109 | 			</div>
110 | 		</div>
111 | 	</div>
112 | 	<footer>
113 | 		<span id="version">Version 2.6.1</span>
114 | 		<br>
115 | 		<br>
116 | 		<a href="http://deauther.maltronics.com" target="_blank">Wiki</a> | <a href="info.html">Credits</a>
117 | 	</footer>
118 | </body>
119 | 
120 | </html>


--------------------------------------------------------------------------------
/web_interface/ssids.json:
--------------------------------------------------------------------------------
  1 | {
  2 | 	"random": false,
  3 | 	"ssids":[
  4 |   [
  5 |     "Cthulhu fm'latgh stell'bsna",
  6 |     false,
  7 |     27
  8 |   ],
  9 |   [
 10 |     "Nyarlathotep, vulgtm",
 11 |     false,
 12 |     20
 13 |   ],
 14 |   [
 15 |     "Sgn'wahl phlegeth",
 16 |     false,
 17 |     17
 18 |   ],
 19 |   [
 20 |     "Nyarlathotep nnnee, ehye",
 21 |     true,
 22 |     24
 23 |   ],
 24 |   [
 25 |     "Phlegeth ph'Yoggoth",
 26 |     true,
 27 |     19
 28 |   ],
 29 |   [
 30 |     "fm'latgh ilyaa, llll",
 31 |     true,
 32 |     20
 33 |   ],
 34 |   [
 35 |     "Lloigog gotha h'n'ghft",
 36 |     true,
 37 |     22
 38 |   ],
 39 |   [
 40 |     "n'gha, h'goka",
 41 |     false,
 42 |     13
 43 |   ],
 44 |   [
 45 |     "Sll'ha Azathoth",
 46 |     true,
 47 |     15
 48 |   ],
 49 |   [
 50 |     "zhro tharanak, kn'a",
 51 |     false,
 52 |     19
 53 |   ],
 54 |   [
 55 |     "Sll'haor phlegethog",
 56 |     true,
 57 |     19
 58 |   ],
 59 |   [
 60 |     "y'hah lw'nafh, cee",
 61 |     true,
 62 |     18
 63 |   ],
 64 |   [
 65 |     "Kn'a mnahn' li'heeagl",
 66 |     true,
 67 |     21
 68 |   ],
 69 |   [
 70 |     "h'lw'nafh, R'lyeh",
 71 |     true,
 72 |     17
 73 |   ],
 74 |   [
 75 |     "Ya bug Tsathoggua",
 76 |     false,
 77 |     17
 78 |   ],
 79 |   [
 80 |     "ah, fm'latgh",
 81 |     false,
 82 |     12
 83 |   ],
 84 |   [
 85 |     "F'ilyaa ebunma tharanak",
 86 |     true,
 87 |     23
 88 |   ],
 89 |   [
 90 |     "kadishtu, nilgh'ri",
 91 |     true,
 92 |     18
 93 |   ],
 94 |   [
 95 |     "R'luh nog gof'nn",
 96 |     true,
 97 |     16
 98 |   ],
 99 |   [
100 |     "hriiagl, stell'bsna",
101 |     false,
102 |     19
103 |   ],
104 |   [
105 |     "R'lyeh nnnYoggoth",
106 |     false,
107 |     17
108 |   ],
109 |   [
110 |     "syha'h nnnilyaa, R'lyeh",
111 |     false,
112 |     23
113 |   ],
114 |   [
115 |     "Nghai s'uhn bug",
116 |     false,
117 |     15
118 |   ],
119 |   [
120 |     "zhro, sgn'wahl",
121 |     false,
122 |     14
123 |   ],
124 |   [
125 |     "F'ftaghu throd",
126 |     true,
127 |     14
128 |   ],
129 |   [
130 |     "h'hai nnnnog, bug",
131 |     false,
132 |     17
133 |   ],
134 |   [
135 |     "Ulnyar ron uaaah",
136 |     true,
137 |     16
138 |   ],
139 |   [
140 |     "ngphlegeth, R'lyeh",
141 |     false,
142 |     18
143 |   ],
144 |   [
145 |     "Ch' nw n'ghftog",
146 |     true,
147 |     15
148 |   ],
149 |   [
150 |     "lloig, ph'n'ghft",
151 |     true,
152 |     16
153 |   ],
154 |   [
155 |     "Ahnyth throd nas'uhn",
156 |     false,
157 |     20
158 |   ],
159 |   [
160 |     "y'hahagl, f'sgn'wahl",
161 |     true,
162 |     20
163 |   ],
164 |   [
165 |     "Throdnyth zhro sll'ha",
166 |     true,
167 |     21
168 |   ],
169 |   [
170 |     "naflvulgtm, nnnnw",
171 |     true,
172 |     17
173 |   ],
174 |   [
175 |     "Ngehye Hasturnyth nnnorr'e",
176 |     true,
177 |     26
178 |   ],
179 |   [
180 |     "ftaghuoth, mg",
181 |     true,
182 |     13
183 |   ],
184 |   [
185 |     "Lloig naflebunma y-Chaugnar",
186 |     false,
187 |     27
188 |   ],
189 |   [
190 |     "Faugn ph'uaaah, naflmg",
191 |     false,
192 |     22
193 |   ],
194 |   [
195 |     "Azathoth shugg gotha",
196 |     false,
197 |     20
198 |   ],
199 |   [
200 |     "Hastur, fhtagn",
201 |     false,
202 |     14
203 |   ],
204 |   [
205 |     "Lw'nafh nognyth",
206 |     true,
207 |     15
208 |   ],
209 |   [
210 |     "nnngrah'n hrii, s'uhn",
211 |     false,
212 |     21
213 |   ],
214 |   [
215 |     "Hai kadishtunyth",
216 |     false,
217 |     16
218 |   ],
219 |   [
220 |     "nahlirgh uh'e, athgog",
221 |     true,
222 |     21
223 |   ],
224 |   [
225 |     "Nilgh'ri R'lyeh",
226 |     true,
227 |     15
228 |   ],
229 |   [
230 |     "nglw'nafh 'bthnk, ph'mnahn'",
231 |     true,
232 |     27
233 |   ],
234 |   [
235 |     "Tharanak ehye kadishtuoth",
236 |     true,
237 |     25
238 |   ],
239 |   [
240 |     "bug, hupadgh",
241 |     true,
242 |     12
243 |   ],
244 |   [
245 |     "Nnnvulgtlagln sgn'wahl",
246 |     true,
247 |     22
248 |   ],
249 |   [
250 |     "ph'goka nafln'gha, y-'bthnk",
251 |     true,
252 |     27
253 |   ],
254 |   [
255 |     "Dagon ilyaa throd",
256 |     true,
257 |     17
258 |   ],
259 |   [
260 |     "sgn'wahl, uln",
261 |     false,
262 |     13
263 |   ],
264 |   [
265 |     "Shub-Niggurath naChaugnar",
266 |     true,
267 |     25
268 |   ],
269 |   [
270 |     "Faugn f'r'luh phlegeth, lw'nafh",
271 |     true,
272 |     31
273 |   ],
274 |   [
275 |     "Ebunma ehye hlirgh",
276 |     false,
277 |     18
278 |   ],
279 |   [
280 |     "Shub-Niggurath, ilyaa",
281 |     true,
282 |     21
283 |   ],
284 |   [
285 |     "Cgeb gnaiih Dagon",
286 |     true,
287 |     17
288 |   ],
289 |   [
290 |     "gnaiih, nnnn'ghft",
291 |     false,
292 |     17
293 |   ],
294 |   [
295 |     "Hlirgh k'yarnak",
296 |     false,
297 |     15
298 |   ],
299 |   [
300 |     "ch', Cthulhu",
301 |     false,
302 |     12
303 |   ]
304 | ]
305 | }
306 | 